/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MissionControl);
  }
}(this, function(expect, MissionControl) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MissionControl.ListsApi();
  });

  describe('(package)', function() {
    describe('ListsApi', function() {
      describe('listsGet', function() {
        it('should call listsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for listsGet call and complete the assertions
          /*
          var opts = {};

          instance.listsGet(opts).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listsListIdDelete', function() {
        it('should call listsListIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for listsListIdDelete call
          /*

          instance.listsListIdDelete(listId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listsListIdGet', function() {
        it('should call listsListIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for listsListIdGet call and complete the assertions
          /*

          instance.listsListIdGet(listId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.InlineResponse2014);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listsListIdMembersGet', function() {
        it('should call listsListIdMembersGet successfully', function(done) {
          // TODO: uncomment, update parameter values for listsListIdMembersGet call and complete the assertions
          /*
          var opts = {};

          instance.listsListIdMembersGet(listId, opts).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MissionControl.ListMember);
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listsListIdPatch', function() {
        it('should call listsListIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for listsListIdPatch call and complete the assertions
          /*

          instance.listsListIdPatch(body, listId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.InlineResponse2014);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listsListIdPredicatesGet', function() {
        it('should call listsListIdPredicatesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for listsListIdPredicatesGet call and complete the assertions
          /*
          var opts = {};

          instance.listsListIdPredicatesGet(listId, opts).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MissionControl.Predicate);
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listsListIdPredicatesPost', function() {
        it('should call listsListIdPredicatesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for listsListIdPredicatesPost call and complete the assertions
          /*

          instance.listsListIdPredicatesPost(body, listId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Predicate);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listsPost', function() {
        it('should call listsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for listsPost call and complete the assertions
          /*

          instance.listsPost(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.InlineResponse2014);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('predicatesPredicateIdDelete', function() {
        it('should call predicatesPredicateIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for predicatesPredicateIdDelete call
          /*

          instance.predicatesPredicateIdDelete(predicateId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('predicatesPredicateIdGet', function() {
        it('should call predicatesPredicateIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for predicatesPredicateIdGet call and complete the assertions
          /*

          instance.predicatesPredicateIdGet(predicateId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Predicate);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('predicatesPredicateIdPatch', function() {
        it('should call predicatesPredicateIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for predicatesPredicateIdPatch call and complete the assertions
          /*

          instance.predicatesPredicateIdPatch(body, predicateId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Predicate);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('predicatesPredicateIdRulesGet', function() {
        it('should call predicatesPredicateIdRulesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for predicatesPredicateIdRulesGet call and complete the assertions
          /*
          var opts = {};

          instance.predicatesPredicateIdRulesGet(predicateId, opts).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MissionControl.Rule);
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('predicatesPredicateIdRulesPost', function() {
        it('should call predicatesPredicateIdRulesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for predicatesPredicateIdRulesPost call and complete the assertions
          /*

          instance.predicatesPredicateIdRulesPost(body, predicateId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Rule);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('rulesRuleIdDelete', function() {
        it('should call rulesRuleIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for rulesRuleIdDelete call
          /*

          instance.rulesRuleIdDelete(ruleId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('rulesRuleIdGet', function() {
        it('should call rulesRuleIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for rulesRuleIdGet call and complete the assertions
          /*

          instance.rulesRuleIdGet(ruleId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Rule);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('rulesRuleIdPatch', function() {
        it('should call rulesRuleIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for rulesRuleIdPatch call and complete the assertions
          /*

          instance.rulesRuleIdPatch(body, ruleId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Rule);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
