/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MissionControl);
  }
}(this, function(expect, MissionControl) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MissionControl.LogisticsApi();
  });

  describe('(package)', function() {
    describe('LogisticsApi', function() {
      describe('commissioningsCommissioningIdDelete', function() {
        it('should call commissioningsCommissioningIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for commissioningsCommissioningIdDelete call
          /*

          instance.commissioningsCommissioningIdDelete(commissioningId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('commissioningsCommissioningIdGet', function() {
        it('should call commissioningsCommissioningIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for commissioningsCommissioningIdGet call and complete the assertions
          /*

          instance.commissioningsCommissioningIdGet(commissioningId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Commissioning);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('commissioningsCommissioningIdPatch', function() {
        it('should call commissioningsCommissioningIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for commissioningsCommissioningIdPatch call and complete the assertions
          /*

          instance.commissioningsCommissioningIdPatch(body, commissioningId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Commissioning);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('commissioningsCommissioningIdPickupsGet', function() {
        it('should call commissioningsCommissioningIdPickupsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for commissioningsCommissioningIdPickupsGet call and complete the assertions
          /*
          var opts = {};

          instance.commissioningsCommissioningIdPickupsGet(commissioningId, opts).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MissionControl.Pickup);
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('commissioningsCommissioningIdPickupsPost', function() {
        it('should call commissioningsCommissioningIdPickupsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for commissioningsCommissioningIdPickupsPost call and complete the assertions
          /*

          instance.commissioningsCommissioningIdPickupsPost(body, commissioningId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Pickup);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('commissioningsCommissioningIdShipmentsGet', function() {
        it('should call commissioningsCommissioningIdShipmentsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for commissioningsCommissioningIdShipmentsGet call and complete the assertions
          /*
          var opts = {};

          instance.commissioningsCommissioningIdShipmentsGet(commissioningId, opts).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MissionControl.Shipment);
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('commissioningsCommissioningIdShipmentsPost', function() {
        it('should call commissioningsCommissioningIdShipmentsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for commissioningsCommissioningIdShipmentsPost call and complete the assertions
          /*

          instance.commissioningsCommissioningIdShipmentsPost(body, commissioningId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.InlineResponse2013);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('commissioningsGet', function() {
        it('should call commissioningsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for commissioningsGet call and complete the assertions
          /*
          var opts = {};

          instance.commissioningsGet(opts).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MissionControl.Commissioning);
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('commissioningsPost', function() {
        it('should call commissioningsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for commissioningsPost call and complete the assertions
          /*

          instance.commissioningsPost(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Commissioning);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pickupsPickupIdDelete', function() {
        it('should call pickupsPickupIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for pickupsPickupIdDelete call
          /*

          instance.pickupsPickupIdDelete(pickupId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pickupsPickupIdGet', function() {
        it('should call pickupsPickupIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for pickupsPickupIdGet call and complete the assertions
          /*

          instance.pickupsPickupIdGet(pickupId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Pickup);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pickupsPickupIdPatch', function() {
        it('should call pickupsPickupIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for pickupsPickupIdPatch call and complete the assertions
          /*

          instance.pickupsPickupIdPatch(body, pickupId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Pickup);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('shipmentsShipmentIdAddressDelete', function() {
        it('should call shipmentsShipmentIdAddressDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for shipmentsShipmentIdAddressDelete call
          /*

          instance.shipmentsShipmentIdAddressDelete(shipmentId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('shipmentsShipmentIdAddressGet', function() {
        it('should call shipmentsShipmentIdAddressGet successfully', function(done) {
          // TODO: uncomment, update parameter values for shipmentsShipmentIdAddressGet call and complete the assertions
          /*

          instance.shipmentsShipmentIdAddressGet(shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Address);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('shipmentsShipmentIdAddressPatch', function() {
        it('should call shipmentsShipmentIdAddressPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for shipmentsShipmentIdAddressPatch call and complete the assertions
          /*

          instance.shipmentsShipmentIdAddressPatch(body, shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Address);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('shipmentsShipmentIdAddressPost', function() {
        it('should call shipmentsShipmentIdAddressPost successfully', function(done) {
          // TODO: uncomment, update parameter values for shipmentsShipmentIdAddressPost call and complete the assertions
          /*

          instance.shipmentsShipmentIdAddressPost(body, shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Address);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('shipmentsShipmentIdDelete', function() {
        it('should call shipmentsShipmentIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for shipmentsShipmentIdDelete call
          /*

          instance.shipmentsShipmentIdDelete(shipmentId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('shipmentsShipmentIdGet', function() {
        it('should call shipmentsShipmentIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for shipmentsShipmentIdGet call and complete the assertions
          /*

          instance.shipmentsShipmentIdGet(shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.InlineResponse2013);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('shipmentsShipmentIdPatch', function() {
        it('should call shipmentsShipmentIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for shipmentsShipmentIdPatch call and complete the assertions
          /*

          instance.shipmentsShipmentIdPatch(body, shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.InlineResponse2013);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
