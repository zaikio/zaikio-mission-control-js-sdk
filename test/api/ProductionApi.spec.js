/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MissionControl);
  }
}(this, function(expect, MissionControl) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MissionControl.ProductionApi();
  });

  describe('(package)', function() {
    describe('ProductionApi', function() {
      describe('batchesBatchIdDelete', function() {
        it('should call batchesBatchIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for batchesBatchIdDelete call
          /*

          instance.batchesBatchIdDelete(batchId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('batchesBatchIdGet', function() {
        it('should call batchesBatchIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for batchesBatchIdGet call and complete the assertions
          /*

          instance.batchesBatchIdGet(batchId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Batch);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('batchesBatchIdPatch', function() {
        it('should call batchesBatchIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for batchesBatchIdPatch call and complete the assertions
          /*

          instance.batchesBatchIdPatch(body, batchId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Batch);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('batchesGet', function() {
        it('should call batchesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for batchesGet call and complete the assertions
          /*
          var opts = {};

          instance.batchesGet(opts).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MissionControl.Batch);
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('batchesPost', function() {
        it('should call batchesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for batchesPost call and complete the assertions
          /*

          instance.batchesPost(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Batch);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('imposingsImposingIdDelete', function() {
        it('should call imposingsImposingIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for imposingsImposingIdDelete call
          /*

          instance.imposingsImposingIdDelete(imposingId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('imposingsImposingIdGet', function() {
        it('should call imposingsImposingIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for imposingsImposingIdGet call and complete the assertions
          /*

          instance.imposingsImposingIdGet(imposingId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Imposing);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('imposingsImposingIdPatch', function() {
        it('should call imposingsImposingIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for imposingsImposingIdPatch call and complete the assertions
          /*

          instance.imposingsImposingIdPatch(body, imposingId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Imposing);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('imposingsImposingIdSignaturesGet', function() {
        it('should call imposingsImposingIdSignaturesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for imposingsImposingIdSignaturesGet call and complete the assertions
          /*

          instance.imposingsImposingIdSignaturesGet(imposingId).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MissionControl.Signature);
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('imposingsImposingIdSignaturesPost', function() {
        it('should call imposingsImposingIdSignaturesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for imposingsImposingIdSignaturesPost call and complete the assertions
          /*

          instance.imposingsImposingIdSignaturesPost(body, imposingId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Signature);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('intermediateProductsIntermediateProductIdDelete', function() {
        it('should call intermediateProductsIntermediateProductIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for intermediateProductsIntermediateProductIdDelete call
          /*

          instance.intermediateProductsIntermediateProductIdDelete(intermediateProductId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('intermediateProductsIntermediateProductIdGet', function() {
        it('should call intermediateProductsIntermediateProductIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for intermediateProductsIntermediateProductIdGet call and complete the assertions
          /*

          instance.intermediateProductsIntermediateProductIdGet(intermediateProductId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.IntermediateProduct);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('intermediateProductsIntermediateProductIdPatch', function() {
        it('should call intermediateProductsIntermediateProductIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for intermediateProductsIntermediateProductIdPatch call and complete the assertions
          /*

          instance.intermediateProductsIntermediateProductIdPatch(body, intermediateProductId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.IntermediateProduct);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('jobsJobIdIntermediateProductsGet', function() {
        it('should call jobsJobIdIntermediateProductsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for jobsJobIdIntermediateProductsGet call and complete the assertions
          /*
          var opts = {};

          instance.jobsJobIdIntermediateProductsGet(jobId, opts).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MissionControl.IntermediateProduct);
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('jobsJobIdIntermediateProductsPost', function() {
        it('should call jobsJobIdIntermediateProductsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for jobsJobIdIntermediateProductsPost call and complete the assertions
          /*

          instance.jobsJobIdIntermediateProductsPost(body, jobId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.IntermediateProduct);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('jobsJobIdProductionStrategiesGet', function() {
        it('should call jobsJobIdProductionStrategiesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for jobsJobIdProductionStrategiesGet call and complete the assertions
          /*

          instance.jobsJobIdProductionStrategiesGet(jobId).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MissionControl.ProductionStrategy);
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('jobsJobIdProductionStrategiesPost', function() {
        it('should call jobsJobIdProductionStrategiesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for jobsJobIdProductionStrategiesPost call and complete the assertions
          /*

          instance.jobsJobIdProductionStrategiesPost(body, jobId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.InlineResponse2011);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('jobsJobIdTodosGet', function() {
        it('should call jobsJobIdTodosGet successfully', function(done) {
          // TODO: uncomment, update parameter values for jobsJobIdTodosGet call and complete the assertions
          /*
          var opts = {};

          instance.jobsJobIdTodosGet(jobId, opts).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MissionControl.Todo);
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('jobsJobIdTodosPost', function() {
        it('should call jobsJobIdTodosPost successfully', function(done) {
          // TODO: uncomment, update parameter values for jobsJobIdTodosPost call and complete the assertions
          /*

          instance.jobsJobIdTodosPost(body, jobId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Todo);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productionPathsPost', function() {
        it('should call productionPathsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for productionPathsPost call and complete the assertions
          /*

          instance.productionPathsPost(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.InlineResponse201);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productionStrategiesProductionStrategyIdDelete', function() {
        it('should call productionStrategiesProductionStrategyIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for productionStrategiesProductionStrategyIdDelete call
          /*
          var opts = {};

          instance.productionStrategiesProductionStrategyIdDelete(productionStrategyId, opts).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productionStrategiesProductionStrategyIdGet', function() {
        it('should call productionStrategiesProductionStrategyIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for productionStrategiesProductionStrategyIdGet call and complete the assertions
          /*

          instance.productionStrategiesProductionStrategyIdGet(productionStrategyId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.InlineResponse2011);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productionStrategiesProductionStrategyIdImposingsGet', function() {
        it('should call productionStrategiesProductionStrategyIdImposingsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for productionStrategiesProductionStrategyIdImposingsGet call and complete the assertions
          /*

          instance.productionStrategiesProductionStrategyIdImposingsGet(productionStrategyId).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MissionControl.Imposing);
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productionStrategiesProductionStrategyIdImposingsPost', function() {
        it('should call productionStrategiesProductionStrategyIdImposingsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for productionStrategiesProductionStrategyIdImposingsPost call and complete the assertions
          /*

          instance.productionStrategiesProductionStrategyIdImposingsPost(body, productionStrategyId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Imposing);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productionStrategiesProductionStrategyIdPatch', function() {
        it('should call productionStrategiesProductionStrategyIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for productionStrategiesProductionStrategyIdPatch call and complete the assertions
          /*

          instance.productionStrategiesProductionStrategyIdPatch(body, productionStrategyId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.InlineResponse2011);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('signaturesSignatureIdDelete', function() {
        it('should call signaturesSignatureIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for signaturesSignatureIdDelete call
          /*

          instance.signaturesSignatureIdDelete(signatureId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('signaturesSignatureIdGet', function() {
        it('should call signaturesSignatureIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for signaturesSignatureIdGet call and complete the assertions
          /*

          instance.signaturesSignatureIdGet(signatureId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Signature);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('signaturesSignatureIdPatch', function() {
        it('should call signaturesSignatureIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for signaturesSignatureIdPatch call and complete the assertions
          /*

          instance.signaturesSignatureIdPatch(body, signatureId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Signature);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('todosTodoIdDelete', function() {
        it('should call todosTodoIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for todosTodoIdDelete call
          /*

          instance.todosTodoIdDelete(todoId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('todosTodoIdGet', function() {
        it('should call todosTodoIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for todosTodoIdGet call and complete the assertions
          /*

          instance.todosTodoIdGet(todoId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Todo);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('todosTodoIdPatch', function() {
        it('should call todosTodoIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for todosTodoIdPatch call and complete the assertions
          /*

          instance.todosTodoIdPatch(body, todoId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Todo);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('workstepGroupsGet', function() {
        it('should call workstepGroupsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for workstepGroupsGet call and complete the assertions
          /*
          var opts = {};

          instance.workstepGroupsGet(opts).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MissionControl.WorkstepGroup);
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('workstepGroupsPost', function() {
        it('should call workstepGroupsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for workstepGroupsPost call and complete the assertions
          /*

          instance.workstepGroupsPost(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.WorkstepGroup);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('workstepGroupsWorkstepGroupIdDelete', function() {
        it('should call workstepGroupsWorkstepGroupIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for workstepGroupsWorkstepGroupIdDelete call
          /*

          instance.workstepGroupsWorkstepGroupIdDelete(workstepGroupId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('workstepGroupsWorkstepGroupIdGet', function() {
        it('should call workstepGroupsWorkstepGroupIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for workstepGroupsWorkstepGroupIdGet call and complete the assertions
          /*

          instance.workstepGroupsWorkstepGroupIdGet(workstepGroupId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.WorkstepGroup);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('workstepGroupsWorkstepGroupIdPatch', function() {
        it('should call workstepGroupsWorkstepGroupIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for workstepGroupsWorkstepGroupIdPatch call and complete the assertions
          /*

          instance.workstepGroupsWorkstepGroupIdPatch(body, workstepGroupId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.WorkstepGroup);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('workstepsGet', function() {
        it('should call workstepsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for workstepsGet call and complete the assertions
          /*
          var opts = {};

          instance.workstepsGet(opts).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MissionControl.Workstep);
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('workstepsPost', function() {
        it('should call workstepsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for workstepsPost call and complete the assertions
          /*

          instance.workstepsPost(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Workstep);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('workstepsWorkstepIdDelete', function() {
        it('should call workstepsWorkstepIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for workstepsWorkstepIdDelete call
          /*

          instance.workstepsWorkstepIdDelete(workstepId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('workstepsWorkstepIdGet', function() {
        it('should call workstepsWorkstepIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for workstepsWorkstepIdGet call and complete the assertions
          /*

          instance.workstepsWorkstepIdGet(workstepId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Workstep);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('workstepsWorkstepIdPatch', function() {
        it('should call workstepsWorkstepIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for workstepsWorkstepIdPatch call and complete the assertions
          /*

          instance.workstepsWorkstepIdPatch(body, workstepId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(MissionControl.Workstep);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
