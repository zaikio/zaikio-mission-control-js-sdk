/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MissionControl);
  }
}(this, function(expect, MissionControl) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ImposingUpdate', function() {
      beforeEach(function() {
        instance = new MissionControl.ImposingUpdate();
      });

      it('should create an instance of ImposingUpdate', function() {
        // TODO: update the code to test ImposingUpdate
        expect(instance).to.be.a(MissionControl.ImposingUpdate);
      });

      it('should have the property partId (base name: "part_id")', function() {
        // TODO: update the code to test the property partId
        expect(instance).to.have.property('partId');
        // expect(instance.partId).to.be(expectedValueLiteral);
      });

      it('should have the property technique (base name: "technique")', function() {
        // TODO: update the code to test the property technique
        expect(instance).to.have.property('technique');
        // expect(instance.technique).to.be(expectedValueLiteral);
      });

      it('should have the property mode (base name: "mode")', function() {
        // TODO: update the code to test the property mode
        expect(instance).to.have.property('mode');
        // expect(instance.mode).to.be(expectedValueLiteral);
      });

      it('should have the property signatureMixing (base name: "signature_mixing")', function() {
        // TODO: update the code to test the property signatureMixing
        expect(instance).to.have.property('signatureMixing');
        // expect(instance.signatureMixing).to.be(expectedValueLiteral);
      });

      it('should have the property orientation (base name: "orientation")', function() {
        // TODO: update the code to test the property orientation
        expect(instance).to.have.property('orientation');
        // expect(instance.orientation).to.be(expectedValueLiteral);
      });

      it('should have the property machineId (base name: "machine_id")', function() {
        // TODO: update the code to test the property machineId
        expect(instance).to.have.property('machineId');
        // expect(instance.machineId).to.be(expectedValueLiteral);
      });

      it('should have the property requestedMachineId (base name: "requested_machine_id")', function() {
        // TODO: update the code to test the property requestedMachineId
        expect(instance).to.have.property('requestedMachineId');
        // expect(instance.requestedMachineId).to.be(expectedValueLiteral);
      });

      it('should have the property signatures (base name: "signatures")', function() {
        // TODO: update the code to test the property signatures
        expect(instance).to.have.property('signatures');
        // expect(instance.signatures).to.be(expectedValueLiteral);
      });

      it('should have the property substrate (base name: "substrate")', function() {
        // TODO: update the code to test the property substrate
        expect(instance).to.have.property('substrate');
        // expect(instance.substrate).to.be(expectedValueLiteral);
      });

    });
  });

}));
