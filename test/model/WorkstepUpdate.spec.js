/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MissionControl);
  }
}(this, function(expect, MissionControl) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('WorkstepUpdate', function() {
      beforeEach(function() {
        instance = new MissionControl.WorkstepUpdate();
      });

      it('should create an instance of WorkstepUpdate', function() {
        // TODO: update the code to test WorkstepUpdate
        expect(instance).to.be.a(MissionControl.WorkstepUpdate);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property kind (base name: "kind")', function() {
        // TODO: update the code to test the property kind
        expect(instance).to.have.property('kind');
        // expect(instance.kind).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property groupingId (base name: "grouping_id")', function() {
        // TODO: update the code to test the property groupingId
        expect(instance).to.have.property('groupingId');
        // expect(instance.groupingId).to.be(expectedValueLiteral);
      });

      it('should have the property expectedCostsForWork (base name: "expected_costs_for_work")', function() {
        // TODO: update the code to test the property expectedCostsForWork
        expect(instance).to.have.property('expectedCostsForWork');
        // expect(instance.expectedCostsForWork).to.be(expectedValueLiteral);
      });

      it('should have the property expectedCostsForMaterials (base name: "expected_costs_for_materials")', function() {
        // TODO: update the code to test the property expectedCostsForMaterials
        expect(instance).to.have.property('expectedCostsForMaterials');
        // expect(instance.expectedCostsForMaterials).to.be(expectedValueLiteral);
      });

      it('should have the property expectedDurationForPreparation (base name: "expected_duration_for_preparation")', function() {
        // TODO: update the code to test the property expectedDurationForPreparation
        expect(instance).to.have.property('expectedDurationForPreparation');
        // expect(instance.expectedDurationForPreparation).to.be(expectedValueLiteral);
      });

      it('should have the property expectedDurationForExecution (base name: "expected_duration_for_execution")', function() {
        // TODO: update the code to test the property expectedDurationForExecution
        expect(instance).to.have.property('expectedDurationForExecution');
        // expect(instance.expectedDurationForExecution).to.be(expectedValueLiteral);
      });

      it('should have the property expectedDurationForCleanup (base name: "expected_duration_for_cleanup")', function() {
        // TODO: update the code to test the property expectedDurationForCleanup
        expect(instance).to.have.property('expectedDurationForCleanup');
        // expect(instance.expectedDurationForCleanup).to.be(expectedValueLiteral);
      });

      it('should have the property actualCostsForWork (base name: "actual_costs_for_work")', function() {
        // TODO: update the code to test the property actualCostsForWork
        expect(instance).to.have.property('actualCostsForWork');
        // expect(instance.actualCostsForWork).to.be(expectedValueLiteral);
      });

      it('should have the property actualCostsForMaterials (base name: "actual_costs_for_materials")', function() {
        // TODO: update the code to test the property actualCostsForMaterials
        expect(instance).to.have.property('actualCostsForMaterials');
        // expect(instance.actualCostsForMaterials).to.be(expectedValueLiteral);
      });

      it('should have the property actualDurationForPreparation (base name: "actual_duration_for_preparation")', function() {
        // TODO: update the code to test the property actualDurationForPreparation
        expect(instance).to.have.property('actualDurationForPreparation');
        // expect(instance.actualDurationForPreparation).to.be(expectedValueLiteral);
      });

      it('should have the property actualDurationForExecution (base name: "actual_duration_for_execution")', function() {
        // TODO: update the code to test the property actualDurationForExecution
        expect(instance).to.have.property('actualDurationForExecution');
        // expect(instance.actualDurationForExecution).to.be(expectedValueLiteral);
      });

      it('should have the property actualDurationForCleanup (base name: "actual_duration_for_cleanup")', function() {
        // TODO: update the code to test the property actualDurationForCleanup
        expect(instance).to.have.property('actualDurationForCleanup');
        // expect(instance.actualDurationForCleanup).to.be(expectedValueLiteral);
      });

      it('should have the property actualDurationForException (base name: "actual_duration_for_exception")', function() {
        // TODO: update the code to test the property actualDurationForException
        expect(instance).to.have.property('actualDurationForException');
        // expect(instance.actualDurationForException).to.be(expectedValueLiteral);
      });

    });
  });

}));
