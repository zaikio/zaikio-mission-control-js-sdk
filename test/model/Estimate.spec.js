/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MissionControl);
  }
}(this, function(expect, MissionControl) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Estimate', function() {
      beforeEach(function() {
        instance = new MissionControl.Estimate();
      });

      it('should create an instance of Estimate', function() {
        // TODO: update the code to test Estimate
        expect(instance).to.be.a(MissionControl.Estimate);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updated_at")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property workstepEstimates (base name: "workstep_estimates")', function() {
        // TODO: update the code to test the property workstepEstimates
        expect(instance).to.have.property('workstepEstimates');
        // expect(instance.workstepEstimates).to.be(expectedValueLiteral);
      });

      it('should have the property approach (base name: "approach")', function() {
        // TODO: update the code to test the property approach
        expect(instance).to.have.property('approach');
        // expect(instance.approach).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property productionCosts (base name: "production_costs")', function() {
        // TODO: update the code to test the property productionCosts
        expect(instance).to.have.property('productionCosts');
        // expect(instance.productionCosts).to.be(expectedValueLiteral);
      });

      it('should have the property handlingCosts (base name: "handling_costs")', function() {
        // TODO: update the code to test the property handlingCosts
        expect(instance).to.have.property('handlingCosts');
        // expect(instance.handlingCosts).to.be(expectedValueLiteral);
      });

      it('should have the property shippingCosts (base name: "shipping_costs")', function() {
        // TODO: update the code to test the property shippingCosts
        expect(instance).to.have.property('shippingCosts');
        // expect(instance.shippingCosts).to.be(expectedValueLiteral);
      });

      it('should have the property markupPercentage (base name: "markup_percentage")', function() {
        // TODO: update the code to test the property markupPercentage
        expect(instance).to.have.property('markupPercentage');
        // expect(instance.markupPercentage).to.be(expectedValueLiteral);
      });

      it('should have the property markupCosts (base name: "markup_costs")', function() {
        // TODO: update the code to test the property markupCosts
        expect(instance).to.have.property('markupCosts');
        // expect(instance.markupCosts).to.be(expectedValueLiteral);
      });

      it('should have the property netSalesPrice (base name: "net_sales_price")', function() {
        // TODO: update the code to test the property netSalesPrice
        expect(instance).to.have.property('netSalesPrice');
        // expect(instance.netSalesPrice).to.be(expectedValueLiteral);
      });

      it('should have the property grossSalesPrice (base name: "gross_sales_price")', function() {
        // TODO: update the code to test the property grossSalesPrice
        expect(instance).to.have.property('grossSalesPrice');
        // expect(instance.grossSalesPrice).to.be(expectedValueLiteral);
      });

      it('should have the property taxes (base name: "taxes")', function() {
        // TODO: update the code to test the property taxes
        expect(instance).to.have.property('taxes');
        // expect(instance.taxes).to.be(expectedValueLiteral);
      });

      it('should have the property vendorId (base name: "vendor_id")', function() {
        // TODO: update the code to test the property vendorId
        expect(instance).to.have.property('vendorId');
        // expect(instance.vendorId).to.be(expectedValueLiteral);
      });

      it('should have the property totalMaterialCosts (base name: "total_material_costs")', function() {
        // TODO: update the code to test the property totalMaterialCosts
        expect(instance).to.have.property('totalMaterialCosts');
        // expect(instance.totalMaterialCosts).to.be(expectedValueLiteral);
      });

      it('should have the property totalInternalLaborCosts (base name: "total_internal_labor_costs")', function() {
        // TODO: update the code to test the property totalInternalLaborCosts
        expect(instance).to.have.property('totalInternalLaborCosts');
        // expect(instance.totalInternalLaborCosts).to.be(expectedValueLiteral);
      });

      it('should have the property totalExternalLaborCosts (base name: "total_external_labor_costs")', function() {
        // TODO: update the code to test the property totalExternalLaborCosts
        expect(instance).to.have.property('totalExternalLaborCosts');
        // expect(instance.totalExternalLaborCosts).to.be(expectedValueLiteral);
      });

      it('should have the property totalInternalLaborTime (base name: "total_internal_labor_time")', function() {
        // TODO: update the code to test the property totalInternalLaborTime
        expect(instance).to.have.property('totalInternalLaborTime');
        // expect(instance.totalInternalLaborTime).to.be(expectedValueLiteral);
      });

      it('should have the property totalExternalLaborTime (base name: "total_external_labor_time")', function() {
        // TODO: update the code to test the property totalExternalLaborTime
        expect(instance).to.have.property('totalExternalLaborTime');
        // expect(instance.totalExternalLaborTime).to.be(expectedValueLiteral);
      });

      it('should have the property totalDuration (base name: "total_duration")', function() {
        // TODO: update the code to test the property totalDuration
        expect(instance).to.have.property('totalDuration');
        // expect(instance.totalDuration).to.be(expectedValueLiteral);
      });

      it('should have the property jobId (base name: "job_id")', function() {
        // TODO: update the code to test the property jobId
        expect(instance).to.have.property('jobId');
        // expect(instance.jobId).to.be(expectedValueLiteral);
      });

    });
  });

}));
