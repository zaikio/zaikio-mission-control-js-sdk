/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The Order model module.
 * @module model/Order
 * @version 1.0.0
 */
export class Order {
  /**
   * Constructs a new <code>Order</code>.
   * @alias module:model/Order
   * @class
   * @param id {String} 
   * @param createdAt {Date} 
   * @param updatedAt {Date} 
   * @param references {Array.<String>} The the first reference of this order is generated by the system that created it. The references are supposed to be used in customer/human related communication. It is not a technical ID.
   * @param state {module:model/Order.StateEnum} The current state of the Order
   * @param currency {module:model/Order.CurrencyEnum} The currency used for all monetary information of this order, including all line items. Currencies cannot be mixed within the same order.
   * @param netTotal {Number} The total net worth (that is without taxes) of the order in the smallest unit of `currency`. For USD/EUR this would be cents, for GPB pence, etc.
   * @param grossTotal {Number} The total gross worth (that is with taxes) of the order in the smallest unit of `currency`. For USD/EUR this would be cents, for GPB pence, etc.
   * @param taxes {Number} The total amount of taxes of the order in the smallest unit of `currency`. For USD/EUR this would be cents, for GPB pence, etc.
   * @param confirmedAt {Date} The date at which this order was confirmed to be produced. When this date is set, the order `state` will be set to confirmed and no modifications of this order will be possible.
   * @param canceledAt {Date} The date at which this order was canceled. Only orders that were previously confirmed might be canceled. When this date is set, the order `state` will equal `canceled`.
   * @param fulfilledAt {Date} The date at which this order was complelty fulfilled. Fulfillment is assumed as soon as all production and logistics work is completed and the order is on it's way to the customer. When this date is set, the order `state` will equal `fulfilled`.
   */
  constructor(id, createdAt, updatedAt, references, state, currency, netTotal, grossTotal, taxes, confirmedAt, canceledAt, fulfilledAt) {
    this.id = id;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.references = references;
    this.state = state;
    this.currency = currency;
    this.netTotal = netTotal;
    this.grossTotal = grossTotal;
    this.taxes = taxes;
    this.confirmedAt = confirmedAt;
    this.canceledAt = canceledAt;
    this.fulfilledAt = fulfilledAt;
  }

  /**
   * Constructs a <code>Order</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Order} obj Optional instance to populate.
   * @return {module:model/Order} The populated <code>Order</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Order();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('created_at'))
        obj.createdAt = ApiClient.convertToType(data['created_at'], 'Date');
      if (data.hasOwnProperty('updated_at'))
        obj.updatedAt = ApiClient.convertToType(data['updated_at'], 'Date');
      if (data.hasOwnProperty('references'))
        obj.references = ApiClient.convertToType(data['references'], ['String']);
      if (data.hasOwnProperty('state'))
        obj.state = ApiClient.convertToType(data['state'], 'String');
      if (data.hasOwnProperty('currency'))
        obj.currency = ApiClient.convertToType(data['currency'], 'String');
      if (data.hasOwnProperty('net_total'))
        obj.netTotal = ApiClient.convertToType(data['net_total'], 'Number');
      if (data.hasOwnProperty('gross_total'))
        obj.grossTotal = ApiClient.convertToType(data['gross_total'], 'Number');
      if (data.hasOwnProperty('taxes'))
        obj.taxes = ApiClient.convertToType(data['taxes'], 'Number');
      if (data.hasOwnProperty('confirmed_at'))
        obj.confirmedAt = ApiClient.convertToType(data['confirmed_at'], 'Date');
      if (data.hasOwnProperty('canceled_at'))
        obj.canceledAt = ApiClient.convertToType(data['canceled_at'], 'Date');
      if (data.hasOwnProperty('fulfilled_at'))
        obj.fulfilledAt = ApiClient.convertToType(data['fulfilled_at'], 'Date');
    }
    return obj;
  }
}

/**
 * @member {String} id
 */
Order.prototype.id = undefined;

/**
 * @member {Date} createdAt
 */
Order.prototype.createdAt = undefined;

/**
 * @member {Date} updatedAt
 */
Order.prototype.updatedAt = undefined;

/**
 * The the first reference of this order is generated by the system that created it. The references are supposed to be used in customer/human related communication. It is not a technical ID.
 * @member {Array.<String>} references
 */
Order.prototype.references = undefined;

/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Order.StateEnum = {
  /**
   * value: "draft"
   * @const
   */
  draft: "draft",

  /**
   * value: "confirmed"
   * @const
   */
  confirmed: "confirmed",

  /**
   * value: "fulfilled"
   * @const
   */
  fulfilled: "fulfilled",

  /**
   * value: "canceled"
   * @const
   */
  canceled: "canceled"
};
/**
 * The current state of the Order
 * @member {module:model/Order.StateEnum} state
 */
Order.prototype.state = undefined;

/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
Order.CurrencyEnum = {
  /**
   * value: "USD"
   * @const
   */
  USD: "USD",

  /**
   * value: "EUR"
   * @const
   */
  EUR: "EUR",

  /**
   * value: "GBP"
   * @const
   */
  GBP: "GBP"
};
/**
 * The currency used for all monetary information of this order, including all line items. Currencies cannot be mixed within the same order.
 * @member {module:model/Order.CurrencyEnum} currency
 */
Order.prototype.currency = undefined;

/**
 * The total net worth (that is without taxes) of the order in the smallest unit of `currency`. For USD/EUR this would be cents, for GPB pence, etc.
 * @member {Number} netTotal
 */
Order.prototype.netTotal = undefined;

/**
 * The total gross worth (that is with taxes) of the order in the smallest unit of `currency`. For USD/EUR this would be cents, for GPB pence, etc.
 * @member {Number} grossTotal
 */
Order.prototype.grossTotal = undefined;

/**
 * The total amount of taxes of the order in the smallest unit of `currency`. For USD/EUR this would be cents, for GPB pence, etc.
 * @member {Number} taxes
 */
Order.prototype.taxes = undefined;

/**
 * The date at which this order was confirmed to be produced. When this date is set, the order `state` will be set to confirmed and no modifications of this order will be possible.
 * @member {Date} confirmedAt
 */
Order.prototype.confirmedAt = undefined;

/**
 * The date at which this order was canceled. Only orders that were previously confirmed might be canceled. When this date is set, the order `state` will equal `canceled`.
 * @member {Date} canceledAt
 */
Order.prototype.canceledAt = undefined;

/**
 * The date at which this order was complelty fulfilled. Fulfillment is assumed as soon as all production and logistics work is completed and the order is on it's way to the customer. When this date is set, the order `state` will equal `fulfilled`.
 * @member {Date} fulfilledAt
 */
Order.prototype.fulfilledAt = undefined;

