/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The CommissioningUpdate model module.
 * @module model/CommissioningUpdate
 * @version 1.0.0
 */
export class CommissioningUpdate {
  /**
   * Constructs a new <code>CommissioningUpdate</code>.
   * @alias module:model/CommissioningUpdate
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>CommissioningUpdate</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CommissioningUpdate} obj Optional instance to populate.
   * @return {module:model/CommissioningUpdate} The populated <code>CommissioningUpdate</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new CommissioningUpdate();
      if (data.hasOwnProperty('references'))
        obj.references = ApiClient.convertToType(data['references'], ['String']);
      if (data.hasOwnProperty('state'))
        obj.state = ApiClient.convertToType(data['state'], 'String');
      if (data.hasOwnProperty('costs'))
        obj.costs = ApiClient.convertToType(data['costs'], 'Number');
      if (data.hasOwnProperty('canceled_at'))
        obj.canceledAt = ApiClient.convertToType(data['canceled_at'], 'Date');
    }
    return obj;
  }
}

/**
 * The the first reference of this commissioning is generated by the system that created it. The references are supposed to be used in customer/human related communication. It is not a technical ID.
 * @member {Array.<String>} references
 */
CommissioningUpdate.prototype.references = undefined;

/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
CommissioningUpdate.StateEnum = {
  /**
   * value: "draft"
   * @const
   */
  draft: "draft",

  /**
   * value: "picking"
   * @const
   */
  picking: "picking",

  /**
   * value: "completed"
   * @const
   */
  completed: "completed",

  /**
   * value: "canceled"
   * @const
   */
  canceled: "canceled"
};
/**
 * The current state of this Commissioning
 * @member {module:model/CommissioningUpdate.StateEnum} state
 */
CommissioningUpdate.prototype.state = undefined;

/**
 * The total costs (that is without taxes) of the commissioning in the smallest unit of `currency`. For USD/EUR this would be cents, for GPB pence, etc.
 * @member {Number} costs
 */
CommissioningUpdate.prototype.costs = undefined;

/**
 * The date at which this commissioning was canceled. Only commissionings that were previously completed might be canceled. When this date is set, the commissioning `state` will equal `canceled`.
 * @member {Date} canceledAt
 */
CommissioningUpdate.prototype.canceledAt = undefined;

