/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The DesiredSubstrate model module.
 * @module model/DesiredSubstrate
 * @version 1.0.0
 */
export class DesiredSubstrate {
  /**
   * Constructs a new <code>DesiredSubstrate</code>.
   * @alias module:model/DesiredSubstrate
   * @class
   * @param id {String} 
   * @param createdAt {Date} 
   * @param updatedAt {Date} 
   * @param uniqueMaterialIdentifier {String} The Zaikio unique material identifier that uniquely references a single substrate. If given, this indicates that the part must be printed on that substrate and the printer is not allowed so select a substitute. When left empty they printer may chose which ever substrate they see fit. When the unique identifier is given, all other properties must be left empty.
   * @param category {module:model/DesiredSubstrate.CategoryEnum} If given, the printer must use a substrate that matches this category. Can be combined (but does not have to be) with `coating` and `paper_weight` information.
   * @param paperWeight {Number} The weight of the paper that must be used by the printer. Can be combined with `coating` and `category` information. Depending on the `paper_weight_unit` this represents either a grammage or a US/Canada paper weight. If given, the `paper_weight_unit` must also be set.
   * @param paperWeightUnit {module:model/DesiredSubstrate.PaperWeightUnitEnum} When set to `gsm` the `paper_weight` property will be interpreted as grammage in accordance with ISO 536. When set to `lb` the `paper_weight` will be interpreted as an US/Canada paper weight in pounds in reference to the weight of a 500 sheet ream of the uncut substrate.
   * @param coating {Array.<Boolean>} When given, defines if the paper's surfaces must be coated or must not be coated. The first item in the array refers to the front side of the substrate, the last item in the array refers to the back side of the substrate.
   * @param grain {module:model/DesiredSubstrate.GrainEnum} When given, defines the required grain direction of the substrate that is to be used.
   */
  constructor(id, createdAt, updatedAt, uniqueMaterialIdentifier, category, paperWeight, paperWeightUnit, coating, grain) {
    this.id = id;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.uniqueMaterialIdentifier = uniqueMaterialIdentifier;
    this.category = category;
    this.paperWeight = paperWeight;
    this.paperWeightUnit = paperWeightUnit;
    this.coating = coating;
    this.grain = grain;
  }

  /**
   * Constructs a <code>DesiredSubstrate</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DesiredSubstrate} obj Optional instance to populate.
   * @return {module:model/DesiredSubstrate} The populated <code>DesiredSubstrate</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new DesiredSubstrate();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('created_at'))
        obj.createdAt = ApiClient.convertToType(data['created_at'], 'Date');
      if (data.hasOwnProperty('updated_at'))
        obj.updatedAt = ApiClient.convertToType(data['updated_at'], 'Date');
      if (data.hasOwnProperty('unique_material_identifier'))
        obj.uniqueMaterialIdentifier = ApiClient.convertToType(data['unique_material_identifier'], 'String');
      if (data.hasOwnProperty('category'))
        obj.category = ApiClient.convertToType(data['category'], 'String');
      if (data.hasOwnProperty('paper_weight'))
        obj.paperWeight = ApiClient.convertToType(data['paper_weight'], 'Number');
      if (data.hasOwnProperty('paper_weight_unit'))
        obj.paperWeightUnit = ApiClient.convertToType(data['paper_weight_unit'], 'String');
      if (data.hasOwnProperty('coating'))
        obj.coating = ApiClient.convertToType(data['coating'], ['Boolean']);
      if (data.hasOwnProperty('grain'))
        obj.grain = ApiClient.convertToType(data['grain'], 'String');
    }
    return obj;
  }
}

/**
 * @member {String} id
 */
DesiredSubstrate.prototype.id = undefined;

/**
 * @member {Date} createdAt
 */
DesiredSubstrate.prototype.createdAt = undefined;

/**
 * @member {Date} updatedAt
 */
DesiredSubstrate.prototype.updatedAt = undefined;

/**
 * The Zaikio unique material identifier that uniquely references a single substrate. If given, this indicates that the part must be printed on that substrate and the printer is not allowed so select a substitute. When left empty they printer may chose which ever substrate they see fit. When the unique identifier is given, all other properties must be left empty.
 * @member {String} uniqueMaterialIdentifier
 */
DesiredSubstrate.prototype.uniqueMaterialIdentifier = undefined;

/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
DesiredSubstrate.CategoryEnum = {
  /**
   * value: "coated"
   * @const
   */
  coated: "coated",

  /**
   * value: "coated_glossy"
   * @const
   */
  coatedGlossy: "coated_glossy",

  /**
   * value: "coated_matte"
   * @const
   */
  coatedMatte: "coated_matte",

  /**
   * value: "uncoated"
   * @const
   */
  uncoated: "uncoated",

  /**
   * value: "wood_free_uncoated"
   * @const
   */
  woodFreeUncoated: "wood_free_uncoated"
};
/**
 * If given, the printer must use a substrate that matches this category. Can be combined (but does not have to be) with `coating` and `paper_weight` information.
 * @member {module:model/DesiredSubstrate.CategoryEnum} category
 */
DesiredSubstrate.prototype.category = undefined;

/**
 * The weight of the paper that must be used by the printer. Can be combined with `coating` and `category` information. Depending on the `paper_weight_unit` this represents either a grammage or a US/Canada paper weight. If given, the `paper_weight_unit` must also be set.
 * @member {Number} paperWeight
 */
DesiredSubstrate.prototype.paperWeight = undefined;

/**
 * Allowed values for the <code>paperWeightUnit</code> property.
 * @enum {String}
 * @readonly
 */
DesiredSubstrate.PaperWeightUnitEnum = {
  /**
   * value: "gsm"
   * @const
   */
  gsm: "gsm",

  /**
   * value: "lbs"
   * @const
   */
  lbs: "lbs"
};
/**
 * When set to `gsm` the `paper_weight` property will be interpreted as grammage in accordance with ISO 536. When set to `lb` the `paper_weight` will be interpreted as an US/Canada paper weight in pounds in reference to the weight of a 500 sheet ream of the uncut substrate.
 * @member {module:model/DesiredSubstrate.PaperWeightUnitEnum} paperWeightUnit
 */
DesiredSubstrate.prototype.paperWeightUnit = undefined;

/**
 * When given, defines if the paper's surfaces must be coated or must not be coated. The first item in the array refers to the front side of the substrate, the last item in the array refers to the back side of the substrate.
 * @member {Array.<Boolean>} coating
 */
DesiredSubstrate.prototype.coating = undefined;

/**
 * Allowed values for the <code>grain</code> property.
 * @enum {String}
 * @readonly
 */
DesiredSubstrate.GrainEnum = {
  /**
   * value: "short"
   * @const
   */
  _short: "short",

  /**
   * value: "long"
   * @const
   */
  _long: "long"
};
/**
 * When given, defines the required grain direction of the substrate that is to be used.
 * @member {module:model/DesiredSubstrate.GrainEnum} grain
 */
DesiredSubstrate.prototype.grain = undefined;

