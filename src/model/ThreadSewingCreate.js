/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {FileReferenceCreate} from './FileReferenceCreate';

/**
 * The ThreadSewingCreate model module.
 * @module model/ThreadSewingCreate
 * @version 1.0.0
 */
export class ThreadSewingCreate {
  /**
   * Constructs a new <code>ThreadSewingCreate</code>.
   * @alias module:model/ThreadSewingCreate
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>ThreadSewingCreate</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ThreadSewingCreate} obj Optional instance to populate.
   * @return {module:model/ThreadSewingCreate} The populated <code>ThreadSewingCreate</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ThreadSewingCreate();
      if (data.hasOwnProperty('file_references'))
        obj.fileReferences = ApiClient.convertToType(data['file_references'], [FileReferenceCreate]);
      if (data.hasOwnProperty('kind'))
        obj.kind = ApiClient.convertToType(data['kind'], 'String');
      if (data.hasOwnProperty('pattern'))
        obj.pattern = ApiClient.convertToType(data['pattern'], 'String');
      if (data.hasOwnProperty('blind_stitch'))
        obj.blindStitch = ApiClient.convertToType(data['blind_stitch'], 'Boolean');
      if (data.hasOwnProperty('thread_thickness'))
        obj.threadThickness = ApiClient.convertToType(data['thread_thickness'], 'String');
      if (data.hasOwnProperty('dimensions_unit'))
        obj.dimensionsUnit = ApiClient.convertToType(data['dimensions_unit'], 'String');
    }
    return obj;
  }
}

/**
 * @member {Array.<module:model/FileReferenceCreate>} fileReferences
 */
ThreadSewingCreate.prototype.fileReferences = undefined;

/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
ThreadSewingCreate.KindEnum = {
  /**
   * value: "thread_sewing"
   * @const
   */
  threadSewing: "thread_sewing"
};
/**
 * The kind of the finishing. Thread sewing is a process where a thread and a needle is used to sew together several parts of a print job. It is most commonly used to combine the different signatures of the content of books.
 * @member {module:model/ThreadSewingCreate.KindEnum} kind
 */
ThreadSewingCreate.prototype.kind = undefined;

/**
 * Allowed values for the <code>pattern</code> property.
 * @enum {String}
 * @readonly
 */
ThreadSewingCreate.PatternEnum = {
  /**
   * value: "combined_staggered"
   * @const
   */
  combinedStaggered: "combined_staggered",

  /**
   * value: "normal"
   * @const
   */
  normal: "normal",

  /**
   * value: "side"
   * @const
   */
  side: "side",

  /**
   * value: "staggered"
   * @const
   */
  staggered: "staggered"
};
/**
 * The sewing pattern that should be used to create the seam. The default is `normal`.
 * @member {module:model/ThreadSewingCreate.PatternEnum} pattern
 */
ThreadSewingCreate.prototype.pattern = undefined;

/**
 * Whether or not to perform a blind stitch at the end of the seam line
 * @member {Boolean} blindStitch
 */
ThreadSewingCreate.prototype.blindStitch = undefined;

/**
 * The thickness of the string that should be used for this seam. Given in the unit specified in `dimensions_unit`.
 * @member {String} threadThickness
 */
ThreadSewingCreate.prototype.threadThickness = undefined;

/**
 * Allowed values for the <code>dimensionsUnit</code> property.
 * @enum {String}
 * @readonly
 */
ThreadSewingCreate.DimensionsUnitEnum = {
  /**
   * value: "cm"
   * @const
   */
  cm: "cm",

  /**
   * value: "foot"
   * @const
   */
  foot: "foot",

  /**
   * value: "inch"
   * @const
   */
  inch: "inch",

  /**
   * value: "m"
   * @const
   */
  m: "m",

  /**
   * value: "mm"
   * @const
   */
  mm: "mm",

  /**
   * value: "pica"
   * @const
   */
  pica: "pica",

  /**
   * value: "point"
   * @const
   */
  point: "point"
};
/**
 * The unit for the dimensions given in `diameter`. Must be set if `diameter` is set.
 * @member {module:model/ThreadSewingCreate.DimensionsUnitEnum} dimensionsUnit
 */
ThreadSewingCreate.prototype.dimensionsUnit = undefined;

// Implement FinishingCreate interface:
