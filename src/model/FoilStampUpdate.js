/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {FileReferenceUpdate} from './FileReferenceUpdate';

/**
 * The FoilStampUpdate model module.
 * @module model/FoilStampUpdate
 * @version 1.0.0
 */
export class FoilStampUpdate {
  /**
   * Constructs a new <code>FoilStampUpdate</code>.
   * @alias module:model/FoilStampUpdate
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>FoilStampUpdate</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FoilStampUpdate} obj Optional instance to populate.
   * @return {module:model/FoilStampUpdate} The populated <code>FoilStampUpdate</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new FoilStampUpdate();
      if (data.hasOwnProperty('file_references'))
        obj.fileReferences = ApiClient.convertToType(data['file_references'], [FileReferenceUpdate]);
      if (data.hasOwnProperty('kind'))
        obj.kind = ApiClient.convertToType(data['kind'], 'String');
      if (data.hasOwnProperty('direction'))
        obj.direction = ApiClient.convertToType(data['direction'], 'String');
      if (data.hasOwnProperty('color'))
        obj.color = ApiClient.convertToType(data['color'], 'String');
    }
    return obj;
  }
}

/**
 * @member {Array.<module:model/FileReferenceUpdate>} fileReferences
 */
FoilStampUpdate.prototype.fileReferences = undefined;

/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
FoilStampUpdate.KindEnum = {
  /**
   * value: "foil_stamp"
   * @const
   */
  foilStamp: "foil_stamp"
};
/**
 * The kind of the finishing. Foil stamping means using a heated die to place a metallic or pigmented image from coated foil onto the substrate.
 * @member {module:model/FoilStampUpdate.KindEnum} kind
 */
FoilStampUpdate.prototype.kind = undefined;

/**
 * Allowed values for the <code>direction</code> property.
 * @enum {String}
 * @readonly
 */
FoilStampUpdate.DirectionEnum = {
  /**
   * value: "debossed"
   * @const
   */
  debossed: "debossed",

  /**
   * value: "embossed"
   * @const
   */
  embossed: "embossed",

  /**
   * value: "level"
   * @const
   */
  level: "level"
};
/**
 * The vertical direction in which the foil stamp will be applied. There are three possibilities for the application of the foil. The most common - and also the default value - is a level (or flat) application of the foil, which means there will be no tactially discernable step between the foil and the underlaying substrate. Another possibilty is to depress the foil into the underlaying substrate, so that a step downwards can be felt, in this case `debossed` must be selected. The third and last option is the foil raising above the underlaying substrate, so a step upwards can be felt between the foil and the substrate. In this case the direction `debossed` must be selected.
 * @member {module:model/FoilStampUpdate.DirectionEnum} direction
 */
FoilStampUpdate.prototype.direction = undefined;

/**
 * Allowed values for the <code>color</code> property.
 * @enum {String}
 * @readonly
 */
FoilStampUpdate.ColorEnum = {
  /**
   * value: "aliceblue"
   * @const
   */
  aliceblue: "aliceblue",

  /**
   * value: "antiquewhite"
   * @const
   */
  antiquewhite: "antiquewhite",

  /**
   * value: "aqua"
   * @const
   */
  aqua: "aqua",

  /**
   * value: "aquamarine"
   * @const
   */
  aquamarine: "aquamarine",

  /**
   * value: "azure"
   * @const
   */
  azure: "azure",

  /**
   * value: "beige"
   * @const
   */
  beige: "beige",

  /**
   * value: "bisque"
   * @const
   */
  bisque: "bisque",

  /**
   * value: "black"
   * @const
   */
  black: "black",

  /**
   * value: "blanchedalmond"
   * @const
   */
  blanchedalmond: "blanchedalmond",

  /**
   * value: "blue"
   * @const
   */
  blue: "blue",

  /**
   * value: "blueviolet"
   * @const
   */
  blueviolet: "blueviolet",

  /**
   * value: "brown"
   * @const
   */
  brown: "brown",

  /**
   * value: "burlywood"
   * @const
   */
  burlywood: "burlywood",

  /**
   * value: "cadetblue"
   * @const
   */
  cadetblue: "cadetblue",

  /**
   * value: "chartreuse"
   * @const
   */
  chartreuse: "chartreuse",

  /**
   * value: "chocolate"
   * @const
   */
  chocolate: "chocolate",

  /**
   * value: "coral"
   * @const
   */
  coral: "coral",

  /**
   * value: "cornflowerblue"
   * @const
   */
  cornflowerblue: "cornflowerblue",

  /**
   * value: "cornsilk"
   * @const
   */
  cornsilk: "cornsilk",

  /**
   * value: "crimson"
   * @const
   */
  crimson: "crimson",

  /**
   * value: "cyan"
   * @const
   */
  cyan: "cyan",

  /**
   * value: "darkblue"
   * @const
   */
  darkblue: "darkblue",

  /**
   * value: "darkcyan"
   * @const
   */
  darkcyan: "darkcyan",

  /**
   * value: "darkgoldenrod"
   * @const
   */
  darkgoldenrod: "darkgoldenrod",

  /**
   * value: "darkgray"
   * @const
   */
  darkgray: "darkgray",

  /**
   * value: "darkgreen"
   * @const
   */
  darkgreen: "darkgreen",

  /**
   * value: "darkgrey"
   * @const
   */
  darkgrey: "darkgrey",

  /**
   * value: "darkkhaki"
   * @const
   */
  darkkhaki: "darkkhaki",

  /**
   * value: "darkmagenta"
   * @const
   */
  darkmagenta: "darkmagenta",

  /**
   * value: "darkolivegreen"
   * @const
   */
  darkolivegreen: "darkolivegreen",

  /**
   * value: "darkorange"
   * @const
   */
  darkorange: "darkorange",

  /**
   * value: "darkorchid"
   * @const
   */
  darkorchid: "darkorchid",

  /**
   * value: "darkred"
   * @const
   */
  darkred: "darkred",

  /**
   * value: "darksalmon"
   * @const
   */
  darksalmon: "darksalmon",

  /**
   * value: "darkseagreen"
   * @const
   */
  darkseagreen: "darkseagreen",

  /**
   * value: "darkslateblue"
   * @const
   */
  darkslateblue: "darkslateblue",

  /**
   * value: "darkslategray"
   * @const
   */
  darkslategray: "darkslategray",

  /**
   * value: "darkslategrey"
   * @const
   */
  darkslategrey: "darkslategrey",

  /**
   * value: "darkturquoise"
   * @const
   */
  darkturquoise: "darkturquoise",

  /**
   * value: "darkviolet"
   * @const
   */
  darkviolet: "darkviolet",

  /**
   * value: "deeppink"
   * @const
   */
  deeppink: "deeppink",

  /**
   * value: "deepskyblue"
   * @const
   */
  deepskyblue: "deepskyblue",

  /**
   * value: "dimgray"
   * @const
   */
  dimgray: "dimgray",

  /**
   * value: "dimgrey"
   * @const
   */
  dimgrey: "dimgrey",

  /**
   * value: "dodgerblue"
   * @const
   */
  dodgerblue: "dodgerblue",

  /**
   * value: "firebrick"
   * @const
   */
  firebrick: "firebrick",

  /**
   * value: "floralwhite"
   * @const
   */
  floralwhite: "floralwhite",

  /**
   * value: "forestgreen"
   * @const
   */
  forestgreen: "forestgreen",

  /**
   * value: "fuchsia"
   * @const
   */
  fuchsia: "fuchsia",

  /**
   * value: "gainsboro"
   * @const
   */
  gainsboro: "gainsboro",

  /**
   * value: "ghostwhite"
   * @const
   */
  ghostwhite: "ghostwhite",

  /**
   * value: "goldenrod"
   * @const
   */
  goldenrod: "goldenrod",

  /**
   * value: "gold"
   * @const
   */
  gold: "gold",

  /**
   * value: "gray"
   * @const
   */
  gray: "gray",

  /**
   * value: "green"
   * @const
   */
  green: "green",

  /**
   * value: "greenyellow"
   * @const
   */
  greenyellow: "greenyellow",

  /**
   * value: "grey"
   * @const
   */
  grey: "grey",

  /**
   * value: "honeydew"
   * @const
   */
  honeydew: "honeydew",

  /**
   * value: "hotpink"
   * @const
   */
  hotpink: "hotpink",

  /**
   * value: "indianred"
   * @const
   */
  indianred: "indianred",

  /**
   * value: "indigo"
   * @const
   */
  indigo: "indigo",

  /**
   * value: "ivory"
   * @const
   */
  ivory: "ivory",

  /**
   * value: "khaki"
   * @const
   */
  khaki: "khaki",

  /**
   * value: "lavenderblush"
   * @const
   */
  lavenderblush: "lavenderblush",

  /**
   * value: "lavender"
   * @const
   */
  lavender: "lavender",

  /**
   * value: "lawngreen"
   * @const
   */
  lawngreen: "lawngreen",

  /**
   * value: "lemonchiffon"
   * @const
   */
  lemonchiffon: "lemonchiffon",

  /**
   * value: "lightblue"
   * @const
   */
  lightblue: "lightblue",

  /**
   * value: "lightcoral"
   * @const
   */
  lightcoral: "lightcoral",

  /**
   * value: "lightcyan"
   * @const
   */
  lightcyan: "lightcyan",

  /**
   * value: "lightgoldenrodyellow"
   * @const
   */
  lightgoldenrodyellow: "lightgoldenrodyellow",

  /**
   * value: "lightgray"
   * @const
   */
  lightgray: "lightgray",

  /**
   * value: "lightgreen"
   * @const
   */
  lightgreen: "lightgreen",

  /**
   * value: "lightgrey"
   * @const
   */
  lightgrey: "lightgrey",

  /**
   * value: "lightpink"
   * @const
   */
  lightpink: "lightpink",

  /**
   * value: "lightsalmon"
   * @const
   */
  lightsalmon: "lightsalmon",

  /**
   * value: "lightseagreen"
   * @const
   */
  lightseagreen: "lightseagreen",

  /**
   * value: "lightskyblue"
   * @const
   */
  lightskyblue: "lightskyblue",

  /**
   * value: "lightslategray"
   * @const
   */
  lightslategray: "lightslategray",

  /**
   * value: "lightslategrey"
   * @const
   */
  lightslategrey: "lightslategrey",

  /**
   * value: "lightsteelblue"
   * @const
   */
  lightsteelblue: "lightsteelblue",

  /**
   * value: "lightyellow"
   * @const
   */
  lightyellow: "lightyellow",

  /**
   * value: "lime"
   * @const
   */
  lime: "lime",

  /**
   * value: "limegreen"
   * @const
   */
  limegreen: "limegreen",

  /**
   * value: "linen"
   * @const
   */
  linen: "linen",

  /**
   * value: "magenta"
   * @const
   */
  magenta: "magenta",

  /**
   * value: "maroon"
   * @const
   */
  maroon: "maroon",

  /**
   * value: "mediumaquamarine"
   * @const
   */
  mediumaquamarine: "mediumaquamarine",

  /**
   * value: "mediumblue"
   * @const
   */
  mediumblue: "mediumblue",

  /**
   * value: "mediumorchid"
   * @const
   */
  mediumorchid: "mediumorchid",

  /**
   * value: "mediumpurple"
   * @const
   */
  mediumpurple: "mediumpurple",

  /**
   * value: "mediumseagreen"
   * @const
   */
  mediumseagreen: "mediumseagreen",

  /**
   * value: "mediumslateblue"
   * @const
   */
  mediumslateblue: "mediumslateblue",

  /**
   * value: "mediumspringgreen"
   * @const
   */
  mediumspringgreen: "mediumspringgreen",

  /**
   * value: "mediumturquoise"
   * @const
   */
  mediumturquoise: "mediumturquoise",

  /**
   * value: "mediumvioletred"
   * @const
   */
  mediumvioletred: "mediumvioletred",

  /**
   * value: "midnightblue"
   * @const
   */
  midnightblue: "midnightblue",

  /**
   * value: "mintcream"
   * @const
   */
  mintcream: "mintcream",

  /**
   * value: "mistyrose"
   * @const
   */
  mistyrose: "mistyrose",

  /**
   * value: "moccasin"
   * @const
   */
  moccasin: "moccasin",

  /**
   * value: "navajowhite"
   * @const
   */
  navajowhite: "navajowhite",

  /**
   * value: "navy"
   * @const
   */
  navy: "navy",

  /**
   * value: "oldlace"
   * @const
   */
  oldlace: "oldlace",

  /**
   * value: "olive"
   * @const
   */
  olive: "olive",

  /**
   * value: "olivedrab"
   * @const
   */
  olivedrab: "olivedrab",

  /**
   * value: "orange"
   * @const
   */
  orange: "orange",

  /**
   * value: "orangered"
   * @const
   */
  orangered: "orangered",

  /**
   * value: "orchid"
   * @const
   */
  orchid: "orchid",

  /**
   * value: "palegoldenrod"
   * @const
   */
  palegoldenrod: "palegoldenrod",

  /**
   * value: "palegreen"
   * @const
   */
  palegreen: "palegreen",

  /**
   * value: "paleturquoise"
   * @const
   */
  paleturquoise: "paleturquoise",

  /**
   * value: "palevioletred"
   * @const
   */
  palevioletred: "palevioletred",

  /**
   * value: "papayawhip"
   * @const
   */
  papayawhip: "papayawhip",

  /**
   * value: "peachpuff"
   * @const
   */
  peachpuff: "peachpuff",

  /**
   * value: "peru"
   * @const
   */
  peru: "peru",

  /**
   * value: "pink"
   * @const
   */
  pink: "pink",

  /**
   * value: "plum"
   * @const
   */
  plum: "plum",

  /**
   * value: "powderblue"
   * @const
   */
  powderblue: "powderblue",

  /**
   * value: "purple"
   * @const
   */
  purple: "purple",

  /**
   * value: "rebeccapurple"
   * @const
   */
  rebeccapurple: "rebeccapurple",

  /**
   * value: "red"
   * @const
   */
  red: "red",

  /**
   * value: "rosybrown"
   * @const
   */
  rosybrown: "rosybrown",

  /**
   * value: "royalblue"
   * @const
   */
  royalblue: "royalblue",

  /**
   * value: "saddlebrown"
   * @const
   */
  saddlebrown: "saddlebrown",

  /**
   * value: "salmon"
   * @const
   */
  salmon: "salmon",

  /**
   * value: "sandybrown"
   * @const
   */
  sandybrown: "sandybrown",

  /**
   * value: "seagreen"
   * @const
   */
  seagreen: "seagreen",

  /**
   * value: "seashell"
   * @const
   */
  seashell: "seashell",

  /**
   * value: "sienna"
   * @const
   */
  sienna: "sienna",

  /**
   * value: "silver"
   * @const
   */
  silver: "silver",

  /**
   * value: "skyblue"
   * @const
   */
  skyblue: "skyblue",

  /**
   * value: "slateblue"
   * @const
   */
  slateblue: "slateblue",

  /**
   * value: "slategray"
   * @const
   */
  slategray: "slategray",

  /**
   * value: "slategrey"
   * @const
   */
  slategrey: "slategrey",

  /**
   * value: "snow"
   * @const
   */
  snow: "snow",

  /**
   * value: "springgreen"
   * @const
   */
  springgreen: "springgreen",

  /**
   * value: "steelblue"
   * @const
   */
  steelblue: "steelblue",

  /**
   * value: "tan"
   * @const
   */
  tan: "tan",

  /**
   * value: "teal"
   * @const
   */
  teal: "teal",

  /**
   * value: "thistle"
   * @const
   */
  thistle: "thistle",

  /**
   * value: "tomato"
   * @const
   */
  tomato: "tomato",

  /**
   * value: "turquoise"
   * @const
   */
  turquoise: "turquoise",

  /**
   * value: "violet"
   * @const
   */
  violet: "violet",

  /**
   * value: "wheat"
   * @const
   */
  wheat: "wheat",

  /**
   * value: "white"
   * @const
   */
  white: "white",

  /**
   * value: "whitesmoke"
   * @const
   */
  whitesmoke: "whitesmoke",

  /**
   * value: "yellow"
   * @const
   */
  yellow: "yellow",

  /**
   * value: "yellowgreen"
   * @const
   */
  yellowgreen: "yellowgreen",

  /**
   * value: "transparent"
   * @const
   */
  transparent: "transparent",

  /**
   * value: "other"
   * @const
   */
  other: "other"
};
/**
 * The colour of the stamping foil. This property is optional, if nothing is selected a color will be chosen during production. This will be most likley transparent, but this is not guaranteed. Since most laminations are supposed to present it is recommend that you set this attribute to `transparent` if you don't have any further information on it. If a colour is given here, this will be considered a customer requirement.
 * @member {module:model/FoilStampUpdate.ColorEnum} color
 */
FoilStampUpdate.prototype.color = undefined;

// Implement FinishingUpdate interface:
