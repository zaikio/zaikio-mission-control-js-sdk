/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {FileReferenceUpdate} from './FileReferenceUpdate';

/**
 * The SaddleStitchUpdate model module.
 * @module model/SaddleStitchUpdate
 * @version 1.0.0
 */
export class SaddleStitchUpdate {
  /**
   * Constructs a new <code>SaddleStitchUpdate</code>.
   * @alias module:model/SaddleStitchUpdate
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>SaddleStitchUpdate</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SaddleStitchUpdate} obj Optional instance to populate.
   * @return {module:model/SaddleStitchUpdate} The populated <code>SaddleStitchUpdate</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new SaddleStitchUpdate();
      if (data.hasOwnProperty('file_references'))
        obj.fileReferences = ApiClient.convertToType(data['file_references'], [FileReferenceUpdate]);
      if (data.hasOwnProperty('kind'))
        obj.kind = ApiClient.convertToType(data['kind'], 'String');
      if (data.hasOwnProperty('staple_shape'))
        obj.stapleShape = ApiClient.convertToType(data['staple_shape'], 'String');
      if (data.hasOwnProperty('staples'))
        obj.staples = ApiClient.convertToType(data['staples'], 'Number');
    }
    return obj;
  }
}

/**
 * @member {Array.<module:model/FileReferenceUpdate>} fileReferences
 */
SaddleStitchUpdate.prototype.fileReferences = undefined;

/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
SaddleStitchUpdate.KindEnum = {
  /**
   * value: "saddle_stitch"
   * @const
   */
  saddleStitch: "saddle_stitch"
};
/**
 * The kind of the finishing. A saddle stitch is a form of binding in which the center of the fold is placed across the saddle of the stitcher and then wire staples are driven through and clinched on the inside. 
 * @member {module:model/SaddleStitchUpdate.KindEnum} kind
 */
SaddleStitchUpdate.prototype.kind = undefined;

/**
 * Allowed values for the <code>stapleShape</code> property.
 * @enum {String}
 * @readonly
 */
SaddleStitchUpdate.StapleShapeEnum = {
  /**
   * value: "butted"
   * @const
   */
  butted: "butted",

  /**
   * value: "clinched_out"
   * @const
   */
  clinchedOut: "clinched_out",

  /**
   * value: "crown"
   * @const
   */
  crown: "crown",

  /**
   * value: "eyelet"
   * @const
   */
  eyelet: "eyelet",

  /**
   * value: "overlap"
   * @const
   */
  overlap: "overlap"
};
/**
 * The shape of the staples used for the stitch
 * @member {module:model/SaddleStitchUpdate.StapleShapeEnum} stapleShape
 */
SaddleStitchUpdate.prototype.stapleShape = undefined;

/**
 * The number of staples used for the entire stitch
 * @member {Number} staples
 */
SaddleStitchUpdate.prototype.staples = undefined;

// Implement FinishingUpdate interface:
