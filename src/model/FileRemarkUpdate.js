/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The FileRemarkUpdate model module.
 * @module model/FileRemarkUpdate
 * @version 1.0.0
 */
export class FileRemarkUpdate {
  /**
   * Constructs a new <code>FileRemarkUpdate</code>.
   * @alias module:model/FileRemarkUpdate
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>FileRemarkUpdate</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FileRemarkUpdate} obj Optional instance to populate.
   * @return {module:model/FileRemarkUpdate} The populated <code>FileRemarkUpdate</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new FileRemarkUpdate();
      if (data.hasOwnProperty('file_action_id'))
        obj.fileActionId = ApiClient.convertToType(data['file_action_id'], 'String');
      if (data.hasOwnProperty('severity'))
        obj.severity = ApiClient.convertToType(data['severity'], 'String');
      if (data.hasOwnProperty('kind'))
        obj.kind = ApiClient.convertToType(data['kind'], 'String');
      if (data.hasOwnProperty('message'))
        obj.message = ApiClient.convertToType(data['message'], 'String');
      if (data.hasOwnProperty('area'))
        obj.area = ApiClient.convertToType(data['area'], 'String');
      if (data.hasOwnProperty('repeats_in_area'))
        obj.repeatsInArea = ApiClient.convertToType(data['repeats_in_area'], 'Number');
    }
    return obj;
  }
}

/**
 * The UUID of the object this file remark is attached to
 * @member {String} fileActionId
 */
FileRemarkUpdate.prototype.fileActionId = undefined;

/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
FileRemarkUpdate.SeverityEnum = {
  /**
   * value: "error"
   * @const
   */
  error: "error",

  /**
   * value: "fix"
   * @const
   */
  fix: "fix",

  /**
   * value: "info"
   * @const
   */
  info: "info",

  /**
   * value: "warning"
   * @const
   */
  warning: "warning"
};
/**
 * The severity of this file remark
 * @member {module:model/FileRemarkUpdate.SeverityEnum} severity
 */
FileRemarkUpdate.prototype.severity = undefined;

/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
FileRemarkUpdate.KindEnum = {
  /**
   * value: "color_mismatch"
   * @const
   */
  colorMismatch: "color_mismatch",

  /**
   * value: "other"
   * @const
   */
  other: "other"
};
/**
 * The kind of this file remark
 * @member {module:model/FileRemarkUpdate.KindEnum} kind
 */
FileRemarkUpdate.prototype.kind = undefined;

/**
 * A detailed human-readable message for this file remark
 * @member {String} message
 */
FileRemarkUpdate.prototype.message = undefined;

/**
 * The area in the artwork where the file remark occurs, this can be either a page or box id
 * @member {String} area
 */
FileRemarkUpdate.prototype.area = undefined;

/**
 * The number of repeats for this file remark in the specified area
 * @member {Number} repeatsInArea
 */
FileRemarkUpdate.prototype.repeatsInArea = undefined;

