/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The Pickup model module.
 * @module model/Pickup
 * @version 1.0.0
 */
export class Pickup {
  /**
   * Constructs a new <code>Pickup</code>.
   * @alias module:model/Pickup
   * @class
   * @param id {String} 
   * @param createdAt {Date} 
   * @param updatedAt {Date} 
   * @param references {Array.<String>} The the first reference of this pickup is generated by the system that created it. The references are supposed to be used in customer/human related communication. It is not a technical ID.
   * @param state {module:model/Pickup.StateEnum} The current state of this pickup
   * @param pickUpAt {Date} The date on which this pickup is to take place.
   * @param pickedUpAt {Date} The date at which this commissioning was picked up. When this date is set, the commissioning `state` will equal `picked_up`.
   */
  constructor(id, createdAt, updatedAt, references, state, pickUpAt, pickedUpAt) {
    this.id = id;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.references = references;
    this.state = state;
    this.pickUpAt = pickUpAt;
    this.pickedUpAt = pickedUpAt;
  }

  /**
   * Constructs a <code>Pickup</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Pickup} obj Optional instance to populate.
   * @return {module:model/Pickup} The populated <code>Pickup</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Pickup();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('created_at'))
        obj.createdAt = ApiClient.convertToType(data['created_at'], 'Date');
      if (data.hasOwnProperty('updated_at'))
        obj.updatedAt = ApiClient.convertToType(data['updated_at'], 'Date');
      if (data.hasOwnProperty('references'))
        obj.references = ApiClient.convertToType(data['references'], ['String']);
      if (data.hasOwnProperty('state'))
        obj.state = ApiClient.convertToType(data['state'], 'String');
      if (data.hasOwnProperty('pick_up_at'))
        obj.pickUpAt = ApiClient.convertToType(data['pick_up_at'], 'Date');
      if (data.hasOwnProperty('picked_up_at'))
        obj.pickedUpAt = ApiClient.convertToType(data['picked_up_at'], 'Date');
    }
    return obj;
  }
}

/**
 * @member {String} id
 */
Pickup.prototype.id = undefined;

/**
 * @member {Date} createdAt
 */
Pickup.prototype.createdAt = undefined;

/**
 * @member {Date} updatedAt
 */
Pickup.prototype.updatedAt = undefined;

/**
 * The the first reference of this pickup is generated by the system that created it. The references are supposed to be used in customer/human related communication. It is not a technical ID.
 * @member {Array.<String>} references
 */
Pickup.prototype.references = undefined;

/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Pickup.StateEnum = {
  /**
   * value: "picked_up"
   * @const
   */
  pickedUp: "picked_up",

  /**
   * value: "waiting_for_commission"
   * @const
   */
  waitingForCommission: "waiting_for_commission"
};
/**
 * The current state of this pickup
 * @member {module:model/Pickup.StateEnum} state
 */
Pickup.prototype.state = undefined;

/**
 * The date on which this pickup is to take place.
 * @member {Date} pickUpAt
 */
Pickup.prototype.pickUpAt = undefined;

/**
 * The date at which this commissioning was picked up. When this date is set, the commissioning `state` will equal `picked_up`.
 * @member {Date} pickedUpAt
 */
Pickup.prototype.pickedUpAt = undefined;

