/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The BatchMember model module.
 * @module model/BatchMember
 * @version 1.0.0
 */
export class BatchMember {
  /**
   * Constructs a new <code>BatchMember</code>.
   * A BatchMember represents the status of a Signature within a Batch.
   * @alias module:model/BatchMember
   * @class
   * @param id {String} 
   * @param createdAt {Date} 
   * @param updatedAt {Date} 
   * @param batchId {String} 
   * @param signatureId {String} 
   * @param state {module:model/BatchMember.StateEnum} Some signatures that have been added to batches can be rejected by planning software due to a number of reasons - incompatible substrates,
   */
  constructor(id, createdAt, updatedAt, batchId, signatureId, state) {
    this.id = id;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.batchId = batchId;
    this.signatureId = signatureId;
    this.state = state;
  }

  /**
   * Constructs a <code>BatchMember</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BatchMember} obj Optional instance to populate.
   * @return {module:model/BatchMember} The populated <code>BatchMember</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new BatchMember();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('created_at'))
        obj.createdAt = ApiClient.convertToType(data['created_at'], 'Date');
      if (data.hasOwnProperty('updated_at'))
        obj.updatedAt = ApiClient.convertToType(data['updated_at'], 'Date');
      if (data.hasOwnProperty('batch_id'))
        obj.batchId = ApiClient.convertToType(data['batch_id'], 'String');
      if (data.hasOwnProperty('signature_id'))
        obj.signatureId = ApiClient.convertToType(data['signature_id'], 'String');
      if (data.hasOwnProperty('state'))
        obj.state = ApiClient.convertToType(data['state'], 'String');
    }
    return obj;
  }
}

/**
 * @member {String} id
 */
BatchMember.prototype.id = undefined;

/**
 * @member {Date} createdAt
 */
BatchMember.prototype.createdAt = undefined;

/**
 * @member {Date} updatedAt
 */
BatchMember.prototype.updatedAt = undefined;

/**
 * @member {String} batchId
 */
BatchMember.prototype.batchId = undefined;

/**
 * @member {String} signatureId
 */
BatchMember.prototype.signatureId = undefined;

/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
BatchMember.StateEnum = {
  /**
   * value: "pending"
   * @const
   */
  pending: "pending",

  /**
   * value: "included"
   * @const
   */
  included: "included",

  /**
   * value: "excluded"
   * @const
   */
  excluded: "excluded"
};
/**
 * Some signatures that have been added to batches can be rejected by planning software due to a number of reasons - incompatible substrates,
 * @member {module:model/BatchMember.StateEnum} state
 */
BatchMember.prototype.state = undefined;

