/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The BoxUpdate model module.
 * @module model/BoxUpdate
 * @version 1.0.0
 */
export class BoxUpdate {
  /**
   * Constructs a new <code>BoxUpdate</code>.
   * @alias module:model/BoxUpdate
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>BoxUpdate</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BoxUpdate} obj Optional instance to populate.
   * @return {module:model/BoxUpdate} The populated <code>BoxUpdate</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new BoxUpdate();
      if (data.hasOwnProperty('children'))
        obj.children = ApiClient.convertToType(data['children'], [BoxUpdate]);
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('kind'))
        obj.kind = ApiClient.convertToType(data['kind'], 'String');
      if (data.hasOwnProperty('position'))
        obj.position = ApiClient.convertToType(data['position'], ['Number']);
      if (data.hasOwnProperty('dimensions'))
        obj.dimensions = ApiClient.convertToType(data['dimensions'], ['Number']);
      if (data.hasOwnProperty('bleeds'))
        obj.bleeds = ApiClient.convertToType(data['bleeds'], ['Number']);
      if (data.hasOwnProperty('print_free_margins'))
        obj.printFreeMargins = ApiClient.convertToType(data['print_free_margins'], ['Number']);
      if (data.hasOwnProperty('page_numbers'))
        obj.pageNumbers = ApiClient.convertToType(data['page_numbers'], ['Number']);
      if (data.hasOwnProperty('reference'))
        obj.reference = ApiClient.convertToType(data['reference'], 'String');
    }
    return obj;
  }
}

/**
 * @member {Array.<module:model/BoxUpdate>} children
 */
BoxUpdate.prototype.children = undefined;

/**
 * @member {String} id
 */
BoxUpdate.prototype.id = undefined;

/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
BoxUpdate.KindEnum = {
  /**
   * value: "sheet"
   * @const
   */
  sheet: "sheet",

  /**
   * value: "roll_segment"
   * @const
   */
  rollSegment: "roll_segment",

  /**
   * value: "spread"
   * @const
   */
  spread: "spread",

  /**
   * value: "page"
   * @const
   */
  page: "page",

  /**
   * value: "fold"
   * @const
   */
  fold: "fold",

  /**
   * value: "finishing"
   * @const
   */
  finishing: "finishing",

  /**
   * value: "flap"
   * @const
   */
  flap: "flap",

  /**
   * value: "spine"
   * @const
   */
  spine: "spine",

  /**
   * value: "mark"
   * @const
   */
  mark: "mark"
};
/**
 * Describes the kind of this box
 * @member {module:model/BoxUpdate.KindEnum} kind
 */
BoxUpdate.prototype.kind = undefined;

/**
 * The position where the top left corner of this box is placed relative to the position of it's parent. The first coordinate describes distance from the `top`, the second coordinate describes the distance from the `left`. All measurements are given in the unit selected in the header.
 * @member {Array.<Number>} position
 */
BoxUpdate.prototype.position = undefined;

/**
 * The dimensions of the box given in the measurement unit selected in the header. The first array value represents the `length` of the box (x-axis), while the second array value represents the `height` (y-axis).
 * @member {Array.<Number>} dimensions
 */
BoxUpdate.prototype.dimensions = undefined;

/**
 * The size of the bleeds outside the box given in the measurement unit selected in the header. The array values represent the bleeds for the following sides of the box, in clockwise order from `top`, `right`, `bottom`, `left`. If there is no bleed for a side, the corresponding value must be 0.
 * @member {Array.<Number>} bleeds
 */
BoxUpdate.prototype.bleeds = undefined;

/**
 * The size of the print free area inside the boxen given in the measurement unit selected in the header. The array values represent the bleeds for the following parts of the box, in clockwise order from `top`, `right`, `bottom`, `left`. If there is no print free area for a side of the box, the corresponding value must be 0.
 * @member {Array.<Number>} printFreeMargins
 */
BoxUpdate.prototype.printFreeMargins = undefined;

/**
 * The page numbers that are represented by this box. The first element in the array corresponds to the page number of the facing side of the page, the second element in the array corresponds to the page number of the back side of the page.
 * @member {Array.<Number>} pageNumbers
 */
BoxUpdate.prototype.pageNumbers = undefined;

/**
 * @member {String} reference
 */
BoxUpdate.prototype.reference = undefined;

