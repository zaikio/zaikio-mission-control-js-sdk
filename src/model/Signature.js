/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The Signature model module.
 * @module model/Signature
 * @version 1.0.0
 */
export class Signature {
  /**
   * Constructs a new <code>Signature</code>.
   * @alias module:model/Signature
   * @class
   * @param id {String} 
   * @param createdAt {Date} 
   * @param updatedAt {Date} 
   * @param kind {module:model/Signature.KindEnum} A simple description of the contents of this signature
   * @param foldingLayout {String} A simple description of the folding sequence of this Signature. If a JDF fold pattern name is provided, the folding sequence will be automatically populated to suit.
   * @param foldingSequence {Array.<String>} The steps required to execute the fold of this signature.
   * @param pages {Array.<Number>} The list of pages contained within the signature, to be populated when the signature is of a multiple page type such as spread or fold.
   * @param layout {Object} The box-model of this signature
   */
  constructor(id, createdAt, updatedAt, kind, foldingLayout, foldingSequence, pages, layout) {
    this.id = id;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.kind = kind;
    this.foldingLayout = foldingLayout;
    this.foldingSequence = foldingSequence;
    this.pages = pages;
    this.layout = layout;
  }

  /**
   * Constructs a <code>Signature</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Signature} obj Optional instance to populate.
   * @return {module:model/Signature} The populated <code>Signature</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Signature();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('created_at'))
        obj.createdAt = ApiClient.convertToType(data['created_at'], 'Date');
      if (data.hasOwnProperty('updated_at'))
        obj.updatedAt = ApiClient.convertToType(data['updated_at'], 'Date');
      if (data.hasOwnProperty('kind'))
        obj.kind = ApiClient.convertToType(data['kind'], 'String');
      if (data.hasOwnProperty('folding_layout'))
        obj.foldingLayout = ApiClient.convertToType(data['folding_layout'], 'String');
      if (data.hasOwnProperty('folding_sequence'))
        obj.foldingSequence = ApiClient.convertToType(data['folding_sequence'], ['String']);
      if (data.hasOwnProperty('pages'))
        obj.pages = ApiClient.convertToType(data['pages'], ['Number']);
      if (data.hasOwnProperty('layout'))
        obj.layout = ApiClient.convertToType(data['layout'], Object);
    }
    return obj;
  }
}

/**
 * @member {String} id
 */
Signature.prototype.id = undefined;

/**
 * @member {Date} createdAt
 */
Signature.prototype.createdAt = undefined;

/**
 * @member {Date} updatedAt
 */
Signature.prototype.updatedAt = undefined;

/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
Signature.KindEnum = {
  /**
   * value: "sheet"
   * @const
   */
  sheet: "sheet",

  /**
   * value: "roll_segment"
   * @const
   */
  rollSegment: "roll_segment",

  /**
   * value: "page"
   * @const
   */
  page: "page",

  /**
   * value: "spread"
   * @const
   */
  spread: "spread",

  /**
   * value: "fold"
   * @const
   */
  fold: "fold",

  /**
   * value: "box"
   * @const
   */
  box: "box",

  /**
   * value: "carton"
   * @const
   */
  carton: "carton"
};
/**
 * A simple description of the contents of this signature
 * @member {module:model/Signature.KindEnum} kind
 */
Signature.prototype.kind = undefined;

/**
 * A simple description of the folding sequence of this Signature. If a JDF fold pattern name is provided, the folding sequence will be automatically populated to suit.
 * @member {String} foldingLayout
 */
Signature.prototype.foldingLayout = undefined;

/**
 * The steps required to execute the fold of this signature.
 * @member {Array.<String>} foldingSequence
 */
Signature.prototype.foldingSequence = undefined;

/**
 * The list of pages contained within the signature, to be populated when the signature is of a multiple page type such as spread or fold.
 * @member {Array.<Number>} pages
 */
Signature.prototype.pages = undefined;

/**
 * The box-model of this signature
 * @member {Object} layout
 */
Signature.prototype.layout = undefined;

