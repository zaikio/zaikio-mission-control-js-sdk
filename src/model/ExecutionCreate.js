/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The ExecutionCreate model module.
 * @module model/ExecutionCreate
 * @version 1.0.0
 */
export class ExecutionCreate {
  /**
   * Constructs a new <code>ExecutionCreate</code>.
   * @alias module:model/ExecutionCreate
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>ExecutionCreate</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ExecutionCreate} obj Optional instance to populate.
   * @return {module:model/ExecutionCreate} The populated <code>ExecutionCreate</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ExecutionCreate();
      if (data.hasOwnProperty('operator_id'))
        obj.operatorId = ApiClient.convertToType(data['operator_id'], 'String');
      if (data.hasOwnProperty('machine_id'))
        obj.machineId = ApiClient.convertToType(data['machine_id'], 'String');
      if (data.hasOwnProperty('workstep_id'))
        obj.workstepId = ApiClient.convertToType(data['workstep_id'], 'String');
      if (data.hasOwnProperty('quantity'))
        obj.quantity = ApiClient.convertToType(data['quantity'], 'Number');
      if (data.hasOwnProperty('waste'))
        obj.waste = ApiClient.convertToType(data['waste'], 'Number');
      if (data.hasOwnProperty('started_at'))
        obj.startedAt = ApiClient.convertToType(data['started_at'], 'Date');
      if (data.hasOwnProperty('ended_at'))
        obj.endedAt = ApiClient.convertToType(data['ended_at'], 'Date');
    }
    return obj;
  }
}

/**
 * The identifier of the human operator who was responsible for this operation
 * @member {String} operatorId
 */
ExecutionCreate.prototype.operatorId = undefined;

/**
 * The identifier of the machine that was operated
 * @member {String} machineId
 */
ExecutionCreate.prototype.machineId = undefined;

/**
 * The identifier of the workstep that this execution worked towards completing
 * @member {String} workstepId
 */
ExecutionCreate.prototype.workstepId = undefined;

/**
 * How many items have been produced
 * @member {Number} quantity
 */
ExecutionCreate.prototype.quantity = undefined;

/**
 * How many units of waste have been produced
 * @member {Number} waste
 */
ExecutionCreate.prototype.waste = undefined;

/**
 * When did production commence in this execution
 * @member {Date} startedAt
 */
ExecutionCreate.prototype.startedAt = undefined;

/**
 * When did production conclude in this execution
 * @member {Date} endedAt
 */
ExecutionCreate.prototype.endedAt = undefined;

