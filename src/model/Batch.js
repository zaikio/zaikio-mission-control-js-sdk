/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {BatchMember} from './BatchMember';

/**
 * The Batch model module.
 * @module model/Batch
 * @version 1.0.0
 */
export class Batch {
  /**
   * Constructs a new <code>Batch</code>.
   * A Batch is a container for grouping together the production of Parts with similar qualities, such as the substrate or finishings. A Batch can also be used to group together production of Parts from different Products entirely - this can also be known as a Gang.
   * @alias module:model/Batch
   * @class
   * @param id {String} 
   * @param createdAt {Date} 
   * @param updatedAt {Date} 
   * @param organizationId {String} 
   * @param permittedFinishings {Array.<module:model/Batch.PermittedFinishingsEnum>} A list of finishings that could be batched together here. If a finishing is not provided in this list then production planning/batching software will not attempt to optimize for those finishings of the batched parts. This does not mean that they cannot be produced as a batch, but the best outcomes should not be expected.
   * @param members {Array.<module:model/BatchMember>} 
   * @param batchSignature {Object} 
   */
  constructor(id, createdAt, updatedAt, organizationId, permittedFinishings, members, batchSignature) {
    this.id = id;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.organizationId = organizationId;
    this.permittedFinishings = permittedFinishings;
    this.members = members;
    this.batchSignature = batchSignature;
  }

  /**
   * Constructs a <code>Batch</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Batch} obj Optional instance to populate.
   * @return {module:model/Batch} The populated <code>Batch</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Batch();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('created_at'))
        obj.createdAt = ApiClient.convertToType(data['created_at'], 'Date');
      if (data.hasOwnProperty('updated_at'))
        obj.updatedAt = ApiClient.convertToType(data['updated_at'], 'Date');
      if (data.hasOwnProperty('organization_id'))
        obj.organizationId = ApiClient.convertToType(data['organization_id'], 'String');
      if (data.hasOwnProperty('permitted_finishings'))
        obj.permittedFinishings = ApiClient.convertToType(data['permitted_finishings'], ['String']);
      if (data.hasOwnProperty('members'))
        obj.members = ApiClient.convertToType(data['members'], [BatchMember]);
      if (data.hasOwnProperty('batch_signature'))
        obj.batchSignature = ApiClient.convertToType(data['batch_signature'], Object);
    }
    return obj;
  }
}

/**
 * @member {String} id
 */
Batch.prototype.id = undefined;

/**
 * @member {Date} createdAt
 */
Batch.prototype.createdAt = undefined;

/**
 * @member {Date} updatedAt
 */
Batch.prototype.updatedAt = undefined;

/**
 * @member {String} organizationId
 */
Batch.prototype.organizationId = undefined;

/**
 * Allowed values for the <code>permittedFinishings</code> property.
 * @enum {String}
 * @readonly
 */
Batch.PermittedFinishingsEnum = {
  /**
   * value: "comb_binding"
   * @const
   */
  combBinding: "comb_binding",

  /**
   * value: "embossing"
   * @const
   */
  embossing: "embossing",

  /**
   * value: "foil_stamp"
   * @const
   */
  foilStamp: "foil_stamp",

  /**
   * value: "glue"
   * @const
   */
  glue: "glue",

  /**
   * value: "head_band"
   * @const
   */
  headBand: "head_band",

  /**
   * value: "spiral_binding"
   * @const
   */
  spiralBinding: "spiral_binding",

  /**
   * value: "strip_binding"
   * @const
   */
  stripBinding: "strip_binding",

  /**
   * value: "engraving"
   * @const
   */
  engraving: "engraving",

  /**
   * value: "hole"
   * @const
   */
  hole: "hole",

  /**
   * value: "lamination"
   * @const
   */
  lamination: "lamination",

  /**
   * value: "perforation"
   * @const
   */
  perforation: "perforation",

  /**
   * value: "perfect_binding"
   * @const
   */
  perfectBinding: "perfect_binding",

  /**
   * value: "ring_binding"
   * @const
   */
  ringBinding: "ring_binding",

  /**
   * value: "saddle_stitch"
   * @const
   */
  saddleStitch: "saddle_stitch",

  /**
   * value: "thread_sewing"
   * @const
   */
  threadSewing: "thread_sewing"
};
/**
 * A list of finishings that could be batched together here. If a finishing is not provided in this list then production planning/batching software will not attempt to optimize for those finishings of the batched parts. This does not mean that they cannot be produced as a batch, but the best outcomes should not be expected.
 * @member {Array.<module:model/Batch.PermittedFinishingsEnum>} permittedFinishings
 */
Batch.prototype.permittedFinishings = undefined;

/**
 * @member {Array.<module:model/BatchMember>} members
 */
Batch.prototype.members = undefined;

/**
 * @member {Object} batchSignature
 */
Batch.prototype.batchSignature = undefined;

