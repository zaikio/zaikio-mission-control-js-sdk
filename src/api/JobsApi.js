/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Color} from '../model/Color';
import {ColorsColorIdBody} from '../model/ColorsColorIdBody';
import {DesiredSubstrate} from '../model/DesiredSubstrate';
import {ExtendedPart} from '../model/ExtendedPart';
import {FileAction} from '../model/FileAction';
import {FileActionIdFileRemarksBody} from '../model/FileActionIdFileRemarksBody';
import {FileActionsFileActionIdBody} from '../model/FileActionsFileActionIdBody';
import {FileReference} from '../model/FileReference';
import {FileReferenceIdFileActionsBody} from '../model/FileReferenceIdFileActionsBody';
import {FileRemark} from '../model/FileRemark';
import {FinishedProduct} from '../model/FinishedProduct';
import {Finishing} from '../model/Finishing';
import {FinishingApplication} from '../model/FinishingApplication';
import {FinishingIdFileReferencesBody} from '../model/FinishingIdFileReferencesBody';
import {FinishingIdFinishingApplicationsBody} from '../model/FinishingIdFinishingApplicationsBody';
import {FinishingsFinishingIdBody} from '../model/FinishingsFinishingIdBody';
import {InlineResponse200} from '../model/InlineResponse200';
import {InlineResponse400} from '../model/InlineResponse400';
import {InlineResponse401} from '../model/InlineResponse401';
import {Job} from '../model/Job';
import {JobIdFinishedProductBody} from '../model/JobIdFinishedProductBody';
import {JobIdFinishedProductBody1} from '../model/JobIdFinishedProductBody1';
import {JobIdMilestonesBody} from '../model/JobIdMilestonesBody';
import {JobIdPackagingsBody} from '../model/JobIdPackagingsBody';
import {JobIdPartsBody} from '../model/JobIdPartsBody';
import {JobIdStateTransitionsBody} from '../model/JobIdStateTransitionsBody';
import {JobStateTransition} from '../model/JobStateTransition';
import {JobsBody} from '../model/JobsBody';
import {JobsJobIdBody} from '../model/JobsJobIdBody';
import {Milestone} from '../model/Milestone';
import {MilestonesMilestoneIdBody} from '../model/MilestonesMilestoneIdBody';
import {Packaging} from '../model/Packaging';
import {PackagingsPackagingIdBody} from '../model/PackagingsPackagingIdBody';
import {Part} from '../model/Part';
import {PartIdColorsBody} from '../model/PartIdColorsBody';
import {PartIdDesiredSubstrateBody} from '../model/PartIdDesiredSubstrateBody';
import {PartIdDesiredSubstrateBody1} from '../model/PartIdDesiredSubstrateBody1';
import {PartIdFileReferencesBody} from '../model/PartIdFileReferencesBody';
import {PartIdFinishingsBody} from '../model/PartIdFinishingsBody';
import {PartsPartIdBody} from '../model/PartsPartIdBody';

/**
* Jobs service.
* @module api/JobsApi
* @version 1.0.0
*/
export class JobsApi {

    /**
    * Constructs a new JobsApi. 
    * @alias module:api/JobsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Removes a file action. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} fileActionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    fileActionsFileActionIdDeleteWithHttpInfo(fileActionId) {
      
      let postBody = null;
      // verify the required parameter 'fileActionId' is set
      if (fileActionId === undefined || fileActionId === null) {
        throw new Error("Missing the required parameter 'fileActionId' when calling fileActionsFileActionIdDelete");
      }

      let pathParams = {
        'file_action_id': fileActionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/file_actions/{file_action_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a file action. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} fileActionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    fileActionsFileActionIdDelete(fileActionId) {
      return this.fileActionsFileActionIdDeleteWithHttpInfo(fileActionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all file remarks of a file action. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} fileActionId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FileRemark>} and HTTP response
     */
    fileActionsFileActionIdFileRemarksGetWithHttpInfo(fileActionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileActionId' is set
      if (fileActionId === undefined || fileActionId === null) {
        throw new Error("Missing the required parameter 'fileActionId' when calling fileActionsFileActionIdFileRemarksGet");
      }

      let pathParams = {
        'file_action_id': fileActionId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FileRemark];

      return this.apiClient.callApi(
        '/file_actions/{file_action_id}/file_remarks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all file remarks of a file action. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} fileActionId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FileRemark>}
     */
    fileActionsFileActionIdFileRemarksGet(fileActionId, opts) {
      return this.fileActionsFileActionIdFileRemarksGetWithHttpInfo(fileActionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a file remark. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/FileActionIdFileRemarksBody} body 
     * @param {String} fileActionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileRemark} and HTTP response
     */
    fileActionsFileActionIdFileRemarksPostWithHttpInfo(body, fileActionId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fileActionsFileActionIdFileRemarksPost");
      }
      // verify the required parameter 'fileActionId' is set
      if (fileActionId === undefined || fileActionId === null) {
        throw new Error("Missing the required parameter 'fileActionId' when calling fileActionsFileActionIdFileRemarksPost");
      }

      let pathParams = {
        'file_action_id': fileActionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileRemark;

      return this.apiClient.callApi(
        '/file_actions/{file_action_id}/file_remarks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a file remark. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} fileActionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileRemark}
     */
    fileActionsFileActionIdFileRemarksPost(body, fileActionId) {
      return this.fileActionsFileActionIdFileRemarksPostWithHttpInfo(body, fileActionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a specific file action. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} fileActionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileAction} and HTTP response
     */
    fileActionsFileActionIdGetWithHttpInfo(fileActionId) {
      
      let postBody = null;
      // verify the required parameter 'fileActionId' is set
      if (fileActionId === undefined || fileActionId === null) {
        throw new Error("Missing the required parameter 'fileActionId' when calling fileActionsFileActionIdGet");
      }

      let pathParams = {
        'file_action_id': fileActionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileAction;

      return this.apiClient.callApi(
        '/file_actions/{file_action_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a specific file action. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} fileActionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileAction}
     */
    fileActionsFileActionIdGet(fileActionId) {
      return this.fileActionsFileActionIdGetWithHttpInfo(fileActionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modifies file action. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/FileActionsFileActionIdBody} body 
     * @param {String} fileActionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileAction} and HTTP response
     */
    fileActionsFileActionIdPatchWithHttpInfo(body, fileActionId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fileActionsFileActionIdPatch");
      }
      // verify the required parameter 'fileActionId' is set
      if (fileActionId === undefined || fileActionId === null) {
        throw new Error("Missing the required parameter 'fileActionId' when calling fileActionsFileActionIdPatch");
      }

      let pathParams = {
        'file_action_id': fileActionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileAction;

      return this.apiClient.callApi(
        '/file_actions/{file_action_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modifies file action. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} fileActionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileAction}
     */
    fileActionsFileActionIdPatch(body, fileActionId) {
      return this.fileActionsFileActionIdPatchWithHttpInfo(body, fileActionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes the file reference from its referenceable, which is a part or a finishing. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} fileReferenceId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    fileReferencesFileReferenceIdDeleteWithHttpInfo(fileReferenceId) {
      
      let postBody = null;
      // verify the required parameter 'fileReferenceId' is set
      if (fileReferenceId === undefined || fileReferenceId === null) {
        throw new Error("Missing the required parameter 'fileReferenceId' when calling fileReferencesFileReferenceIdDelete");
      }

      let pathParams = {
        'file_reference_id': fileReferenceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/file_references/{file_reference_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes the file reference from its referenceable, which is a part or a finishing. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} fileReferenceId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    fileReferencesFileReferenceIdDelete(fileReferenceId) {
      return this.fileReferencesFileReferenceIdDeleteWithHttpInfo(fileReferenceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all file actions of a file reference. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} fileReferenceId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FileAction>} and HTTP response
     */
    fileReferencesFileReferenceIdFileActionsGetWithHttpInfo(fileReferenceId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileReferenceId' is set
      if (fileReferenceId === undefined || fileReferenceId === null) {
        throw new Error("Missing the required parameter 'fileReferenceId' when calling fileReferencesFileReferenceIdFileActionsGet");
      }

      let pathParams = {
        'file_reference_id': fileReferenceId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FileAction];

      return this.apiClient.callApi(
        '/file_references/{file_reference_id}/file_actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all file actions of a file reference. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} fileReferenceId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FileAction>}
     */
    fileReferencesFileReferenceIdFileActionsGet(fileReferenceId, opts) {
      return this.fileReferencesFileReferenceIdFileActionsGetWithHttpInfo(fileReferenceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a file action. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/FileReferenceIdFileActionsBody} body 
     * @param {String} fileReferenceId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileAction} and HTTP response
     */
    fileReferencesFileReferenceIdFileActionsPostWithHttpInfo(body, fileReferenceId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fileReferencesFileReferenceIdFileActionsPost");
      }
      // verify the required parameter 'fileReferenceId' is set
      if (fileReferenceId === undefined || fileReferenceId === null) {
        throw new Error("Missing the required parameter 'fileReferenceId' when calling fileReferencesFileReferenceIdFileActionsPost");
      }

      let pathParams = {
        'file_reference_id': fileReferenceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileAction;

      return this.apiClient.callApi(
        '/file_references/{file_reference_id}/file_actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a file action. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} fileReferenceId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileAction}
     */
    fileReferencesFileReferenceIdFileActionsPost(body, fileReferenceId) {
      return this.fileReferencesFileReferenceIdFileActionsPostWithHttpInfo(body, fileReferenceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a specific file reference. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} fileReferenceId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileReference} and HTTP response
     */
    fileReferencesFileReferenceIdGetWithHttpInfo(fileReferenceId) {
      
      let postBody = null;
      // verify the required parameter 'fileReferenceId' is set
      if (fileReferenceId === undefined || fileReferenceId === null) {
        throw new Error("Missing the required parameter 'fileReferenceId' when calling fileReferencesFileReferenceIdGet");
      }

      let pathParams = {
        'file_reference_id': fileReferenceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileReference;

      return this.apiClient.callApi(
        '/file_references/{file_reference_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a specific file reference. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} fileReferenceId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileReference}
     */
    fileReferencesFileReferenceIdGet(fileReferenceId) {
      return this.fileReferencesFileReferenceIdGetWithHttpInfo(fileReferenceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes the finishing from a part. The finishing itself is destroyed                         by this operation including all of it&#x27;s applications. If you only want to                         detach a finishing from one part please remove the finishing application                         for that part instead. Finishings can only be removed as long as the                         parent jobs is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} finishingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    finishingsFinishingIdDeleteWithHttpInfo(finishingId) {
      
      let postBody = null;
      // verify the required parameter 'finishingId' is set
      if (finishingId === undefined || finishingId === null) {
        throw new Error("Missing the required parameter 'finishingId' when calling finishingsFinishingIdDelete");
      }

      let pathParams = {
        'finishing_id': finishingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/finishings/{finishing_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes the finishing from a part. The finishing itself is destroyed                         by this operation including all of it&#x27;s applications. If you only want to                         detach a finishing from one part please remove the finishing application                         for that part instead. Finishings can only be removed as long as the                         parent jobs is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} finishingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    finishingsFinishingIdDelete(finishingId) {
      return this.finishingsFinishingIdDeleteWithHttpInfo(finishingId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns all file references of a specific finishing. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} finishingId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FileReference>} and HTTP response
     */
    finishingsFinishingIdFileReferencesGetWithHttpInfo(finishingId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'finishingId' is set
      if (finishingId === undefined || finishingId === null) {
        throw new Error("Missing the required parameter 'finishingId' when calling finishingsFinishingIdFileReferencesGet");
      }

      let pathParams = {
        'finishing_id': finishingId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FileReference];

      return this.apiClient.callApi(
        '/finishings/{finishing_id}/file_references', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns all file references of a specific finishing. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} finishingId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FileReference>}
     */
    finishingsFinishingIdFileReferencesGet(finishingId, opts) {
      return this.finishingsFinishingIdFileReferencesGetWithHttpInfo(finishingId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new file reference for a specific finishing. File referenes can only be                           added or modified as long as the job has not been &#x60;completed&#x60; or &#x60;canceled&#x60;.                           This means, that file references can be modified for production jobs. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/FinishingIdFileReferencesBody} body 
     * @param {String} finishingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileReference} and HTTP response
     */
    finishingsFinishingIdFileReferencesPostWithHttpInfo(body, finishingId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling finishingsFinishingIdFileReferencesPost");
      }
      // verify the required parameter 'finishingId' is set
      if (finishingId === undefined || finishingId === null) {
        throw new Error("Missing the required parameter 'finishingId' when calling finishingsFinishingIdFileReferencesPost");
      }

      let pathParams = {
        'finishing_id': finishingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileReference;

      return this.apiClient.callApi(
        '/finishings/{finishing_id}/file_references', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new file reference for a specific finishing. File referenes can only be                           added or modified as long as the job has not been &#x60;completed&#x60; or &#x60;canceled&#x60;.                           This means, that file references can be modified for production jobs. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} finishingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileReference}
     */
    finishingsFinishingIdFileReferencesPost(body, finishingId) {
      return this.finishingsFinishingIdFileReferencesPostWithHttpInfo(body, finishingId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a finishing application from a specific finishing. If a finishing is                             left without any applications after this removal, the finishing itself will                             be automatically destroyed as well. Removing finishing applications is only                             possible if the parent job is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} finishingId 
     * @param {String} finishingApplicationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    finishingsFinishingIdFinishingApplicationsFinishingApplicationIdDeleteWithHttpInfo(finishingId, finishingApplicationId) {
      
      let postBody = null;
      // verify the required parameter 'finishingId' is set
      if (finishingId === undefined || finishingId === null) {
        throw new Error("Missing the required parameter 'finishingId' when calling finishingsFinishingIdFinishingApplicationsFinishingApplicationIdDelete");
      }
      // verify the required parameter 'finishingApplicationId' is set
      if (finishingApplicationId === undefined || finishingApplicationId === null) {
        throw new Error("Missing the required parameter 'finishingApplicationId' when calling finishingsFinishingIdFinishingApplicationsFinishingApplicationIdDelete");
      }

      let pathParams = {
        'finishing_id': finishingId,'finishing_application_id': finishingApplicationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/finishings/{finishing_id}/finishing_applications/{finishing_application_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a finishing application from a specific finishing. If a finishing is                             left without any applications after this removal, the finishing itself will                             be automatically destroyed as well. Removing finishing applications is only                             possible if the parent job is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} finishingId 
     * @param {<&vendorExtensions.x-jsdoc-type>} finishingApplicationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    finishingsFinishingIdFinishingApplicationsFinishingApplicationIdDelete(finishingId, finishingApplicationId) {
      return this.finishingsFinishingIdFinishingApplicationsFinishingApplicationIdDeleteWithHttpInfo(finishingId, finishingApplicationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a specific finishing application. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} finishingId 
     * @param {String} finishingApplicationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FinishingApplication} and HTTP response
     */
    finishingsFinishingIdFinishingApplicationsFinishingApplicationIdGetWithHttpInfo(finishingId, finishingApplicationId) {
      
      let postBody = null;
      // verify the required parameter 'finishingId' is set
      if (finishingId === undefined || finishingId === null) {
        throw new Error("Missing the required parameter 'finishingId' when calling finishingsFinishingIdFinishingApplicationsFinishingApplicationIdGet");
      }
      // verify the required parameter 'finishingApplicationId' is set
      if (finishingApplicationId === undefined || finishingApplicationId === null) {
        throw new Error("Missing the required parameter 'finishingApplicationId' when calling finishingsFinishingIdFinishingApplicationsFinishingApplicationIdGet");
      }

      let pathParams = {
        'finishing_id': finishingId,'finishing_application_id': finishingApplicationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FinishingApplication;

      return this.apiClient.callApi(
        '/finishings/{finishing_id}/finishing_applications/{finishing_application_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a specific finishing application. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} finishingId 
     * @param {<&vendorExtensions.x-jsdoc-type>} finishingApplicationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FinishingApplication}
     */
    finishingsFinishingIdFinishingApplicationsFinishingApplicationIdGet(finishingId, finishingApplicationId) {
      return this.finishingsFinishingIdFinishingApplicationsFinishingApplicationIdGetWithHttpInfo(finishingId, finishingApplicationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns all finishing applications of a specific finishing. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} finishingId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FinishingApplication>} and HTTP response
     */
    finishingsFinishingIdFinishingApplicationsGetWithHttpInfo(finishingId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'finishingId' is set
      if (finishingId === undefined || finishingId === null) {
        throw new Error("Missing the required parameter 'finishingId' when calling finishingsFinishingIdFinishingApplicationsGet");
      }

      let pathParams = {
        'finishing_id': finishingId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FinishingApplication];

      return this.apiClient.callApi(
        '/finishings/{finishing_id}/finishing_applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns all finishing applications of a specific finishing. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} finishingId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FinishingApplication>}
     */
    finishingsFinishingIdFinishingApplicationsGet(finishingId, opts) {
      return this.finishingsFinishingIdFinishingApplicationsGetWithHttpInfo(finishingId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new finishing application for a specific finshing and part.                           Finshing applications can only be added as long as the job is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/FinishingIdFinishingApplicationsBody} body 
     * @param {String} finishingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FinishingApplication} and HTTP response
     */
    finishingsFinishingIdFinishingApplicationsPostWithHttpInfo(body, finishingId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling finishingsFinishingIdFinishingApplicationsPost");
      }
      // verify the required parameter 'finishingId' is set
      if (finishingId === undefined || finishingId === null) {
        throw new Error("Missing the required parameter 'finishingId' when calling finishingsFinishingIdFinishingApplicationsPost");
      }

      let pathParams = {
        'finishing_id': finishingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FinishingApplication;

      return this.apiClient.callApi(
        '/finishings/{finishing_id}/finishing_applications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new finishing application for a specific finshing and part.                           Finshing applications can only be added as long as the job is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} finishingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FinishingApplication}
     */
    finishingsFinishingIdFinishingApplicationsPost(body, finishingId) {
      return this.finishingsFinishingIdFinishingApplicationsPostWithHttpInfo(body, finishingId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a specific finishing. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} finishingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Finishing} and HTTP response
     */
    finishingsFinishingIdGetWithHttpInfo(finishingId) {
      
      let postBody = null;
      // verify the required parameter 'finishingId' is set
      if (finishingId === undefined || finishingId === null) {
        throw new Error("Missing the required parameter 'finishingId' when calling finishingsFinishingIdGet");
      }

      let pathParams = {
        'finishing_id': finishingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Finishing;

      return this.apiClient.callApi(
        '/finishings/{finishing_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a specific finishing. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} finishingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Finishing}
     */
    finishingsFinishingIdGet(finishingId) {
      return this.finishingsFinishingIdGetWithHttpInfo(finishingId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     *  - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/FinishingsFinishingIdBody} body 
     * @param {String} finishingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Finishing} and HTTP response
     */
    finishingsFinishingIdPatchWithHttpInfo(body, finishingId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling finishingsFinishingIdPatch");
      }
      // verify the required parameter 'finishingId' is set
      if (finishingId === undefined || finishingId === null) {
        throw new Error("Missing the required parameter 'finishingId' when calling finishingsFinishingIdPatch");
      }

      let pathParams = {
        'finishing_id': finishingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Finishing;

      return this.apiClient.callApi(
        '/finishings/{finishing_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     *  - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} finishingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Finishing}
     */
    finishingsFinishingIdPatch(body, finishingId) {
      return this.finishingsFinishingIdPatchWithHttpInfo(body, finishingId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns all jobs that have a connection to the &#x60;Organization&#x60;                        from your token. This means that those jobs might have been created by                        that organization, are produced by it, some parts have been outsourced to it,                        or the organization is the customer which ordered a job. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Job>} and HTTP response
     */
    jobsGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Job];

      return this.apiClient.callApi(
        '/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns all jobs that have a connection to the &#x60;Organization&#x60;                        from your token. This means that those jobs might have been created by                        that organization, are produced by it, some parts have been outsourced to it,                        or the organization is the customer which ordered a job. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Job>}
     */
    jobsGet(opts) {
      return this.jobsGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes or specific job while this job is still a &#x60;draft&#x60;. If the job                          is not in a &#x60;draft&#x60; state anymore the job will be canceled. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    jobsJobIdDeleteWithHttpInfo(jobId) {
      
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdDelete");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/jobs/{job_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes or specific job while this job is still a &#x60;draft&#x60;. If the job                          is not in a &#x60;draft&#x60; state anymore the job will be canceled. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    jobsJobIdDelete(jobId) {
      return this.jobsJobIdDeleteWithHttpInfo(jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove the FinishedProduct - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    jobsJobIdFinishedProductDeleteWithHttpInfo(jobId) {
      
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdFinishedProductDelete");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/jobs/{job_id}/finished_product', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove the FinishedProduct - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    jobsJobIdFinishedProductDelete(jobId) {
      return this.jobsJobIdFinishedProductDeleteWithHttpInfo(jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show the full details of the FinishedProduct - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FinishedProduct} and HTTP response
     */
    jobsJobIdFinishedProductGetWithHttpInfo(jobId) {
      
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdFinishedProductGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FinishedProduct;

      return this.apiClient.callApi(
        '/jobs/{job_id}/finished_product', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show the full details of the FinishedProduct - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FinishedProduct}
     */
    jobsJobIdFinishedProductGet(jobId) {
      return this.jobsJobIdFinishedProductGetWithHttpInfo(jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the FinishedProduct with the provided params - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/JobIdFinishedProductBody1} body 
     * @param {String} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FinishedProduct} and HTTP response
     */
    jobsJobIdFinishedProductPatchWithHttpInfo(body, jobId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdFinishedProductPatch");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdFinishedProductPatch");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FinishedProduct;

      return this.apiClient.callApi(
        '/jobs/{job_id}/finished_product', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update the FinishedProduct with the provided params - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FinishedProduct}
     */
    jobsJobIdFinishedProductPatch(body, jobId) {
      return this.jobsJobIdFinishedProductPatchWithHttpInfo(body, jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create the FinishedProduct for a Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/JobIdFinishedProductBody} body 
     * @param {String} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FinishedProduct} and HTTP response
     */
    jobsJobIdFinishedProductPostWithHttpInfo(body, jobId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdFinishedProductPost");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdFinishedProductPost");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FinishedProduct;

      return this.apiClient.callApi(
        '/jobs/{job_id}/finished_product', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create the FinishedProduct for a Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FinishedProduct}
     */
    jobsJobIdFinishedProductPost(body, jobId) {
      return this.jobsJobIdFinishedProductPostWithHttpInfo(body, jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a specific job, including it&#x27;s entire defintion like compments, their                       colors, finishings, finishing applications and desired substrate information. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    jobsJobIdGetWithHttpInfo(jobId) {
      
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/jobs/{job_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a specific job, including it&#x27;s entire defintion like compments, their                       colors, finishings, finishing applications and desired substrate information. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    jobsJobIdGet(jobId) {
      return this.jobsJobIdGetWithHttpInfo(jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all milestones for this Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} jobId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Milestone>} and HTTP response
     */
    jobsJobIdMilestonesGetWithHttpInfo(jobId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdMilestonesGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Milestone];

      return this.apiClient.callApi(
        '/jobs/{job_id}/milestones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List all milestones for this Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Milestone>}
     */
    jobsJobIdMilestonesGet(jobId, opts) {
      return this.jobsJobIdMilestonesGetWithHttpInfo(jobId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new milestone for this Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/JobIdMilestonesBody} body 
     * @param {String} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Milestone} and HTTP response
     */
    jobsJobIdMilestonesPostWithHttpInfo(body, jobId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdMilestonesPost");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdMilestonesPost");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Milestone;

      return this.apiClient.callApi(
        '/jobs/{job_id}/milestones', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new milestone for this Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Milestone}
     */
    jobsJobIdMilestonesPost(body, jobId) {
      return this.jobsJobIdMilestonesPostWithHttpInfo(body, jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns all packagings of a specific jobs - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} jobId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Packaging>} and HTTP response
     */
    jobsJobIdPackagingsGetWithHttpInfo(jobId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdPackagingsGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Packaging];

      return this.apiClient.callApi(
        '/jobs/{job_id}/packagings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns all packagings of a specific jobs - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Packaging>}
     */
    jobsJobIdPackagingsGet(jobId, opts) {
      return this.jobsJobIdPackagingsGetWithHttpInfo(jobId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new packaging for the specified job. Packagings can only be added or                           modified as long as the job is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/JobIdPackagingsBody} body 
     * @param {String} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Packaging} and HTTP response
     */
    jobsJobIdPackagingsPostWithHttpInfo(body, jobId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdPackagingsPost");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdPackagingsPost");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Packaging;

      return this.apiClient.callApi(
        '/jobs/{job_id}/packagings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new packaging for the specified job. Packagings can only be added or                           modified as long as the job is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Packaging}
     */
    jobsJobIdPackagingsPost(body, jobId) {
      return this.jobsJobIdPackagingsPostWithHttpInfo(body, jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns all parts of a specific job - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} jobId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Part>} and HTTP response
     */
    jobsJobIdPartsGetWithHttpInfo(jobId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdPartsGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Part];

      return this.apiClient.callApi(
        '/jobs/{job_id}/parts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns all parts of a specific job - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Part>}
     */
    jobsJobIdPartsGet(jobId, opts) {
      return this.jobsJobIdPartsGetWithHttpInfo(jobId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new part for the specified job. Parts can only be added or modified                           as long as the job is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/JobIdPartsBody} body 
     * @param {String} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Part} and HTTP response
     */
    jobsJobIdPartsPostWithHttpInfo(body, jobId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdPartsPost");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdPartsPost");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Part;

      return this.apiClient.callApi(
        '/jobs/{job_id}/parts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new part for the specified job. Parts can only be added or modified                           as long as the job is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Part}
     */
    jobsJobIdPartsPost(body, jobId) {
      return this.jobsJobIdPartsPostWithHttpInfo(body, jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Changes the attributes on a job. Please not that most attributes cannot be                         changed anymore, once the job is no longer a draft. If you try to change a                         frozen attribute, you will receive a 422 error. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/JobsJobIdBody} body 
     * @param {String} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Job} and HTTP response
     */
    jobsJobIdPatchWithHttpInfo(body, jobId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdPatch");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdPatch");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Job;

      return this.apiClient.callApi(
        '/jobs/{job_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Changes the attributes on a job. Please not that most attributes cannot be                         changed anymore, once the job is no longer a draft. If you try to change a                         frozen attribute, you will receive a 422 error. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Job}
     */
    jobsJobIdPatch(body, jobId) {
      return this.jobsJobIdPatchWithHttpInfo(body, jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List transitions for a given Job, chronologically from most recent to oldest - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} jobId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/JobStateTransition>} and HTTP response
     */
    jobsJobIdStateTransitionsGetWithHttpInfo(jobId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdStateTransitionsGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [JobStateTransition];

      return this.apiClient.callApi(
        '/jobs/{job_id}/state_transitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List transitions for a given Job, chronologically from most recent to oldest - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/JobStateTransition>}
     */
    jobsJobIdStateTransitionsGet(jobId, opts) {
      return this.jobsJobIdStateTransitionsGetWithHttpInfo(jobId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Transition a Job to a new state - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/JobIdStateTransitionsBody} body 
     * @param {String} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JobStateTransition} and HTTP response
     */
    jobsJobIdStateTransitionsPostWithHttpInfo(body, jobId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdStateTransitionsPost");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdStateTransitionsPost");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobStateTransition;

      return this.apiClient.callApi(
        '/jobs/{job_id}/state_transitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Transition a Job to a new state - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JobStateTransition}
     */
    jobsJobIdStateTransitionsPost(body, jobId) {
      return this.jobsJobIdStateTransitionsPostWithHttpInfo(body, jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Display a given transition - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} jobId 
     * @param {String} stateTransitionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JobStateTransition} and HTTP response
     */
    jobsJobIdStateTransitionsStateTransitionIdGetWithHttpInfo(jobId, stateTransitionId) {
      
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdStateTransitionsStateTransitionIdGet");
      }
      // verify the required parameter 'stateTransitionId' is set
      if (stateTransitionId === undefined || stateTransitionId === null) {
        throw new Error("Missing the required parameter 'stateTransitionId' when calling jobsJobIdStateTransitionsStateTransitionIdGet");
      }

      let pathParams = {
        'job_id': jobId,'state_transition_id': stateTransitionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobStateTransition;

      return this.apiClient.callApi(
        '/jobs/{job_id}/state_transitions/{state_transition_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Display a given transition - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @param {<&vendorExtensions.x-jsdoc-type>} stateTransitionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JobStateTransition}
     */
    jobsJobIdStateTransitionsStateTransitionIdGet(jobId, stateTransitionId) {
      return this.jobsJobIdStateTransitionsStateTransitionIdGetWithHttpInfo(jobId, stateTransitionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new job. When creating jobs you may supply information for                         parts (including colors, finishings, desired substrate) as well. Please see the                         respective documentation for parameters. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/JobsBody} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Job} and HTTP response
     */
    jobsPostWithHttpInfo(body) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Job;

      return this.apiClient.callApi(
        '/jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new job. When creating jobs you may supply information for                         parts (including colors, finishings, desired substrate) as well. Please see the                         respective documentation for parameters. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Job}
     */
    jobsPost(body) {
      return this.jobsPostWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a milestone - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} milestoneId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    milestonesMilestoneIdDeleteWithHttpInfo(milestoneId) {
      
      let postBody = null;
      // verify the required parameter 'milestoneId' is set
      if (milestoneId === undefined || milestoneId === null) {
        throw new Error("Missing the required parameter 'milestoneId' when calling milestonesMilestoneIdDelete");
      }

      let pathParams = {
        'milestone_id': milestoneId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/milestones/{milestone_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a milestone - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} milestoneId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    milestonesMilestoneIdDelete(milestoneId) {
      return this.milestonesMilestoneIdDeleteWithHttpInfo(milestoneId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Display the status of a Milestone - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} milestoneId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Milestone} and HTTP response
     */
    milestonesMilestoneIdGetWithHttpInfo(milestoneId) {
      
      let postBody = null;
      // verify the required parameter 'milestoneId' is set
      if (milestoneId === undefined || milestoneId === null) {
        throw new Error("Missing the required parameter 'milestoneId' when calling milestonesMilestoneIdGet");
      }

      let pathParams = {
        'milestone_id': milestoneId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Milestone;

      return this.apiClient.callApi(
        '/milestones/{milestone_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Display the status of a Milestone - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} milestoneId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Milestone}
     */
    milestonesMilestoneIdGet(milestoneId) {
      return this.milestonesMilestoneIdGetWithHttpInfo(milestoneId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change properties of a Milestone - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/MilestonesMilestoneIdBody} body 
     * @param {String} milestoneId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Milestone} and HTTP response
     */
    milestonesMilestoneIdPatchWithHttpInfo(body, milestoneId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling milestonesMilestoneIdPatch");
      }
      // verify the required parameter 'milestoneId' is set
      if (milestoneId === undefined || milestoneId === null) {
        throw new Error("Missing the required parameter 'milestoneId' when calling milestonesMilestoneIdPatch");
      }

      let pathParams = {
        'milestone_id': milestoneId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Milestone;

      return this.apiClient.callApi(
        '/milestones/{milestone_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change properties of a Milestone - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} milestoneId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Milestone}
     */
    milestonesMilestoneIdPatch(body, milestoneId) {
      return this.milestonesMilestoneIdPatchWithHttpInfo(body, milestoneId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a specific packaging, which also unassigns it from its job. Removing packagings                             is only possible while the attached job is still in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} packagingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    packagingsPackagingIdDeleteWithHttpInfo(packagingId) {
      
      let postBody = null;
      // verify the required parameter 'packagingId' is set
      if (packagingId === undefined || packagingId === null) {
        throw new Error("Missing the required parameter 'packagingId' when calling packagingsPackagingIdDelete");
      }

      let pathParams = {
        'packaging_id': packagingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/packagings/{packaging_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a specific packaging, which also unassigns it from its job. Removing packagings                             is only possible while the attached job is still in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} packagingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    packagingsPackagingIdDelete(packagingId) {
      return this.packagingsPackagingIdDeleteWithHttpInfo(packagingId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a specific packaging. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} packagingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Packaging} and HTTP response
     */
    packagingsPackagingIdGetWithHttpInfo(packagingId) {
      
      let postBody = null;
      // verify the required parameter 'packagingId' is set
      if (packagingId === undefined || packagingId === null) {
        throw new Error("Missing the required parameter 'packagingId' when calling packagingsPackagingIdGet");
      }

      let pathParams = {
        'packaging_id': packagingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Packaging;

      return this.apiClient.callApi(
        '/packagings/{packaging_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a specific packaging. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} packagingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Packaging}
     */
    packagingsPackagingIdGet(packagingId) {
      return this.packagingsPackagingIdGetWithHttpInfo(packagingId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modifies a specific packagings. Packagings can only be modified as long as their parent                           job is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/PackagingsPackagingIdBody} body 
     * @param {String} packagingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Packaging} and HTTP response
     */
    packagingsPackagingIdPatchWithHttpInfo(body, packagingId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling packagingsPackagingIdPatch");
      }
      // verify the required parameter 'packagingId' is set
      if (packagingId === undefined || packagingId === null) {
        throw new Error("Missing the required parameter 'packagingId' when calling packagingsPackagingIdPatch");
      }

      let pathParams = {
        'packaging_id': packagingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Packaging;

      return this.apiClient.callApi(
        '/packagings/{packaging_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modifies a specific packagings. Packagings can only be modified as long as their parent                           job is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} packagingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Packaging}
     */
    packagingsPackagingIdPatch(body, packagingId) {
      return this.packagingsPackagingIdPatchWithHttpInfo(body, packagingId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a specific color from a part, as long as the job is still a draft. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} partId 
     * @param {String} colorId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    partsPartIdColorsColorIdDeleteWithHttpInfo(partId, colorId) {
      
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdColorsColorIdDelete");
      }
      // verify the required parameter 'colorId' is set
      if (colorId === undefined || colorId === null) {
        throw new Error("Missing the required parameter 'colorId' when calling partsPartIdColorsColorIdDelete");
      }

      let pathParams = {
        'part_id': partId,'color_id': colorId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/parts/{part_id}/colors/{color_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a specific color from a part, as long as the job is still a draft. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} partId 
     * @param {<&vendorExtensions.x-jsdoc-type>} colorId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    partsPartIdColorsColorIdDelete(partId, colorId) {
      return this.partsPartIdColorsColorIdDeleteWithHttpInfo(partId, colorId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a specific color from a part. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} partId 
     * @param {String} colorId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Color} and HTTP response
     */
    partsPartIdColorsColorIdGetWithHttpInfo(partId, colorId) {
      
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdColorsColorIdGet");
      }
      // verify the required parameter 'colorId' is set
      if (colorId === undefined || colorId === null) {
        throw new Error("Missing the required parameter 'colorId' when calling partsPartIdColorsColorIdGet");
      }

      let pathParams = {
        'part_id': partId,'color_id': colorId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Color;

      return this.apiClient.callApi(
        '/parts/{part_id}/colors/{color_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a specific color from a part. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} partId 
     * @param {<&vendorExtensions.x-jsdoc-type>} colorId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Color}
     */
    partsPartIdColorsColorIdGet(partId, colorId) {
      return this.partsPartIdColorsColorIdGetWithHttpInfo(partId, colorId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Changes attributes on a specific color from a part, as long as job is still a draft. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/ColorsColorIdBody} body 
     * @param {String} partId 
     * @param {String} colorId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Color} and HTTP response
     */
    partsPartIdColorsColorIdPatchWithHttpInfo(body, partId, colorId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partsPartIdColorsColorIdPatch");
      }
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdColorsColorIdPatch");
      }
      // verify the required parameter 'colorId' is set
      if (colorId === undefined || colorId === null) {
        throw new Error("Missing the required parameter 'colorId' when calling partsPartIdColorsColorIdPatch");
      }

      let pathParams = {
        'part_id': partId,'color_id': colorId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Color;

      return this.apiClient.callApi(
        '/parts/{part_id}/colors/{color_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Changes attributes on a specific color from a part, as long as job is still a draft. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} partId 
     * @param {<&vendorExtensions.x-jsdoc-type>} colorId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Color}
     */
    partsPartIdColorsColorIdPatch(body, partId, colorId) {
      return this.partsPartIdColorsColorIdPatchWithHttpInfo(body, partId, colorId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns all colors from a job&#x27;s part. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} partId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Color>} and HTTP response
     */
    partsPartIdColorsGetWithHttpInfo(partId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdColorsGet");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Color];

      return this.apiClient.callApi(
        '/parts/{part_id}/colors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns all colors from a job&#x27;s part. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} partId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Color>}
     */
    partsPartIdColorsGet(partId, opts) {
      return this.partsPartIdColorsGetWithHttpInfo(partId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new color and attaches it to the selected part with the given parameters. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/PartIdColorsBody} body 
     * @param {String} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Color} and HTTP response
     */
    partsPartIdColorsPostWithHttpInfo(body, partId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partsPartIdColorsPost");
      }
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdColorsPost");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Color;

      return this.apiClient.callApi(
        '/parts/{part_id}/colors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new color and attaches it to the selected part with the given parameters. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Color}
     */
    partsPartIdColorsPost(body, partId) {
      return this.partsPartIdColorsPostWithHttpInfo(body, partId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a specific part, which also unassigns it from its job. Removing parts                            is only possible while the attached job is still in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    partsPartIdDeleteWithHttpInfo(partId) {
      
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdDelete");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/parts/{part_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a specific part, which also unassigns it from its job. Removing parts                            is only possible while the attached job is still in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    partsPartIdDelete(partId) {
      return this.partsPartIdDeleteWithHttpInfo(partId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes the desired substrate information from a specific part as long as                             the job to which the part belongs is still a draft. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    partsPartIdDesiredSubstrateDeleteWithHttpInfo(partId) {
      
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdDesiredSubstrateDelete");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/parts/{part_id}/desired_substrate', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes the desired substrate information from a specific part as long as                             the job to which the part belongs is still a draft. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    partsPartIdDesiredSubstrateDelete(partId) {
      return this.partsPartIdDesiredSubstrateDeleteWithHttpInfo(partId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the desired substrate information. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DesiredSubstrate} and HTTP response
     */
    partsPartIdDesiredSubstrateGetWithHttpInfo(partId) {
      
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdDesiredSubstrateGet");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesiredSubstrate;

      return this.apiClient.callApi(
        '/parts/{part_id}/desired_substrate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the desired substrate information. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DesiredSubstrate}
     */
    partsPartIdDesiredSubstrateGet(partId) {
      return this.partsPartIdDesiredSubstrateGetWithHttpInfo(partId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modifies the desired substrate information from a specific part as long as                           the job to which the part belongs is still a draft. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/PartIdDesiredSubstrateBody1} body 
     * @param {String} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DesiredSubstrate} and HTTP response
     */
    partsPartIdDesiredSubstratePatchWithHttpInfo(body, partId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partsPartIdDesiredSubstratePatch");
      }
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdDesiredSubstratePatch");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesiredSubstrate;

      return this.apiClient.callApi(
        '/parts/{part_id}/desired_substrate', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modifies the desired substrate information from a specific part as long as                           the job to which the part belongs is still a draft. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DesiredSubstrate}
     */
    partsPartIdDesiredSubstratePatch(body, partId) {
      return this.partsPartIdDesiredSubstratePatchWithHttpInfo(body, partId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates new desired substrate information. If desired substrate information is                           already present, it will be overwritten. Creating desired substrate information                           is only possible as long as the job is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/PartIdDesiredSubstrateBody} body 
     * @param {String} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DesiredSubstrate} and HTTP response
     */
    partsPartIdDesiredSubstratePostWithHttpInfo(body, partId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partsPartIdDesiredSubstratePost");
      }
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdDesiredSubstratePost");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesiredSubstrate;

      return this.apiClient.callApi(
        '/parts/{part_id}/desired_substrate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates new desired substrate information. If desired substrate information is                           already present, it will be overwritten. Creating desired substrate information                           is only possible as long as the job is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DesiredSubstrate}
     */
    partsPartIdDesiredSubstratePost(body, partId) {
      return this.partsPartIdDesiredSubstratePostWithHttpInfo(body, partId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns all file references of a specific part. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} partId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FileReference>} and HTTP response
     */
    partsPartIdFileReferencesGetWithHttpInfo(partId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdFileReferencesGet");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FileReference];

      return this.apiClient.callApi(
        '/parts/{part_id}/file_references', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns all file references of a specific part. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} partId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FileReference>}
     */
    partsPartIdFileReferencesGet(partId, opts) {
      return this.partsPartIdFileReferencesGetWithHttpInfo(partId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new file reference for a specific part. File referenes can only be added or                           modified as long as the job has not been &#x60;completed&#x60; or &#x60;canceled&#x60;. This means,                           that file references can be modified for production jobs. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/PartIdFileReferencesBody} body 
     * @param {String} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileReference} and HTTP response
     */
    partsPartIdFileReferencesPostWithHttpInfo(body, partId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partsPartIdFileReferencesPost");
      }
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdFileReferencesPost");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileReference;

      return this.apiClient.callApi(
        '/parts/{part_id}/file_references', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new file reference for a specific part. File referenes can only be added or                           modified as long as the job has not been &#x60;completed&#x60; or &#x60;canceled&#x60;. This means,                           that file references can be modified for production jobs. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileReference}
     */
    partsPartIdFileReferencesPost(body, partId) {
      return this.partsPartIdFileReferencesPostWithHttpInfo(body, partId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns all finishings of a specific part. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} partId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Finishing>} and HTTP response
     */
    partsPartIdFinishingsGetWithHttpInfo(partId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdFinishingsGet");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Finishing];

      return this.apiClient.callApi(
        '/parts/{part_id}/finishings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns all finishings of a specific part. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} partId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Finishing>}
     */
    partsPartIdFinishingsGet(partId, opts) {
      return this.partsPartIdFinishingsGetWithHttpInfo(partId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new finishing for a specific part. Finishings can only be                           added or modified as long as the job they belong to is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/PartIdFinishingsBody} body 
     * @param {String} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Finishing} and HTTP response
     */
    partsPartIdFinishingsPostWithHttpInfo(body, partId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partsPartIdFinishingsPost");
      }
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdFinishingsPost");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Finishing;

      return this.apiClient.callApi(
        '/parts/{part_id}/finishings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new finishing for a specific part. Finishings can only be                           added or modified as long as the job they belong to is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Finishing}
     */
    partsPartIdFinishingsPost(body, partId) {
      return this.partsPartIdFinishingsPostWithHttpInfo(body, partId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a specific part, including its entire defintion with colors, finishings, finishing applications and desired substrate information. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ExtendedPart} and HTTP response
     */
    partsPartIdGetWithHttpInfo(partId) {
      
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdGet");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtendedPart;

      return this.apiClient.callApi(
        '/parts/{part_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a specific part, including its entire defintion with colors, finishings, finishing applications and desired substrate information. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ExtendedPart}
     */
    partsPartIdGet(partId) {
      return this.partsPartIdGetWithHttpInfo(partId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modifies a specific part. Parts can only be modified as long as their parent job                           is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/PartsPartIdBody} body 
     * @param {String} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Part} and HTTP response
     */
    partsPartIdPatchWithHttpInfo(body, partId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partsPartIdPatch");
      }
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdPatch");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Part;

      return this.apiClient.callApi(
        '/parts/{part_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modifies a specific part. Parts can only be modified as long as their parent job                           is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} partId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Part}
     */
    partsPartIdPatch(body, partId) {
      return this.partsPartIdPatchWithHttpInfo(body, partId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}