/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Color} from '../model/Color';
import {ColorsColorIdBody} from '../model/ColorsColorIdBody';
import {DesiredSubstrate} from '../model/DesiredSubstrate';
import {ExtendedPart} from '../model/ExtendedPart';
import {FileAction} from '../model/FileAction';
import {FileActionIdFileRemarksBody} from '../model/FileActionIdFileRemarksBody';
import {FileActionsFileActionIdBody} from '../model/FileActionsFileActionIdBody';
import {FileReference} from '../model/FileReference';
import {FileReferenceIdFileActionsBody} from '../model/FileReferenceIdFileActionsBody';
import {FileRemark} from '../model/FileRemark';
import {Finishing} from '../model/Finishing';
import {FinishingApplication} from '../model/FinishingApplication';
import {FinishingIdFileReferencesBody} from '../model/FinishingIdFileReferencesBody';
import {FinishingIdFinishingApplicationsBody} from '../model/FinishingIdFinishingApplicationsBody';
import {FinishingsFinishingIdBody} from '../model/FinishingsFinishingIdBody';
import {InlineResponse200} from '../model/InlineResponse200';
import {InlineResponse400} from '../model/InlineResponse400';
import {InlineResponse401} from '../model/InlineResponse401';
import {Job} from '../model/Job';
import {JobIdPackagingsBody} from '../model/JobIdPackagingsBody';
import {JobIdPartsBody} from '../model/JobIdPartsBody';
import {JobsBody} from '../model/JobsBody';
import {JobsJobIdBody} from '../model/JobsJobIdBody';
import {Packaging} from '../model/Packaging';
import {PackagingsPackagingIdBody} from '../model/PackagingsPackagingIdBody';
import {Part} from '../model/Part';
import {PartIdColorsBody} from '../model/PartIdColorsBody';
import {PartIdDesiredSubstrateBody} from '../model/PartIdDesiredSubstrateBody';
import {PartIdDesiredSubstrateBody1} from '../model/PartIdDesiredSubstrateBody1';
import {PartIdFileReferencesBody} from '../model/PartIdFileReferencesBody';
import {PartIdFinishingsBody} from '../model/PartIdFinishingsBody';
import {PartsPartIdBody} from '../model/PartsPartIdBody';

/**
* Specification service.
* @module api/SpecificationApi
* @version 1.0.0
*/
export class SpecificationApi {

    /**
    * Constructs a new SpecificationApi. 
    * @alias module:api/SpecificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the fileActionsFileActionIdDelete operation.
     * @callback moduleapi/SpecificationApi~fileActionsFileActionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a file action. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} fileActionId 
     * @param {module:api/SpecificationApi~fileActionsFileActionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fileActionsFileActionIdDelete(fileActionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'fileActionId' is set
      if (fileActionId === undefined || fileActionId === null) {
        throw new Error("Missing the required parameter 'fileActionId' when calling fileActionsFileActionIdDelete");
      }

      let pathParams = {
        'file_action_id': fileActionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/file_actions/{file_action_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the fileActionsFileActionIdFileRemarksGet operation.
     * @callback moduleapi/SpecificationApi~fileActionsFileActionIdFileRemarksGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FileRemark>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all file remarks of a file action. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} fileActionId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/SpecificationApi~fileActionsFileActionIdFileRemarksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    fileActionsFileActionIdFileRemarksGet(fileActionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileActionId' is set
      if (fileActionId === undefined || fileActionId === null) {
        throw new Error("Missing the required parameter 'fileActionId' when calling fileActionsFileActionIdFileRemarksGet");
      }

      let pathParams = {
        'file_action_id': fileActionId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FileRemark];

      return this.apiClient.callApi(
        '/file_actions/{file_action_id}/file_remarks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the fileActionsFileActionIdFileRemarksPost operation.
     * @callback moduleapi/SpecificationApi~fileActionsFileActionIdFileRemarksPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileRemark{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a file remark. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/FileActionIdFileRemarksBody} body 
     * @param {String} fileActionId 
     * @param {module:api/SpecificationApi~fileActionsFileActionIdFileRemarksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    fileActionsFileActionIdFileRemarksPost(body, fileActionId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fileActionsFileActionIdFileRemarksPost");
      }
      // verify the required parameter 'fileActionId' is set
      if (fileActionId === undefined || fileActionId === null) {
        throw new Error("Missing the required parameter 'fileActionId' when calling fileActionsFileActionIdFileRemarksPost");
      }

      let pathParams = {
        'file_action_id': fileActionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileRemark;

      return this.apiClient.callApi(
        '/file_actions/{file_action_id}/file_remarks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the fileActionsFileActionIdGet operation.
     * @callback moduleapi/SpecificationApi~fileActionsFileActionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileAction{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific file action. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} fileActionId 
     * @param {module:api/SpecificationApi~fileActionsFileActionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    fileActionsFileActionIdGet(fileActionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'fileActionId' is set
      if (fileActionId === undefined || fileActionId === null) {
        throw new Error("Missing the required parameter 'fileActionId' when calling fileActionsFileActionIdGet");
      }

      let pathParams = {
        'file_action_id': fileActionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileAction;

      return this.apiClient.callApi(
        '/file_actions/{file_action_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the fileActionsFileActionIdPatch operation.
     * @callback moduleapi/SpecificationApi~fileActionsFileActionIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileAction{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies file action. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/FileActionsFileActionIdBody} body 
     * @param {String} fileActionId 
     * @param {module:api/SpecificationApi~fileActionsFileActionIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    fileActionsFileActionIdPatch(body, fileActionId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fileActionsFileActionIdPatch");
      }
      // verify the required parameter 'fileActionId' is set
      if (fileActionId === undefined || fileActionId === null) {
        throw new Error("Missing the required parameter 'fileActionId' when calling fileActionsFileActionIdPatch");
      }

      let pathParams = {
        'file_action_id': fileActionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileAction;

      return this.apiClient.callApi(
        '/file_actions/{file_action_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the fileReferencesFileReferenceIdDelete operation.
     * @callback moduleapi/SpecificationApi~fileReferencesFileReferenceIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the file reference from it&#x27;s referenceable, which is a part or a finishing. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} fileReferenceId 
     * @param {module:api/SpecificationApi~fileReferencesFileReferenceIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fileReferencesFileReferenceIdDelete(fileReferenceId, callback) {
      
      let postBody = null;
      // verify the required parameter 'fileReferenceId' is set
      if (fileReferenceId === undefined || fileReferenceId === null) {
        throw new Error("Missing the required parameter 'fileReferenceId' when calling fileReferencesFileReferenceIdDelete");
      }

      let pathParams = {
        'file_reference_id': fileReferenceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/file_references/{file_reference_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the fileReferencesFileReferenceIdFileActionsGet operation.
     * @callback moduleapi/SpecificationApi~fileReferencesFileReferenceIdFileActionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FileAction>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all file actions of a file reference. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} fileReferenceId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/SpecificationApi~fileReferencesFileReferenceIdFileActionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    fileReferencesFileReferenceIdFileActionsGet(fileReferenceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileReferenceId' is set
      if (fileReferenceId === undefined || fileReferenceId === null) {
        throw new Error("Missing the required parameter 'fileReferenceId' when calling fileReferencesFileReferenceIdFileActionsGet");
      }

      let pathParams = {
        'file_reference_id': fileReferenceId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FileAction];

      return this.apiClient.callApi(
        '/file_references/{file_reference_id}/file_actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the fileReferencesFileReferenceIdFileActionsPost operation.
     * @callback moduleapi/SpecificationApi~fileReferencesFileReferenceIdFileActionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileAction{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a file action. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/FileReferenceIdFileActionsBody} body 
     * @param {String} fileReferenceId 
     * @param {module:api/SpecificationApi~fileReferencesFileReferenceIdFileActionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    fileReferencesFileReferenceIdFileActionsPost(body, fileReferenceId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fileReferencesFileReferenceIdFileActionsPost");
      }
      // verify the required parameter 'fileReferenceId' is set
      if (fileReferenceId === undefined || fileReferenceId === null) {
        throw new Error("Missing the required parameter 'fileReferenceId' when calling fileReferencesFileReferenceIdFileActionsPost");
      }

      let pathParams = {
        'file_reference_id': fileReferenceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileAction;

      return this.apiClient.callApi(
        '/file_references/{file_reference_id}/file_actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the fileReferencesFileReferenceIdGet operation.
     * @callback moduleapi/SpecificationApi~fileReferencesFileReferenceIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileReference{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific file reference. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} fileReferenceId 
     * @param {module:api/SpecificationApi~fileReferencesFileReferenceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    fileReferencesFileReferenceIdGet(fileReferenceId, callback) {
      
      let postBody = null;
      // verify the required parameter 'fileReferenceId' is set
      if (fileReferenceId === undefined || fileReferenceId === null) {
        throw new Error("Missing the required parameter 'fileReferenceId' when calling fileReferencesFileReferenceIdGet");
      }

      let pathParams = {
        'file_reference_id': fileReferenceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileReference;

      return this.apiClient.callApi(
        '/file_references/{file_reference_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the finishingsFinishingIdDelete operation.
     * @callback moduleapi/SpecificationApi~finishingsFinishingIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the finishing from a part. The finishing itself is destroyed                         by this operation including all of it&#x27;s applications. If you only want to                         detach a finishing from one part please remove the finishing application                         for that part instead. Finishings can only be removed as long as the                         parent jobs is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} finishingId 
     * @param {module:api/SpecificationApi~finishingsFinishingIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    finishingsFinishingIdDelete(finishingId, callback) {
      
      let postBody = null;
      // verify the required parameter 'finishingId' is set
      if (finishingId === undefined || finishingId === null) {
        throw new Error("Missing the required parameter 'finishingId' when calling finishingsFinishingIdDelete");
      }

      let pathParams = {
        'finishing_id': finishingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/finishings/{finishing_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the finishingsFinishingIdFileReferencesGet operation.
     * @callback moduleapi/SpecificationApi~finishingsFinishingIdFileReferencesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FileReference>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all file references of a specific finishing. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} finishingId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/SpecificationApi~finishingsFinishingIdFileReferencesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    finishingsFinishingIdFileReferencesGet(finishingId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'finishingId' is set
      if (finishingId === undefined || finishingId === null) {
        throw new Error("Missing the required parameter 'finishingId' when calling finishingsFinishingIdFileReferencesGet");
      }

      let pathParams = {
        'finishing_id': finishingId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FileReference];

      return this.apiClient.callApi(
        '/finishings/{finishing_id}/file_references', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the finishingsFinishingIdFileReferencesPost operation.
     * @callback moduleapi/SpecificationApi~finishingsFinishingIdFileReferencesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileReference{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new file reference for a specific finishing. File referenes can only be                           added or modified as long as the job has not been &#x60;completed&#x60; or &#x60;canceled&#x60;.                           This means, that file references can be modified for production jobs. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/FinishingIdFileReferencesBody} body 
     * @param {String} finishingId 
     * @param {module:api/SpecificationApi~finishingsFinishingIdFileReferencesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    finishingsFinishingIdFileReferencesPost(body, finishingId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling finishingsFinishingIdFileReferencesPost");
      }
      // verify the required parameter 'finishingId' is set
      if (finishingId === undefined || finishingId === null) {
        throw new Error("Missing the required parameter 'finishingId' when calling finishingsFinishingIdFileReferencesPost");
      }

      let pathParams = {
        'finishing_id': finishingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileReference;

      return this.apiClient.callApi(
        '/finishings/{finishing_id}/file_references', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the finishingsFinishingIdFinishingApplicationsFinishingApplicationIdDelete operation.
     * @callback moduleapi/SpecificationApi~finishingsFinishingIdFinishingApplicationsFinishingApplicationIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a finishing application from a specific finishing. If a finishing is                             left without any applications after this removal, the finishing itself will                             be automatically destroyed as well. Removing finishing applications is only                             possible if the parent job is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} finishingId 
     * @param {String} finishingApplicationId 
     * @param {module:api/SpecificationApi~finishingsFinishingIdFinishingApplicationsFinishingApplicationIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    finishingsFinishingIdFinishingApplicationsFinishingApplicationIdDelete(finishingId, finishingApplicationId, callback) {
      
      let postBody = null;
      // verify the required parameter 'finishingId' is set
      if (finishingId === undefined || finishingId === null) {
        throw new Error("Missing the required parameter 'finishingId' when calling finishingsFinishingIdFinishingApplicationsFinishingApplicationIdDelete");
      }
      // verify the required parameter 'finishingApplicationId' is set
      if (finishingApplicationId === undefined || finishingApplicationId === null) {
        throw new Error("Missing the required parameter 'finishingApplicationId' when calling finishingsFinishingIdFinishingApplicationsFinishingApplicationIdDelete");
      }

      let pathParams = {
        'finishing_id': finishingId,'finishing_application_id': finishingApplicationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/finishings/{finishing_id}/finishing_applications/{finishing_application_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the finishingsFinishingIdFinishingApplicationsFinishingApplicationIdGet operation.
     * @callback moduleapi/SpecificationApi~finishingsFinishingIdFinishingApplicationsFinishingApplicationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinishingApplication{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific finishing application. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} finishingId 
     * @param {String} finishingApplicationId 
     * @param {module:api/SpecificationApi~finishingsFinishingIdFinishingApplicationsFinishingApplicationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    finishingsFinishingIdFinishingApplicationsFinishingApplicationIdGet(finishingId, finishingApplicationId, callback) {
      
      let postBody = null;
      // verify the required parameter 'finishingId' is set
      if (finishingId === undefined || finishingId === null) {
        throw new Error("Missing the required parameter 'finishingId' when calling finishingsFinishingIdFinishingApplicationsFinishingApplicationIdGet");
      }
      // verify the required parameter 'finishingApplicationId' is set
      if (finishingApplicationId === undefined || finishingApplicationId === null) {
        throw new Error("Missing the required parameter 'finishingApplicationId' when calling finishingsFinishingIdFinishingApplicationsFinishingApplicationIdGet");
      }

      let pathParams = {
        'finishing_id': finishingId,'finishing_application_id': finishingApplicationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FinishingApplication;

      return this.apiClient.callApi(
        '/finishings/{finishing_id}/finishing_applications/{finishing_application_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the finishingsFinishingIdFinishingApplicationsGet operation.
     * @callback moduleapi/SpecificationApi~finishingsFinishingIdFinishingApplicationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FinishingApplication>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all finishing applications of a specific finishing. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} finishingId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/SpecificationApi~finishingsFinishingIdFinishingApplicationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    finishingsFinishingIdFinishingApplicationsGet(finishingId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'finishingId' is set
      if (finishingId === undefined || finishingId === null) {
        throw new Error("Missing the required parameter 'finishingId' when calling finishingsFinishingIdFinishingApplicationsGet");
      }

      let pathParams = {
        'finishing_id': finishingId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FinishingApplication];

      return this.apiClient.callApi(
        '/finishings/{finishing_id}/finishing_applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the finishingsFinishingIdFinishingApplicationsPost operation.
     * @callback moduleapi/SpecificationApi~finishingsFinishingIdFinishingApplicationsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinishingApplication{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new finishing application for a specific finshing and part.                           Finshing applications can only be added as long as the job is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/FinishingIdFinishingApplicationsBody} body 
     * @param {String} finishingId 
     * @param {module:api/SpecificationApi~finishingsFinishingIdFinishingApplicationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    finishingsFinishingIdFinishingApplicationsPost(body, finishingId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling finishingsFinishingIdFinishingApplicationsPost");
      }
      // verify the required parameter 'finishingId' is set
      if (finishingId === undefined || finishingId === null) {
        throw new Error("Missing the required parameter 'finishingId' when calling finishingsFinishingIdFinishingApplicationsPost");
      }

      let pathParams = {
        'finishing_id': finishingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FinishingApplication;

      return this.apiClient.callApi(
        '/finishings/{finishing_id}/finishing_applications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the finishingsFinishingIdGet operation.
     * @callback moduleapi/SpecificationApi~finishingsFinishingIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Finishing{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific finishing. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} finishingId 
     * @param {module:api/SpecificationApi~finishingsFinishingIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    finishingsFinishingIdGet(finishingId, callback) {
      
      let postBody = null;
      // verify the required parameter 'finishingId' is set
      if (finishingId === undefined || finishingId === null) {
        throw new Error("Missing the required parameter 'finishingId' when calling finishingsFinishingIdGet");
      }

      let pathParams = {
        'finishing_id': finishingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Finishing;

      return this.apiClient.callApi(
        '/finishings/{finishing_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the finishingsFinishingIdPatch operation.
     * @callback moduleapi/SpecificationApi~finishingsFinishingIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Finishing{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/FinishingsFinishingIdBody} body 
     * @param {String} finishingId 
     * @param {module:api/SpecificationApi~finishingsFinishingIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    finishingsFinishingIdPatch(body, finishingId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling finishingsFinishingIdPatch");
      }
      // verify the required parameter 'finishingId' is set
      if (finishingId === undefined || finishingId === null) {
        throw new Error("Missing the required parameter 'finishingId' when calling finishingsFinishingIdPatch");
      }

      let pathParams = {
        'finishing_id': finishingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Finishing;

      return this.apiClient.callApi(
        '/finishings/{finishing_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsGet operation.
     * @callback moduleapi/SpecificationApi~jobsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Job>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all jobs that have a connection to the &#x60;Organization&#x60;                        from your token. This means that those jobs might have been created by                        that organization, are produced by it, some parts have been outsourced to it,                        or the organization is the customer which ordered a job. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/SpecificationApi~jobsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Job];

      return this.apiClient.callApi(
        '/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdDelete operation.
     * @callback moduleapi/SpecificationApi~jobsJobIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes or specific job while this job is still a &#x60;draft&#x60;. If the job                          is not in a &#x60;draft&#x60; state anymore the job will be canceled. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} jobId 
     * @param {module:api/SpecificationApi~jobsJobIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobsJobIdDelete(jobId, callback) {
      
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdDelete");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/jobs/{job_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdGet operation.
     * @callback moduleapi/SpecificationApi~jobsJobIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific job, including it&#x27;s entire defintion like compments, their                       colors, finishings, finishing applications and desired substrate information. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} jobId 
     * @param {module:api/SpecificationApi~jobsJobIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdGet(jobId, callback) {
      
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/jobs/{job_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdPackagingsGet operation.
     * @callback moduleapi/SpecificationApi~jobsJobIdPackagingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Packaging>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all packagings of a specific jobs - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} jobId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/SpecificationApi~jobsJobIdPackagingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdPackagingsGet(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdPackagingsGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Packaging];

      return this.apiClient.callApi(
        '/jobs/{job_id}/packagings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdPackagingsPost operation.
     * @callback moduleapi/SpecificationApi~jobsJobIdPackagingsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Packaging{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new packaging for the specified job. Packagings can only be added or                           modified as long as the job is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/JobIdPackagingsBody} body 
     * @param {String} jobId 
     * @param {module:api/SpecificationApi~jobsJobIdPackagingsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdPackagingsPost(body, jobId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdPackagingsPost");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdPackagingsPost");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Packaging;

      return this.apiClient.callApi(
        '/jobs/{job_id}/packagings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdPartsGet operation.
     * @callback moduleapi/SpecificationApi~jobsJobIdPartsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Part>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all parts of a specific job - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} jobId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/SpecificationApi~jobsJobIdPartsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdPartsGet(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdPartsGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Part];

      return this.apiClient.callApi(
        '/jobs/{job_id}/parts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdPartsPost operation.
     * @callback moduleapi/SpecificationApi~jobsJobIdPartsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Part{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new part for the specified job. Parts can only be added or modified                           as long as the job is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/JobIdPartsBody} body 
     * @param {String} jobId 
     * @param {module:api/SpecificationApi~jobsJobIdPartsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdPartsPost(body, jobId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdPartsPost");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdPartsPost");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Part;

      return this.apiClient.callApi(
        '/jobs/{job_id}/parts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdPatch operation.
     * @callback moduleapi/SpecificationApi~jobsJobIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Job{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the attributes on a job. Please not that most attributes cannot be                         changed anymore, once the job is no longer a draft. If you try to change a                         frozen attribute, you will receive a 422 error. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/JobsJobIdBody} body 
     * @param {String} jobId 
     * @param {module:api/SpecificationApi~jobsJobIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdPatch(body, jobId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdPatch");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdPatch");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Job;

      return this.apiClient.callApi(
        '/jobs/{job_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsPost operation.
     * @callback moduleapi/SpecificationApi~jobsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Job{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new job. When creating jobs you may supply information for                         parts (including colors, finishings, desired substrate) as well. Please see the                         respective documentation for parameters. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/JobsBody} body 
     * @param {module:api/SpecificationApi~jobsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Job;

      return this.apiClient.callApi(
        '/jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the packagingsPackagingIdDelete operation.
     * @callback moduleapi/SpecificationApi~packagingsPackagingIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a specific packaging, which also unassigns it from its job. Removing packagings                             is only possible while the attached job is still in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} packagingId 
     * @param {module:api/SpecificationApi~packagingsPackagingIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    packagingsPackagingIdDelete(packagingId, callback) {
      
      let postBody = null;
      // verify the required parameter 'packagingId' is set
      if (packagingId === undefined || packagingId === null) {
        throw new Error("Missing the required parameter 'packagingId' when calling packagingsPackagingIdDelete");
      }

      let pathParams = {
        'packaging_id': packagingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/packagings/{packaging_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the packagingsPackagingIdGet operation.
     * @callback moduleapi/SpecificationApi~packagingsPackagingIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Packaging{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific packaging. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} packagingId 
     * @param {module:api/SpecificationApi~packagingsPackagingIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    packagingsPackagingIdGet(packagingId, callback) {
      
      let postBody = null;
      // verify the required parameter 'packagingId' is set
      if (packagingId === undefined || packagingId === null) {
        throw new Error("Missing the required parameter 'packagingId' when calling packagingsPackagingIdGet");
      }

      let pathParams = {
        'packaging_id': packagingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Packaging;

      return this.apiClient.callApi(
        '/packagings/{packaging_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the packagingsPackagingIdPatch operation.
     * @callback moduleapi/SpecificationApi~packagingsPackagingIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Packaging{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a specific packagings. Packagings can only be modified as long as their parent                           job is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/PackagingsPackagingIdBody} body 
     * @param {String} packagingId 
     * @param {module:api/SpecificationApi~packagingsPackagingIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    packagingsPackagingIdPatch(body, packagingId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling packagingsPackagingIdPatch");
      }
      // verify the required parameter 'packagingId' is set
      if (packagingId === undefined || packagingId === null) {
        throw new Error("Missing the required parameter 'packagingId' when calling packagingsPackagingIdPatch");
      }

      let pathParams = {
        'packaging_id': packagingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Packaging;

      return this.apiClient.callApi(
        '/packagings/{packaging_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partsPartIdColorsColorIdDelete operation.
     * @callback moduleapi/SpecificationApi~partsPartIdColorsColorIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a specific color from a part, as long as the job is still a draft. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} partId 
     * @param {String} colorId 
     * @param {module:api/SpecificationApi~partsPartIdColorsColorIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    partsPartIdColorsColorIdDelete(partId, colorId, callback) {
      
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdColorsColorIdDelete");
      }
      // verify the required parameter 'colorId' is set
      if (colorId === undefined || colorId === null) {
        throw new Error("Missing the required parameter 'colorId' when calling partsPartIdColorsColorIdDelete");
      }

      let pathParams = {
        'part_id': partId,'color_id': colorId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/parts/{part_id}/colors/{color_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partsPartIdColorsColorIdGet operation.
     * @callback moduleapi/SpecificationApi~partsPartIdColorsColorIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Color{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific color from a part. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} partId 
     * @param {String} colorId 
     * @param {module:api/SpecificationApi~partsPartIdColorsColorIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partsPartIdColorsColorIdGet(partId, colorId, callback) {
      
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdColorsColorIdGet");
      }
      // verify the required parameter 'colorId' is set
      if (colorId === undefined || colorId === null) {
        throw new Error("Missing the required parameter 'colorId' when calling partsPartIdColorsColorIdGet");
      }

      let pathParams = {
        'part_id': partId,'color_id': colorId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Color;

      return this.apiClient.callApi(
        '/parts/{part_id}/colors/{color_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partsPartIdColorsColorIdPatch operation.
     * @callback moduleapi/SpecificationApi~partsPartIdColorsColorIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Color{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes attributes on a specific color from a part, as long as job is still a draft. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/ColorsColorIdBody} body 
     * @param {String} partId 
     * @param {String} colorId 
     * @param {module:api/SpecificationApi~partsPartIdColorsColorIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partsPartIdColorsColorIdPatch(body, partId, colorId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partsPartIdColorsColorIdPatch");
      }
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdColorsColorIdPatch");
      }
      // verify the required parameter 'colorId' is set
      if (colorId === undefined || colorId === null) {
        throw new Error("Missing the required parameter 'colorId' when calling partsPartIdColorsColorIdPatch");
      }

      let pathParams = {
        'part_id': partId,'color_id': colorId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Color;

      return this.apiClient.callApi(
        '/parts/{part_id}/colors/{color_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partsPartIdColorsGet operation.
     * @callback moduleapi/SpecificationApi~partsPartIdColorsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Color>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all colors from a job&#x27;s part. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} partId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/SpecificationApi~partsPartIdColorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partsPartIdColorsGet(partId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdColorsGet");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Color];

      return this.apiClient.callApi(
        '/parts/{part_id}/colors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partsPartIdColorsPost operation.
     * @callback moduleapi/SpecificationApi~partsPartIdColorsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Color{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new color and attaches it to the selected part with the given parameters. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/PartIdColorsBody} body 
     * @param {String} partId 
     * @param {module:api/SpecificationApi~partsPartIdColorsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partsPartIdColorsPost(body, partId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partsPartIdColorsPost");
      }
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdColorsPost");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Color;

      return this.apiClient.callApi(
        '/parts/{part_id}/colors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partsPartIdDelete operation.
     * @callback moduleapi/SpecificationApi~partsPartIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a specific part, which also unassigns it from its job. Removing parts                            is only possible while the attached job is still in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} partId 
     * @param {module:api/SpecificationApi~partsPartIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    partsPartIdDelete(partId, callback) {
      
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdDelete");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/parts/{part_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partsPartIdDesiredSubstrateDelete operation.
     * @callback moduleapi/SpecificationApi~partsPartIdDesiredSubstrateDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the desired substrate information from a specific part as long as                             the job to which the part belongs is still a draft. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} partId 
     * @param {module:api/SpecificationApi~partsPartIdDesiredSubstrateDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    partsPartIdDesiredSubstrateDelete(partId, callback) {
      
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdDesiredSubstrateDelete");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/parts/{part_id}/desired_substrate', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partsPartIdDesiredSubstrateGet operation.
     * @callback moduleapi/SpecificationApi~partsPartIdDesiredSubstrateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesiredSubstrate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the desired substrate information. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} partId 
     * @param {module:api/SpecificationApi~partsPartIdDesiredSubstrateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partsPartIdDesiredSubstrateGet(partId, callback) {
      
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdDesiredSubstrateGet");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesiredSubstrate;

      return this.apiClient.callApi(
        '/parts/{part_id}/desired_substrate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partsPartIdDesiredSubstratePatch operation.
     * @callback moduleapi/SpecificationApi~partsPartIdDesiredSubstratePatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesiredSubstrate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the desired substrate information from a specific part as long as                           the job to which the part belongs is still a draft. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/PartIdDesiredSubstrateBody1} body 
     * @param {String} partId 
     * @param {module:api/SpecificationApi~partsPartIdDesiredSubstratePatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partsPartIdDesiredSubstratePatch(body, partId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partsPartIdDesiredSubstratePatch");
      }
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdDesiredSubstratePatch");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesiredSubstrate;

      return this.apiClient.callApi(
        '/parts/{part_id}/desired_substrate', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partsPartIdDesiredSubstratePost operation.
     * @callback moduleapi/SpecificationApi~partsPartIdDesiredSubstratePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesiredSubstrate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new desired substrate information. If desired substrate information is                           already present, it will be overwritten. Creating desired substrate information                           is only possible as long as the job is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/PartIdDesiredSubstrateBody} body 
     * @param {String} partId 
     * @param {module:api/SpecificationApi~partsPartIdDesiredSubstratePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partsPartIdDesiredSubstratePost(body, partId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partsPartIdDesiredSubstratePost");
      }
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdDesiredSubstratePost");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesiredSubstrate;

      return this.apiClient.callApi(
        '/parts/{part_id}/desired_substrate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partsPartIdFileReferencesGet operation.
     * @callback moduleapi/SpecificationApi~partsPartIdFileReferencesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FileReference>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all file references of a specific part. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} partId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/SpecificationApi~partsPartIdFileReferencesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partsPartIdFileReferencesGet(partId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdFileReferencesGet");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FileReference];

      return this.apiClient.callApi(
        '/parts/{part_id}/file_references', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partsPartIdFileReferencesPost operation.
     * @callback moduleapi/SpecificationApi~partsPartIdFileReferencesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileReference{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new file reference for a specific part. File referenes can only be added or                           modified as long as the job has not been &#x60;completed&#x60; or &#x60;canceled&#x60;. This means,                           that file references can be modified for production jobs. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/PartIdFileReferencesBody} body 
     * @param {String} partId 
     * @param {module:api/SpecificationApi~partsPartIdFileReferencesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partsPartIdFileReferencesPost(body, partId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partsPartIdFileReferencesPost");
      }
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdFileReferencesPost");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileReference;

      return this.apiClient.callApi(
        '/parts/{part_id}/file_references', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partsPartIdFinishingsGet operation.
     * @callback moduleapi/SpecificationApi~partsPartIdFinishingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Finishing>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all finishings of a specific part. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} partId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/SpecificationApi~partsPartIdFinishingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partsPartIdFinishingsGet(partId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdFinishingsGet");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Finishing];

      return this.apiClient.callApi(
        '/parts/{part_id}/finishings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partsPartIdFinishingsPost operation.
     * @callback moduleapi/SpecificationApi~partsPartIdFinishingsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Finishing{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new finishing for a specific part. Finishings can only be                           added or modified as long as the job they belong to is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/PartIdFinishingsBody} body 
     * @param {String} partId 
     * @param {module:api/SpecificationApi~partsPartIdFinishingsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partsPartIdFinishingsPost(body, partId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partsPartIdFinishingsPost");
      }
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdFinishingsPost");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Finishing;

      return this.apiClient.callApi(
        '/parts/{part_id}/finishings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partsPartIdGet operation.
     * @callback moduleapi/SpecificationApi~partsPartIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtendedPart{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific part, including its entire defintion with colors, finishings, finishing applications and desired substrate information. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} partId 
     * @param {module:api/SpecificationApi~partsPartIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partsPartIdGet(partId, callback) {
      
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdGet");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtendedPart;

      return this.apiClient.callApi(
        '/parts/{part_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partsPartIdPatch operation.
     * @callback moduleapi/SpecificationApi~partsPartIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Part{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a specific part. Parts can only be modified as long as their parent job                           is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/PartsPartIdBody} body 
     * @param {String} partId 
     * @param {module:api/SpecificationApi~partsPartIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partsPartIdPatch(body, partId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partsPartIdPatch");
      }
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling partsPartIdPatch");
      }

      let pathParams = {
        'part_id': partId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Part;

      return this.apiClient.callApi(
        '/parts/{part_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}