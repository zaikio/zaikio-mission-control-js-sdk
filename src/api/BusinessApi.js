/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Address} from '../model/Address';
import {InlineResponse2012} from '../model/InlineResponse2012';
import {InlineResponse400} from '../model/InlineResponse400';
import {InlineResponse401} from '../model/InlineResponse401';
import {Order} from '../model/Order';
import {OrderIdAddressBody} from '../model/OrderIdAddressBody';
import {OrderIdAddressBody1} from '../model/OrderIdAddressBody1';
import {OrderIdOrderLineItemsBody} from '../model/OrderIdOrderLineItemsBody';
import {OrderIdPaymentTermsBody} from '../model/OrderIdPaymentTermsBody';
import {OrderIdPaymentTermsBody1} from '../model/OrderIdPaymentTermsBody1';
import {OrderIdStateTransitionsBody} from '../model/OrderIdStateTransitionsBody';
import {OrderLineItem} from '../model/OrderLineItem';
import {OrderLineItemsOrderLineItemIdBody} from '../model/OrderLineItemsOrderLineItemIdBody';
import {OrderStateTransition} from '../model/OrderStateTransition';
import {OrdersBody} from '../model/OrdersBody';
import {OrdersOrderIdBody} from '../model/OrdersOrderIdBody';
import {PaymentTerms} from '../model/PaymentTerms';

/**
* Business service.
* @module api/BusinessApi
* @version 1.0.0
*/
export class BusinessApi {

    /**
    * Constructs a new BusinessApi. 
    * @alias module:api/BusinessApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Removes or specific order line item. Please not that removing line items is only possible                             if the parent order is still in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} orderLineItemId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    orderLineItemsOrderLineItemIdDeleteWithHttpInfo(orderLineItemId) {
      
      let postBody = null;
      // verify the required parameter 'orderLineItemId' is set
      if (orderLineItemId === undefined || orderLineItemId === null) {
        throw new Error("Missing the required parameter 'orderLineItemId' when calling orderLineItemsOrderLineItemIdDelete");
      }

      let pathParams = {
        'order_line_item_id': orderLineItemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/order_line_items/{order_line_item_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes or specific order line item. Please not that removing line items is only possible                             if the parent order is still in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} orderLineItemId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    orderLineItemsOrderLineItemIdDelete(orderLineItemId) {
      return this.orderLineItemsOrderLineItemIdDeleteWithHttpInfo(orderLineItemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a specific order line item. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.orders.r&#x60;
     * @param {String} orderLineItemId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrderLineItem} and HTTP response
     */
    orderLineItemsOrderLineItemIdGetWithHttpInfo(orderLineItemId) {
      
      let postBody = null;
      // verify the required parameter 'orderLineItemId' is set
      if (orderLineItemId === undefined || orderLineItemId === null) {
        throw new Error("Missing the required parameter 'orderLineItemId' when calling orderLineItemsOrderLineItemIdGet");
      }

      let pathParams = {
        'order_line_item_id': orderLineItemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderLineItem;

      return this.apiClient.callApi(
        '/order_line_items/{order_line_item_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a specific order line item. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.orders.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} orderLineItemId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrderLineItem}
     */
    orderLineItemsOrderLineItemIdGet(orderLineItemId) {
      return this.orderLineItemsOrderLineItemIdGetWithHttpInfo(orderLineItemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modifies a specfic order line item. Please not that any modifications to order line items                           are only possible as long as the parent order is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/OrderLineItemsOrderLineItemIdBody} body 
     * @param {String} orderLineItemId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrderLineItem} and HTTP response
     */
    orderLineItemsOrderLineItemIdPatchWithHttpInfo(body, orderLineItemId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling orderLineItemsOrderLineItemIdPatch");
      }
      // verify the required parameter 'orderLineItemId' is set
      if (orderLineItemId === undefined || orderLineItemId === null) {
        throw new Error("Missing the required parameter 'orderLineItemId' when calling orderLineItemsOrderLineItemIdPatch");
      }

      let pathParams = {
        'order_line_item_id': orderLineItemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderLineItem;

      return this.apiClient.callApi(
        '/order_line_items/{order_line_item_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modifies a specfic order line item. Please not that any modifications to order line items                           are only possible as long as the parent order is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} orderLineItemId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrderLineItem}
     */
    orderLineItemsOrderLineItemIdPatch(body, orderLineItemId) {
      return this.orderLineItemsOrderLineItemIdPatchWithHttpInfo(body, orderLineItemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns all orders that have already been confirmed. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.orders.r&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Order>} and HTTP response
     */
    ordersGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Order];

      return this.apiClient.callApi(
        '/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns all orders that have already been confirmed. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.orders.r&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Order>}
     */
    ordersGet(opts) {
      return this.ordersGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes the address from a specific order as long as the order is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    ordersOrderIdAddressDeleteWithHttpInfo(orderId) {
      
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdAddressDelete");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/orders/{order_id}/address', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes the address from a specific order as long as the order is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    ordersOrderIdAddressDelete(orderId) {
      return this.ordersOrderIdAddressDeleteWithHttpInfo(orderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the address for this order. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission-control.orders.r&#x60;
     * @param {String} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Address} and HTTP response
     */
    ordersOrderIdAddressGetWithHttpInfo(orderId) {
      
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdAddressGet");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Address;

      return this.apiClient.callApi(
        '/orders/{order_id}/address', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the address for this order. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission-control.orders.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Address}
     */
    ordersOrderIdAddressGet(orderId) {
      return this.ordersOrderIdAddressGetWithHttpInfo(orderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modifies the address from a specific order as long as                   the order is still in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/OrderIdAddressBody1} body 
     * @param {String} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Address} and HTTP response
     */
    ordersOrderIdAddressPatchWithHttpInfo(body, orderId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ordersOrderIdAddressPatch");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdAddressPatch");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Address;

      return this.apiClient.callApi(
        '/orders/{order_id}/address', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modifies the address from a specific order as long as                   the order is still in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Address}
     */
    ordersOrderIdAddressPatch(body, orderId) {
      return this.ordersOrderIdAddressPatchWithHttpInfo(body, orderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates new address. If an address is already present, it will be overwritten.                   Creating an address is only possible as long as the order is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/OrderIdAddressBody} body 
     * @param {String} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Address} and HTTP response
     */
    ordersOrderIdAddressPostWithHttpInfo(body, orderId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ordersOrderIdAddressPost");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdAddressPost");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Address;

      return this.apiClient.callApi(
        '/orders/{order_id}/address', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates new address. If an address is already present, it will be overwritten.                   Creating an address is only possible as long as the order is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Address}
     */
    ordersOrderIdAddressPost(body, orderId) {
      return this.ordersOrderIdAddressPostWithHttpInfo(body, orderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     *  - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    ordersOrderIdDeleteWithHttpInfo(orderId) {
      
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdDelete");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/orders/{order_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     *  - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    ordersOrderIdDelete(orderId) {
      return this.ordersOrderIdDeleteWithHttpInfo(orderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a specific order, including the address, payment terms and line items. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.orders.r&#x60;
     * @param {String} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2012} and HTTP response
     */
    ordersOrderIdGetWithHttpInfo(orderId) {
      
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdGet");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/orders/{order_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a specific order, including the address, payment terms and line items. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.orders.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2012}
     */
    ordersOrderIdGet(orderId) {
      return this.ordersOrderIdGetWithHttpInfo(orderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns all line item of a specific order. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.orders.r&#x60;
     * @param {String} orderId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/OrderLineItem>} and HTTP response
     */
    ordersOrderIdOrderLineItemsGetWithHttpInfo(orderId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdOrderLineItemsGet");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrderLineItem];

      return this.apiClient.callApi(
        '/orders/{order_id}/order_line_items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns all line item of a specific order. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.orders.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} orderId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/OrderLineItem>}
     */
    ordersOrderIdOrderLineItemsGet(orderId, opts) {
      return this.ordersOrderIdOrderLineItemsGetWithHttpInfo(orderId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new order line item and attaches it to an order. Please note that line items can                           only be added to orders in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/OrderIdOrderLineItemsBody} body 
     * @param {String} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrderLineItem} and HTTP response
     */
    ordersOrderIdOrderLineItemsPostWithHttpInfo(body, orderId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ordersOrderIdOrderLineItemsPost");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdOrderLineItemsPost");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderLineItem;

      return this.apiClient.callApi(
        '/orders/{order_id}/order_line_items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new order line item and attaches it to an order. Please note that line items can                           only be added to orders in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrderLineItem}
     */
    ordersOrderIdOrderLineItemsPost(body, orderId) {
      return this.ordersOrderIdOrderLineItemsPostWithHttpInfo(body, orderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     *  - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/OrdersOrderIdBody} body 
     * @param {String} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2012} and HTTP response
     */
    ordersOrderIdPatchWithHttpInfo(body, orderId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ordersOrderIdPatch");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdPatch");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/orders/{order_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     *  - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2012}
     */
    ordersOrderIdPatch(body, orderId) {
      return this.ordersOrderIdPatchWithHttpInfo(body, orderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes the payment terms. Removing the payment terms is only possible while                             the order is still in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    ordersOrderIdPaymentTermsDeleteWithHttpInfo(orderId) {
      
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdPaymentTermsDelete");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/orders/{order_id}/payment_terms', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes the payment terms. Removing the payment terms is only possible while                             the order is still in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    ordersOrderIdPaymentTermsDelete(orderId) {
      return this.ordersOrderIdPaymentTermsDeleteWithHttpInfo(orderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the payment terms for the specified order. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.orders.r&#x60;
     * @param {String} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentTerms} and HTTP response
     */
    ordersOrderIdPaymentTermsGetWithHttpInfo(orderId) {
      
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdPaymentTermsGet");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentTerms;

      return this.apiClient.callApi(
        '/orders/{order_id}/payment_terms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the payment terms for the specified order. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.orders.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentTerms}
     */
    ordersOrderIdPaymentTermsGet(orderId) {
      return this.ordersOrderIdPaymentTermsGetWithHttpInfo(orderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modifies existing payment terms for the specified order. If payment terms already                           exist they will be overwritten. Creating payment terms is only possible as long as                           the order is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/OrderIdPaymentTermsBody1} body 
     * @param {String} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentTerms} and HTTP response
     */
    ordersOrderIdPaymentTermsPatchWithHttpInfo(body, orderId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ordersOrderIdPaymentTermsPatch");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdPaymentTermsPatch");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentTerms;

      return this.apiClient.callApi(
        '/orders/{order_id}/payment_terms', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modifies existing payment terms for the specified order. If payment terms already                           exist they will be overwritten. Creating payment terms is only possible as long as                           the order is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentTerms}
     */
    ordersOrderIdPaymentTermsPatch(body, orderId) {
      return this.ordersOrderIdPaymentTermsPatchWithHttpInfo(body, orderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new payment terms for the specified order. If payment terms already                           exist they will be overwritten. Creating payment terms is only possible as long                           as the order is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/OrderIdPaymentTermsBody} body 
     * @param {String} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentTerms} and HTTP response
     */
    ordersOrderIdPaymentTermsPostWithHttpInfo(body, orderId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ordersOrderIdPaymentTermsPost");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdPaymentTermsPost");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentTerms;

      return this.apiClient.callApi(
        '/orders/{order_id}/payment_terms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new payment terms for the specified order. If payment terms already                           exist they will be overwritten. Creating payment terms is only possible as long                           as the order is in a &#x60;draft&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentTerms}
     */
    ordersOrderIdPaymentTermsPost(body, orderId) {
      return this.ordersOrderIdPaymentTermsPostWithHttpInfo(body, orderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List transitions for a given Order, chronologically from most recent to oldest - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.orders.r&#x60; or &#x60;mission_control.orders.rw&#x60;
     * @param {String} orderId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/OrderStateTransition>} and HTTP response
     */
    ordersOrderIdStateTransitionsGetWithHttpInfo(orderId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdStateTransitionsGet");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrderStateTransition];

      return this.apiClient.callApi(
        '/orders/{order_id}/state_transitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List transitions for a given Order, chronologically from most recent to oldest - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.orders.r&#x60; or &#x60;mission_control.orders.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} orderId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/OrderStateTransition>}
     */
    ordersOrderIdStateTransitionsGet(orderId, opts) {
      return this.ordersOrderIdStateTransitionsGetWithHttpInfo(orderId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Transition an Order to a new state - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.orders.w&#x60; or &#x60;mission_control.orders.rw&#x60;
     * @param {module:model/OrderIdStateTransitionsBody} body 
     * @param {String} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrderStateTransition} and HTTP response
     */
    ordersOrderIdStateTransitionsPostWithHttpInfo(body, orderId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ordersOrderIdStateTransitionsPost");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdStateTransitionsPost");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderStateTransition;

      return this.apiClient.callApi(
        '/orders/{order_id}/state_transitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Transition an Order to a new state - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.orders.w&#x60; or &#x60;mission_control.orders.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} orderId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrderStateTransition}
     */
    ordersOrderIdStateTransitionsPost(body, orderId) {
      return this.ordersOrderIdStateTransitionsPostWithHttpInfo(body, orderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Display a given transition - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.orders.r&#x60; or &#x60;mission_control.orders.rw&#x60;
     * @param {String} orderId 
     * @param {String} stateTransitionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrderStateTransition} and HTTP response
     */
    ordersOrderIdStateTransitionsStateTransitionIdGetWithHttpInfo(orderId, stateTransitionId) {
      
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdStateTransitionsStateTransitionIdGet");
      }
      // verify the required parameter 'stateTransitionId' is set
      if (stateTransitionId === undefined || stateTransitionId === null) {
        throw new Error("Missing the required parameter 'stateTransitionId' when calling ordersOrderIdStateTransitionsStateTransitionIdGet");
      }

      let pathParams = {
        'order_id': orderId,'state_transition_id': stateTransitionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderStateTransition;

      return this.apiClient.callApi(
        '/orders/{order_id}/state_transitions/{state_transition_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Display a given transition - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.orders.r&#x60; or &#x60;mission_control.orders.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} orderId 
     * @param {<&vendorExtensions.x-jsdoc-type>} stateTransitionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrderStateTransition}
     */
    ordersOrderIdStateTransitionsStateTransitionIdGet(orderId, stateTransitionId) {
      return this.ordersOrderIdStateTransitionsStateTransitionIdGetWithHttpInfo(orderId, stateTransitionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new order with the given properties. The order will be in state &#x60;draft&#x60; and can be modified as long as that is the case. You can also supply nested properties for line items and the address. DESC, update: &lt;&lt;-DESC.squish Modifies a specific order. Please note that changes are only possible while the order is in &#x60;draft&#x60; state. DESC, destroy: &lt;&lt;-DESC.squish Removes a specific order as long as it still is in &#x60;draft&#x60; state, otherwise the order is set to the &#x60;canceled&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/OrdersBody} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2012} and HTTP response
     */
    ordersPostWithHttpInfo(body) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ordersPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new order with the given properties. The order will be in state &#x60;draft&#x60; and can be modified as long as that is the case. You can also supply nested properties for line items and the address. DESC, update: &lt;&lt;-DESC.squish Modifies a specific order. Please note that changes are only possible while the order is in &#x60;draft&#x60; state. DESC, destroy: &lt;&lt;-DESC.squish Removes a specific order as long as it still is in &#x60;draft&#x60; state, otherwise the order is set to the &#x60;canceled&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2012}
     */
    ordersPost(body) {
      return this.ordersPostWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}