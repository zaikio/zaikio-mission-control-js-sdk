/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Estimate} from '../model/Estimate';
import {EstimateIdWorkstepEstimatesBody} from '../model/EstimateIdWorkstepEstimatesBody';
import {EstimatesEstimateIdBody} from '../model/EstimatesEstimateIdBody';
import {InlineResponse400} from '../model/InlineResponse400';
import {InlineResponse401} from '../model/InlineResponse401';
import {JobIdEstimatesBody} from '../model/JobIdEstimatesBody';
import {MaterialEstimate} from '../model/MaterialEstimate';
import {MaterialEstimatesMaterialEstimateIdBody} from '../model/MaterialEstimatesMaterialEstimateIdBody';
import {WorkstepEstimate} from '../model/WorkstepEstimate';
import {WorkstepEstimateIdMaterialEstimatesBody} from '../model/WorkstepEstimateIdMaterialEstimatesBody';
import {WorkstepEstimatesWorkstepEstimateIdBody} from '../model/WorkstepEstimatesWorkstepEstimateIdBody';

/**
* Business service.
* @module api/BusinessApi
* @version 1.0.0
*/
export class BusinessApi {

    /**
    * Constructs a new BusinessApi. 
    * @alias module:api/BusinessApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the estimatesEstimateIdDelete operation.
     * @callback moduleapi/BusinessApi~estimatesEstimateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a specific estimate, inclduing all of its workstep and material estimates. - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.estimates.w&#x60; or &#x60;mission_control.estimates.rw&#x60;
     * @param {String} estimateId 
     * @param {module:api/BusinessApi~estimatesEstimateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    estimatesEstimateIdDelete(estimateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'estimateId' is set
      if (estimateId === undefined || estimateId === null) {
        throw new Error("Missing the required parameter 'estimateId' when calling estimatesEstimateIdDelete");
      }

      let pathParams = {
        'estimate_id': estimateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/estimates/{estimate_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the estimatesEstimateIdGet operation.
     * @callback moduleapi/BusinessApi~estimatesEstimateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Estimate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific estimate, including its workstep estimates and material estimates. - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.estimates.r&#x60; or &#x60;mission_control.estimates.rw&#x60;
     * @param {String} estimateId 
     * @param {module:api/BusinessApi~estimatesEstimateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    estimatesEstimateIdGet(estimateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'estimateId' is set
      if (estimateId === undefined || estimateId === null) {
        throw new Error("Missing the required parameter 'estimateId' when calling estimatesEstimateIdGet");
      }

      let pathParams = {
        'estimate_id': estimateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Estimate;

      return this.apiClient.callApi(
        '/estimates/{estimate_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the estimatesEstimateIdPatch operation.
     * @callback moduleapi/BusinessApi~estimatesEstimateIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Estimate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a specific estimate. - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.estimates.w&#x60; or &#x60;mission_control.estimates.rw&#x60;
     * @param {module:model/EstimatesEstimateIdBody} body 
     * @param {String} estimateId 
     * @param {module:api/BusinessApi~estimatesEstimateIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    estimatesEstimateIdPatch(body, estimateId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling estimatesEstimateIdPatch");
      }
      // verify the required parameter 'estimateId' is set
      if (estimateId === undefined || estimateId === null) {
        throw new Error("Missing the required parameter 'estimateId' when calling estimatesEstimateIdPatch");
      }

      let pathParams = {
        'estimate_id': estimateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Estimate;

      return this.apiClient.callApi(
        '/estimates/{estimate_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the estimatesEstimateIdWorkstepEstimatesGet operation.
     * @callback moduleapi/BusinessApi~estimatesEstimateIdWorkstepEstimatesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkstepEstimate>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all workstep estimates for the given estimate. - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.estimates.r&#x60; or &#x60;mission_control.estimates.rw&#x60;
     * @param {String} estimateId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/BusinessApi~estimatesEstimateIdWorkstepEstimatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    estimatesEstimateIdWorkstepEstimatesGet(estimateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'estimateId' is set
      if (estimateId === undefined || estimateId === null) {
        throw new Error("Missing the required parameter 'estimateId' when calling estimatesEstimateIdWorkstepEstimatesGet");
      }

      let pathParams = {
        'estimate_id': estimateId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkstepEstimate];

      return this.apiClient.callApi(
        '/estimates/{estimate_id}/workstep_estimates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the estimatesEstimateIdWorkstepEstimatesPost operation.
     * @callback moduleapi/BusinessApi~estimatesEstimateIdWorkstepEstimatesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkstepEstimate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new workstep estimate for the given estimate. - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.estimates.w&#x60; or &#x60;mission_control.estimates.rw&#x60;
     * @param {module:model/EstimateIdWorkstepEstimatesBody} body 
     * @param {String} estimateId 
     * @param {module:api/BusinessApi~estimatesEstimateIdWorkstepEstimatesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    estimatesEstimateIdWorkstepEstimatesPost(body, estimateId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling estimatesEstimateIdWorkstepEstimatesPost");
      }
      // verify the required parameter 'estimateId' is set
      if (estimateId === undefined || estimateId === null) {
        throw new Error("Missing the required parameter 'estimateId' when calling estimatesEstimateIdWorkstepEstimatesPost");
      }

      let pathParams = {
        'estimate_id': estimateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkstepEstimate;

      return this.apiClient.callApi(
        '/estimates/{estimate_id}/workstep_estimates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdEstimatesGet operation.
     * @callback moduleapi/BusinessApi~jobsJobIdEstimatesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Estimate>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all estimates of a specific job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.estimates.r&#x60; or &#x60;mission_control.estimates.rw&#x60;
     * @param {String} jobId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/BusinessApi~jobsJobIdEstimatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdEstimatesGet(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdEstimatesGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Estimate];

      return this.apiClient.callApi(
        '/jobs/{job_id}/estimates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdEstimatesPost operation.
     * @callback moduleapi/BusinessApi~jobsJobIdEstimatesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Estimate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new estimate for the specified job. - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.estimates.w&#x60; or &#x60;mission_control.estimates.rw&#x60;
     * @param {module:model/JobIdEstimatesBody} body 
     * @param {String} jobId 
     * @param {module:api/BusinessApi~jobsJobIdEstimatesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdEstimatesPost(body, jobId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdEstimatesPost");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdEstimatesPost");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Estimate;

      return this.apiClient.callApi(
        '/jobs/{job_id}/estimates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the materialEstimatesMaterialEstimateIdDelete operation.
     * @callback moduleapi/BusinessApi~materialEstimatesMaterialEstimateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.estimates.w&#x60; or &#x60;mission_control.estimates.rw&#x60;
     * @param {String} materialEstimateId 
     * @param {module:api/BusinessApi~materialEstimatesMaterialEstimateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    materialEstimatesMaterialEstimateIdDelete(materialEstimateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'materialEstimateId' is set
      if (materialEstimateId === undefined || materialEstimateId === null) {
        throw new Error("Missing the required parameter 'materialEstimateId' when calling materialEstimatesMaterialEstimateIdDelete");
      }

      let pathParams = {
        'material_estimate_id': materialEstimateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/material_estimates/{material_estimate_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the materialEstimatesMaterialEstimateIdGet operation.
     * @callback moduleapi/BusinessApi~materialEstimatesMaterialEstimateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MaterialEstimate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.estimates.r&#x60; or &#x60;mission_control.estimates.rw&#x60;
     * @param {String} materialEstimateId 
     * @param {module:api/BusinessApi~materialEstimatesMaterialEstimateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    materialEstimatesMaterialEstimateIdGet(materialEstimateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'materialEstimateId' is set
      if (materialEstimateId === undefined || materialEstimateId === null) {
        throw new Error("Missing the required parameter 'materialEstimateId' when calling materialEstimatesMaterialEstimateIdGet");
      }

      let pathParams = {
        'material_estimate_id': materialEstimateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MaterialEstimate;

      return this.apiClient.callApi(
        '/material_estimates/{material_estimate_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the materialEstimatesMaterialEstimateIdPatch operation.
     * @callback moduleapi/BusinessApi~materialEstimatesMaterialEstimateIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MaterialEstimate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.estimates.w&#x60; or &#x60;mission_control.estimates.rw&#x60;
     * @param {module:model/MaterialEstimatesMaterialEstimateIdBody} body 
     * @param {String} materialEstimateId 
     * @param {module:api/BusinessApi~materialEstimatesMaterialEstimateIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    materialEstimatesMaterialEstimateIdPatch(body, materialEstimateId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling materialEstimatesMaterialEstimateIdPatch");
      }
      // verify the required parameter 'materialEstimateId' is set
      if (materialEstimateId === undefined || materialEstimateId === null) {
        throw new Error("Missing the required parameter 'materialEstimateId' when calling materialEstimatesMaterialEstimateIdPatch");
      }

      let pathParams = {
        'material_estimate_id': materialEstimateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MaterialEstimate;

      return this.apiClient.callApi(
        '/material_estimates/{material_estimate_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workstepEstimatesWorkstepEstimateIdDelete operation.
     * @callback moduleapi/BusinessApi~workstepEstimatesWorkstepEstimateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.estimates.w&#x60; or &#x60;mission_control.estimates.rw&#x60;
     * @param {String} workstepEstimateId 
     * @param {module:api/BusinessApi~workstepEstimatesWorkstepEstimateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workstepEstimatesWorkstepEstimateIdDelete(workstepEstimateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'workstepEstimateId' is set
      if (workstepEstimateId === undefined || workstepEstimateId === null) {
        throw new Error("Missing the required parameter 'workstepEstimateId' when calling workstepEstimatesWorkstepEstimateIdDelete");
      }

      let pathParams = {
        'workstep_estimate_id': workstepEstimateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/workstep_estimates/{workstep_estimate_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workstepEstimatesWorkstepEstimateIdGet operation.
     * @callback moduleapi/BusinessApi~workstepEstimatesWorkstepEstimateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkstepEstimate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.estimates.r&#x60; or &#x60;mission_control.estimates.rw&#x60;
     * @param {String} workstepEstimateId 
     * @param {module:api/BusinessApi~workstepEstimatesWorkstepEstimateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workstepEstimatesWorkstepEstimateIdGet(workstepEstimateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'workstepEstimateId' is set
      if (workstepEstimateId === undefined || workstepEstimateId === null) {
        throw new Error("Missing the required parameter 'workstepEstimateId' when calling workstepEstimatesWorkstepEstimateIdGet");
      }

      let pathParams = {
        'workstep_estimate_id': workstepEstimateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkstepEstimate;

      return this.apiClient.callApi(
        '/workstep_estimates/{workstep_estimate_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workstepEstimatesWorkstepEstimateIdMaterialEstimatesGet operation.
     * @callback moduleapi/BusinessApi~workstepEstimatesWorkstepEstimateIdMaterialEstimatesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MaterialEstimate>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.estimates.r&#x60; or &#x60;mission_control.estimates.rw&#x60;
     * @param {String} workstepEstimateId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/BusinessApi~workstepEstimatesWorkstepEstimateIdMaterialEstimatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workstepEstimatesWorkstepEstimateIdMaterialEstimatesGet(workstepEstimateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workstepEstimateId' is set
      if (workstepEstimateId === undefined || workstepEstimateId === null) {
        throw new Error("Missing the required parameter 'workstepEstimateId' when calling workstepEstimatesWorkstepEstimateIdMaterialEstimatesGet");
      }

      let pathParams = {
        'workstep_estimate_id': workstepEstimateId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MaterialEstimate];

      return this.apiClient.callApi(
        '/workstep_estimates/{workstep_estimate_id}/material_estimates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workstepEstimatesWorkstepEstimateIdMaterialEstimatesPost operation.
     * @callback moduleapi/BusinessApi~workstepEstimatesWorkstepEstimateIdMaterialEstimatesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MaterialEstimate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.estimates.w&#x60; or &#x60;mission_control.estimates.rw&#x60;
     * @param {module:model/WorkstepEstimateIdMaterialEstimatesBody} body 
     * @param {String} workstepEstimateId 
     * @param {module:api/BusinessApi~workstepEstimatesWorkstepEstimateIdMaterialEstimatesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workstepEstimatesWorkstepEstimateIdMaterialEstimatesPost(body, workstepEstimateId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workstepEstimatesWorkstepEstimateIdMaterialEstimatesPost");
      }
      // verify the required parameter 'workstepEstimateId' is set
      if (workstepEstimateId === undefined || workstepEstimateId === null) {
        throw new Error("Missing the required parameter 'workstepEstimateId' when calling workstepEstimatesWorkstepEstimateIdMaterialEstimatesPost");
      }

      let pathParams = {
        'workstep_estimate_id': workstepEstimateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MaterialEstimate;

      return this.apiClient.callApi(
        '/workstep_estimates/{workstep_estimate_id}/material_estimates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workstepEstimatesWorkstepEstimateIdPatch operation.
     * @callback moduleapi/BusinessApi~workstepEstimatesWorkstepEstimateIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkstepEstimate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.estimates.w&#x60; or &#x60;mission_control.estimates.rw&#x60;
     * @param {module:model/WorkstepEstimatesWorkstepEstimateIdBody} body 
     * @param {String} workstepEstimateId 
     * @param {module:api/BusinessApi~workstepEstimatesWorkstepEstimateIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workstepEstimatesWorkstepEstimateIdPatch(body, workstepEstimateId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workstepEstimatesWorkstepEstimateIdPatch");
      }
      // verify the required parameter 'workstepEstimateId' is set
      if (workstepEstimateId === undefined || workstepEstimateId === null) {
        throw new Error("Missing the required parameter 'workstepEstimateId' when calling workstepEstimatesWorkstepEstimateIdPatch");
      }

      let pathParams = {
        'workstep_estimate_id': workstepEstimateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkstepEstimate;

      return this.apiClient.callApi(
        '/workstep_estimates/{workstep_estimate_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}