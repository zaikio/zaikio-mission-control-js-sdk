/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Address} from '../model/Address';
import {Commissioning} from '../model/Commissioning';
import {CommissioningIdPickupsBody} from '../model/CommissioningIdPickupsBody';
import {CommissioningIdShipmentsBody} from '../model/CommissioningIdShipmentsBody';
import {CommissioningsBody} from '../model/CommissioningsBody';
import {CommissioningsCommissioningIdBody} from '../model/CommissioningsCommissioningIdBody';
import {InlineResponse2013} from '../model/InlineResponse2013';
import {InlineResponse400} from '../model/InlineResponse400';
import {InlineResponse401} from '../model/InlineResponse401';
import {Pickup} from '../model/Pickup';
import {PickupsPickupIdBody} from '../model/PickupsPickupIdBody';
import {Shipment} from '../model/Shipment';
import {ShipmentIdAddressBody} from '../model/ShipmentIdAddressBody';
import {ShipmentIdAddressBody1} from '../model/ShipmentIdAddressBody1';
import {ShipmentsShipmentIdBody} from '../model/ShipmentsShipmentIdBody';

/**
* Logistics service.
* @module api/LogisticsApi
* @version 1.0.0
*/
export class LogisticsApi {

    /**
    * Constructs a new LogisticsApi. 
    * @alias module:api/LogisticsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Removes a commissioning. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission-control.commissionings.w&#x60;
     * @param {String} commissioningId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    commissioningsCommissioningIdDeleteWithHttpInfo(commissioningId) {
      
      let postBody = null;
      // verify the required parameter 'commissioningId' is set
      if (commissioningId === undefined || commissioningId === null) {
        throw new Error("Missing the required parameter 'commissioningId' when calling commissioningsCommissioningIdDelete");
      }

      let pathParams = {
        'commissioning_id': commissioningId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/commissionings/{commissioning_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a commissioning. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission-control.commissionings.w&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} commissioningId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    commissioningsCommissioningIdDelete(commissioningId) {
      return this.commissioningsCommissioningIdDeleteWithHttpInfo(commissioningId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a specific commissioning. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission-control.commissionings.r&#x60;
     * @param {String} commissioningId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Commissioning} and HTTP response
     */
    commissioningsCommissioningIdGetWithHttpInfo(commissioningId) {
      
      let postBody = null;
      // verify the required parameter 'commissioningId' is set
      if (commissioningId === undefined || commissioningId === null) {
        throw new Error("Missing the required parameter 'commissioningId' when calling commissioningsCommissioningIdGet");
      }

      let pathParams = {
        'commissioning_id': commissioningId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Commissioning;

      return this.apiClient.callApi(
        '/commissionings/{commissioning_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a specific commissioning. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission-control.commissionings.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} commissioningId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Commissioning}
     */
    commissioningsCommissioningIdGet(commissioningId) {
      return this.commissioningsCommissioningIdGetWithHttpInfo(commissioningId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modifies a commissioning. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission-control.commissionings.w&#x60;
     * @param {module:model/CommissioningsCommissioningIdBody} body 
     * @param {String} commissioningId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Commissioning} and HTTP response
     */
    commissioningsCommissioningIdPatchWithHttpInfo(body, commissioningId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling commissioningsCommissioningIdPatch");
      }
      // verify the required parameter 'commissioningId' is set
      if (commissioningId === undefined || commissioningId === null) {
        throw new Error("Missing the required parameter 'commissioningId' when calling commissioningsCommissioningIdPatch");
      }

      let pathParams = {
        'commissioning_id': commissioningId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Commissioning;

      return this.apiClient.callApi(
        '/commissionings/{commissioning_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modifies a commissioning. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission-control.commissionings.w&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} commissioningId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Commissioning}
     */
    commissioningsCommissioningIdPatch(body, commissioningId) {
      return this.commissioningsCommissioningIdPatchWithHttpInfo(body, commissioningId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all pickups of a commissioning. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission-control.commissionings.r&#x60;
     * @param {String} commissioningId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Pickup>} and HTTP response
     */
    commissioningsCommissioningIdPickupsGetWithHttpInfo(commissioningId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'commissioningId' is set
      if (commissioningId === undefined || commissioningId === null) {
        throw new Error("Missing the required parameter 'commissioningId' when calling commissioningsCommissioningIdPickupsGet");
      }

      let pathParams = {
        'commissioning_id': commissioningId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Pickup];

      return this.apiClient.callApi(
        '/commissionings/{commissioning_id}/pickups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all pickups of a commissioning. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission-control.commissionings.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} commissioningId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Pickup>}
     */
    commissioningsCommissioningIdPickupsGet(commissioningId, opts) {
      return this.commissioningsCommissioningIdPickupsGetWithHttpInfo(commissioningId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a pickup. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/CommissioningIdPickupsBody} body 
     * @param {String} commissioningId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Pickup} and HTTP response
     */
    commissioningsCommissioningIdPickupsPostWithHttpInfo(body, commissioningId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling commissioningsCommissioningIdPickupsPost");
      }
      // verify the required parameter 'commissioningId' is set
      if (commissioningId === undefined || commissioningId === null) {
        throw new Error("Missing the required parameter 'commissioningId' when calling commissioningsCommissioningIdPickupsPost");
      }

      let pathParams = {
        'commissioning_id': commissioningId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pickup;

      return this.apiClient.callApi(
        '/commissionings/{commissioning_id}/pickups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a pickup. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} commissioningId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Pickup}
     */
    commissioningsCommissioningIdPickupsPost(body, commissioningId) {
      return this.commissioningsCommissioningIdPickupsPostWithHttpInfo(body, commissioningId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all shipments of a commissioning. - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission-control.commissionings.r&#x60;
     * @param {String} commissioningId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Shipment>} and HTTP response
     */
    commissioningsCommissioningIdShipmentsGetWithHttpInfo(commissioningId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'commissioningId' is set
      if (commissioningId === undefined || commissioningId === null) {
        throw new Error("Missing the required parameter 'commissioningId' when calling commissioningsCommissioningIdShipmentsGet");
      }

      let pathParams = {
        'commissioning_id': commissioningId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Shipment];

      return this.apiClient.callApi(
        '/commissionings/{commissioning_id}/shipments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all shipments of a commissioning. - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission-control.commissionings.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} commissioningId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Shipment>}
     */
    commissioningsCommissioningIdShipmentsGet(commissioningId, opts) {
      return this.commissioningsCommissioningIdShipmentsGetWithHttpInfo(commissioningId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a shipment. - needed bearer: &#x60;Organization&#x60; - needed scopes: 
     * @param {module:model/CommissioningIdShipmentsBody} body 
     * @param {String} commissioningId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2013} and HTTP response
     */
    commissioningsCommissioningIdShipmentsPostWithHttpInfo(body, commissioningId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling commissioningsCommissioningIdShipmentsPost");
      }
      // verify the required parameter 'commissioningId' is set
      if (commissioningId === undefined || commissioningId === null) {
        throw new Error("Missing the required parameter 'commissioningId' when calling commissioningsCommissioningIdShipmentsPost");
      }

      let pathParams = {
        'commissioning_id': commissioningId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/commissionings/{commissioning_id}/shipments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a shipment. - needed bearer: &#x60;Organization&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} commissioningId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2013}
     */
    commissioningsCommissioningIdShipmentsPost(body, commissioningId) {
      return this.commissioningsCommissioningIdShipmentsPostWithHttpInfo(body, commissioningId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all commissionings. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission-control.commissionings.r&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Commissioning>} and HTTP response
     */
    commissioningsGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Commissioning];

      return this.apiClient.callApi(
        '/commissionings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all commissionings. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission-control.commissionings.r&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Commissioning>}
     */
    commissioningsGet(opts) {
      return this.commissioningsGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a commissioning. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission-control.commissionings.w&#x60;
     * @param {module:model/CommissioningsBody} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Commissioning} and HTTP response
     */
    commissioningsPostWithHttpInfo(body) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling commissioningsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Commissioning;

      return this.apiClient.callApi(
        '/commissionings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a commissioning. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission-control.commissionings.w&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Commissioning}
     */
    commissioningsPost(body) {
      return this.commissioningsPostWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a pickup. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} pickupId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    pickupsPickupIdDeleteWithHttpInfo(pickupId) {
      
      let postBody = null;
      // verify the required parameter 'pickupId' is set
      if (pickupId === undefined || pickupId === null) {
        throw new Error("Missing the required parameter 'pickupId' when calling pickupsPickupIdDelete");
      }

      let pathParams = {
        'pickup_id': pickupId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/pickups/{pickup_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a pickup. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} pickupId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    pickupsPickupIdDelete(pickupId) {
      return this.pickupsPickupIdDeleteWithHttpInfo(pickupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a specific pickup. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission-control.commissionings.r&#x60;
     * @param {String} pickupId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Pickup} and HTTP response
     */
    pickupsPickupIdGetWithHttpInfo(pickupId) {
      
      let postBody = null;
      // verify the required parameter 'pickupId' is set
      if (pickupId === undefined || pickupId === null) {
        throw new Error("Missing the required parameter 'pickupId' when calling pickupsPickupIdGet");
      }

      let pathParams = {
        'pickup_id': pickupId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pickup;

      return this.apiClient.callApi(
        '/pickups/{pickup_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a specific pickup. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission-control.commissionings.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} pickupId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Pickup}
     */
    pickupsPickupIdGet(pickupId) {
      return this.pickupsPickupIdGetWithHttpInfo(pickupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modifies pickup. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/PickupsPickupIdBody} body 
     * @param {String} pickupId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Pickup} and HTTP response
     */
    pickupsPickupIdPatchWithHttpInfo(body, pickupId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pickupsPickupIdPatch");
      }
      // verify the required parameter 'pickupId' is set
      if (pickupId === undefined || pickupId === null) {
        throw new Error("Missing the required parameter 'pickupId' when calling pickupsPickupIdPatch");
      }

      let pathParams = {
        'pickup_id': pickupId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pickup;

      return this.apiClient.callApi(
        '/pickups/{pickup_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modifies pickup. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} pickupId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Pickup}
     */
    pickupsPickupIdPatch(body, pickupId) {
      return this.pickupsPickupIdPatchWithHttpInfo(body, pickupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes the address from a specific shipment as long as the shipment is in                             a &#x60;waiting_for_commission&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {String} shipmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    shipmentsShipmentIdAddressDeleteWithHttpInfo(shipmentId) {
      
      let postBody = null;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling shipmentsShipmentIdAddressDelete");
      }

      let pathParams = {
        'shipment_id': shipmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/shipments/{shipment_id}/address', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes the address from a specific shipment as long as the shipment is in                             a &#x60;waiting_for_commission&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} shipmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    shipmentsShipmentIdAddressDelete(shipmentId) {
      return this.shipmentsShipmentIdAddressDeleteWithHttpInfo(shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the address for this shipment. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission-control.commissionings.r&#x60;
     * @param {String} shipmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Address} and HTTP response
     */
    shipmentsShipmentIdAddressGetWithHttpInfo(shipmentId) {
      
      let postBody = null;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling shipmentsShipmentIdAddressGet");
      }

      let pathParams = {
        'shipment_id': shipmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Address;

      return this.apiClient.callApi(
        '/shipments/{shipment_id}/address', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the address for this shipment. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission-control.commissionings.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} shipmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Address}
     */
    shipmentsShipmentIdAddressGet(shipmentId) {
      return this.shipmentsShipmentIdAddressGetWithHttpInfo(shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modifies the address from a specific shipment as long as                           the shipment is still in a &#x60;waiting_for_commission&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/ShipmentIdAddressBody1} body 
     * @param {String} shipmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Address} and HTTP response
     */
    shipmentsShipmentIdAddressPatchWithHttpInfo(body, shipmentId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling shipmentsShipmentIdAddressPatch");
      }
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling shipmentsShipmentIdAddressPatch");
      }

      let pathParams = {
        'shipment_id': shipmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Address;

      return this.apiClient.callApi(
        '/shipments/{shipment_id}/address', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modifies the address from a specific shipment as long as                           the shipment is still in a &#x60;waiting_for_commission&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} shipmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Address}
     */
    shipmentsShipmentIdAddressPatch(body, shipmentId) {
      return this.shipmentsShipmentIdAddressPatchWithHttpInfo(body, shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates new address. If an address is already present, it will be overwritten.                           Creating an address is only possible as long as the shipment is in                           a &#x60;waiting_for_commission&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {module:model/ShipmentIdAddressBody} body 
     * @param {String} shipmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Address} and HTTP response
     */
    shipmentsShipmentIdAddressPostWithHttpInfo(body, shipmentId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling shipmentsShipmentIdAddressPost");
      }
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling shipmentsShipmentIdAddressPost");
      }

      let pathParams = {
        'shipment_id': shipmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Address;

      return this.apiClient.callApi(
        '/shipments/{shipment_id}/address', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates new address. If an address is already present, it will be overwritten.                           Creating an address is only possible as long as the shipment is in                           a &#x60;waiting_for_commission&#x60; state. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} shipmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Address}
     */
    shipmentsShipmentIdAddressPost(body, shipmentId) {
      return this.shipmentsShipmentIdAddressPostWithHttpInfo(body, shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a shipment. - needed bearer: &#x60;Organization&#x60; - needed scopes: 
     * @param {String} shipmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    shipmentsShipmentIdDeleteWithHttpInfo(shipmentId) {
      
      let postBody = null;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling shipmentsShipmentIdDelete");
      }

      let pathParams = {
        'shipment_id': shipmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/shipments/{shipment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a shipment. - needed bearer: &#x60;Organization&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} shipmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    shipmentsShipmentIdDelete(shipmentId) {
      return this.shipmentsShipmentIdDeleteWithHttpInfo(shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a specific shipment. - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission-control.commissionings.r&#x60;
     * @param {String} shipmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2013} and HTTP response
     */
    shipmentsShipmentIdGetWithHttpInfo(shipmentId) {
      
      let postBody = null;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling shipmentsShipmentIdGet");
      }

      let pathParams = {
        'shipment_id': shipmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/shipments/{shipment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a specific shipment. - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission-control.commissionings.r&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} shipmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2013}
     */
    shipmentsShipmentIdGet(shipmentId) {
      return this.shipmentsShipmentIdGetWithHttpInfo(shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modifies a shipment. - needed bearer: &#x60;Organization&#x60; - needed scopes: 
     * @param {module:model/ShipmentsShipmentIdBody} body 
     * @param {String} shipmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2013} and HTTP response
     */
    shipmentsShipmentIdPatchWithHttpInfo(body, shipmentId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling shipmentsShipmentIdPatch");
      }
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling shipmentsShipmentIdPatch");
      }

      let pathParams = {
        'shipment_id': shipmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/shipments/{shipment_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modifies a shipment. - needed bearer: &#x60;Organization&#x60; - needed scopes: 
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} shipmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2013}
     */
    shipmentsShipmentIdPatch(body, shipmentId) {
      return this.shipmentsShipmentIdPatchWithHttpInfo(body, shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}