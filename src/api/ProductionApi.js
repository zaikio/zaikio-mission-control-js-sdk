/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Batch} from '../model/Batch';
import {BatchesBatchIdBody} from '../model/BatchesBatchIdBody';
import {BatchesBody} from '../model/BatchesBody';
import {Imposing} from '../model/Imposing';
import {ImposingIdSignaturesBody} from '../model/ImposingIdSignaturesBody';
import {ImposingsImposingIdBody} from '../model/ImposingsImposingIdBody';
import {InlineResponse201} from '../model/InlineResponse201';
import {InlineResponse2011} from '../model/InlineResponse2011';
import {InlineResponse400} from '../model/InlineResponse400';
import {InlineResponse401} from '../model/InlineResponse401';
import {IntermediateProduct} from '../model/IntermediateProduct';
import {IntermediateProductsIntermediateProductIdBody} from '../model/IntermediateProductsIntermediateProductIdBody';
import {JobIdIntermediateProductsBody} from '../model/JobIdIntermediateProductsBody';
import {JobIdProductionStrategiesBody} from '../model/JobIdProductionStrategiesBody';
import {JobIdTodosBody} from '../model/JobIdTodosBody';
import {ProductionPathsBody} from '../model/ProductionPathsBody';
import {ProductionStrategiesProductionStrategyIdBody} from '../model/ProductionStrategiesProductionStrategyIdBody';
import {ProductionStrategy} from '../model/ProductionStrategy';
import {ProductionStrategyIdImposingsBody} from '../model/ProductionStrategyIdImposingsBody';
import {Signature} from '../model/Signature';
import {SignaturesSignatureIdBody} from '../model/SignaturesSignatureIdBody';
import {Todo} from '../model/Todo';
import {TodosTodoIdBody} from '../model/TodosTodoIdBody';
import {Workstep} from '../model/Workstep';
import {WorkstepGroup} from '../model/WorkstepGroup';
import {WorkstepGroupsBody} from '../model/WorkstepGroupsBody';
import {WorkstepGroupsWorkstepGroupIdBody} from '../model/WorkstepGroupsWorkstepGroupIdBody';
import {WorkstepsBody} from '../model/WorkstepsBody';
import {WorkstepsWorkstepIdBody} from '../model/WorkstepsWorkstepIdBody';

/**
* Production service.
* @module api/ProductionApi
* @version 1.0.0
*/
export class ProductionApi {

    /**
    * Constructs a new ProductionApi. 
    * @alias module:api/ProductionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Remove a Batch. This will remove all associated linked Production resources too - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.production.w&#x60; or &#x60;mission_control.production.rw&#x60;
     * @param {String} batchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    batchesBatchIdDeleteWithHttpInfo(batchId) {
      
      let postBody = null;
      // verify the required parameter 'batchId' is set
      if (batchId === undefined || batchId === null) {
        throw new Error("Missing the required parameter 'batchId' when calling batchesBatchIdDelete");
      }

      let pathParams = {
        'batch_id': batchId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/batches/{batch_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a Batch. This will remove all associated linked Production resources too - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.production.w&#x60; or &#x60;mission_control.production.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} batchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    batchesBatchIdDelete(batchId) {
      return this.batchesBatchIdDeleteWithHttpInfo(batchId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return in depth information about a single Batch - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.production.r&#x60; or &#x60;mission_control.production.rw&#x60;
     * @param {String} batchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Batch} and HTTP response
     */
    batchesBatchIdGetWithHttpInfo(batchId) {
      
      let postBody = null;
      // verify the required parameter 'batchId' is set
      if (batchId === undefined || batchId === null) {
        throw new Error("Missing the required parameter 'batchId' when calling batchesBatchIdGet");
      }

      let pathParams = {
        'batch_id': batchId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Batch;

      return this.apiClient.callApi(
        '/batches/{batch_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return in depth information about a single Batch - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.production.r&#x60; or &#x60;mission_control.production.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} batchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Batch}
     */
    batchesBatchIdGet(batchId) {
      return this.batchesBatchIdGetWithHttpInfo(batchId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the details of a Batch - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.production.w&#x60; or &#x60;mission_control.production.rw&#x60;
     * @param {module:model/BatchesBatchIdBody} body 
     * @param {String} batchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Batch} and HTTP response
     */
    batchesBatchIdPatchWithHttpInfo(body, batchId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling batchesBatchIdPatch");
      }
      // verify the required parameter 'batchId' is set
      if (batchId === undefined || batchId === null) {
        throw new Error("Missing the required parameter 'batchId' when calling batchesBatchIdPatch");
      }

      let pathParams = {
        'batch_id': batchId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Batch;

      return this.apiClient.callApi(
        '/batches/{batch_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update the details of a Batch - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.production.w&#x60; or &#x60;mission_control.production.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} batchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Batch}
     */
    batchesBatchIdPatch(body, batchId) {
      return this.batchesBatchIdPatchWithHttpInfo(body, batchId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return all Batches for the current caller - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.production.r&#x60; or &#x60;mission_control.production.rw&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Batch>} and HTTP response
     */
    batchesGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Batch];

      return this.apiClient.callApi(
        '/batches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return all Batches for the current caller - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.production.r&#x60; or &#x60;mission_control.production.rw&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Batch>}
     */
    batchesGet(opts) {
      return this.batchesGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new Batch for producing multiple Parts together - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.production.w&#x60; or &#x60;mission_control.production.rw&#x60;
     * @param {module:model/BatchesBody} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Batch} and HTTP response
     */
    batchesPostWithHttpInfo(body) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling batchesPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Batch;

      return this.apiClient.callApi(
        '/batches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new Batch for producing multiple Parts together - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.production.w&#x60; or &#x60;mission_control.production.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Batch}
     */
    batchesPost(body) {
      return this.batchesPostWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove an Imposing from the ProductionStrategy - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} imposingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    imposingsImposingIdDeleteWithHttpInfo(imposingId) {
      
      let postBody = null;
      // verify the required parameter 'imposingId' is set
      if (imposingId === undefined || imposingId === null) {
        throw new Error("Missing the required parameter 'imposingId' when calling imposingsImposingIdDelete");
      }

      let pathParams = {
        'imposing_id': imposingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/imposings/{imposing_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove an Imposing from the ProductionStrategy - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} imposingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    imposingsImposingIdDelete(imposingId) {
      return this.imposingsImposingIdDeleteWithHttpInfo(imposingId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show the full details of a given Imposing including all Signatures - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} imposingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Imposing} and HTTP response
     */
    imposingsImposingIdGetWithHttpInfo(imposingId) {
      
      let postBody = null;
      // verify the required parameter 'imposingId' is set
      if (imposingId === undefined || imposingId === null) {
        throw new Error("Missing the required parameter 'imposingId' when calling imposingsImposingIdGet");
      }

      let pathParams = {
        'imposing_id': imposingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Imposing;

      return this.apiClient.callApi(
        '/imposings/{imposing_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show the full details of a given Imposing including all Signatures - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} imposingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Imposing}
     */
    imposingsImposingIdGet(imposingId) {
      return this.imposingsImposingIdGetWithHttpInfo(imposingId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an Imposing - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/ImposingsImposingIdBody} body 
     * @param {String} imposingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Imposing} and HTTP response
     */
    imposingsImposingIdPatchWithHttpInfo(body, imposingId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling imposingsImposingIdPatch");
      }
      // verify the required parameter 'imposingId' is set
      if (imposingId === undefined || imposingId === null) {
        throw new Error("Missing the required parameter 'imposingId' when calling imposingsImposingIdPatch");
      }

      let pathParams = {
        'imposing_id': imposingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Imposing;

      return this.apiClient.callApi(
        '/imposings/{imposing_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an Imposing - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} imposingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Imposing}
     */
    imposingsImposingIdPatch(body, imposingId) {
      return this.imposingsImposingIdPatchWithHttpInfo(body, imposingId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Signatures for provided Imposings - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} imposingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Signature>} and HTTP response
     */
    imposingsImposingIdSignaturesGetWithHttpInfo(imposingId) {
      
      let postBody = null;
      // verify the required parameter 'imposingId' is set
      if (imposingId === undefined || imposingId === null) {
        throw new Error("Missing the required parameter 'imposingId' when calling imposingsImposingIdSignaturesGet");
      }

      let pathParams = {
        'imposing_id': imposingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Signature];

      return this.apiClient.callApi(
        '/imposings/{imposing_id}/signatures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Signatures for provided Imposings - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} imposingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Signature>}
     */
    imposingsImposingIdSignaturesGet(imposingId) {
      return this.imposingsImposingIdSignaturesGetWithHttpInfo(imposingId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new Signature for the provided Imposing - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/ImposingIdSignaturesBody} body 
     * @param {String} imposingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Signature} and HTTP response
     */
    imposingsImposingIdSignaturesPostWithHttpInfo(body, imposingId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling imposingsImposingIdSignaturesPost");
      }
      // verify the required parameter 'imposingId' is set
      if (imposingId === undefined || imposingId === null) {
        throw new Error("Missing the required parameter 'imposingId' when calling imposingsImposingIdSignaturesPost");
      }

      let pathParams = {
        'imposing_id': imposingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Signature;

      return this.apiClient.callApi(
        '/imposings/{imposing_id}/signatures', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new Signature for the provided Imposing - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} imposingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Signature}
     */
    imposingsImposingIdSignaturesPost(body, imposingId) {
      return this.imposingsImposingIdSignaturesPostWithHttpInfo(body, imposingId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove an IntermediateProduct - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} intermediateProductId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    intermediateProductsIntermediateProductIdDeleteWithHttpInfo(intermediateProductId) {
      
      let postBody = null;
      // verify the required parameter 'intermediateProductId' is set
      if (intermediateProductId === undefined || intermediateProductId === null) {
        throw new Error("Missing the required parameter 'intermediateProductId' when calling intermediateProductsIntermediateProductIdDelete");
      }

      let pathParams = {
        'intermediate_product_id': intermediateProductId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/intermediate_products/{intermediate_product_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove an IntermediateProduct - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} intermediateProductId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    intermediateProductsIntermediateProductIdDelete(intermediateProductId) {
      return this.intermediateProductsIntermediateProductIdDeleteWithHttpInfo(intermediateProductId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show the full details of an IntermediateProduct - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} intermediateProductId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntermediateProduct} and HTTP response
     */
    intermediateProductsIntermediateProductIdGetWithHttpInfo(intermediateProductId) {
      
      let postBody = null;
      // verify the required parameter 'intermediateProductId' is set
      if (intermediateProductId === undefined || intermediateProductId === null) {
        throw new Error("Missing the required parameter 'intermediateProductId' when calling intermediateProductsIntermediateProductIdGet");
      }

      let pathParams = {
        'intermediate_product_id': intermediateProductId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntermediateProduct;

      return this.apiClient.callApi(
        '/intermediate_products/{intermediate_product_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show the full details of an IntermediateProduct - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} intermediateProductId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntermediateProduct}
     */
    intermediateProductsIntermediateProductIdGet(intermediateProductId) {
      return this.intermediateProductsIntermediateProductIdGetWithHttpInfo(intermediateProductId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an IntermediateProduct with the provided params - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/IntermediateProductsIntermediateProductIdBody} body 
     * @param {String} intermediateProductId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntermediateProduct} and HTTP response
     */
    intermediateProductsIntermediateProductIdPatchWithHttpInfo(body, intermediateProductId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling intermediateProductsIntermediateProductIdPatch");
      }
      // verify the required parameter 'intermediateProductId' is set
      if (intermediateProductId === undefined || intermediateProductId === null) {
        throw new Error("Missing the required parameter 'intermediateProductId' when calling intermediateProductsIntermediateProductIdPatch");
      }

      let pathParams = {
        'intermediate_product_id': intermediateProductId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntermediateProduct;

      return this.apiClient.callApi(
        '/intermediate_products/{intermediate_product_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an IntermediateProduct with the provided params - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} intermediateProductId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntermediateProduct}
     */
    intermediateProductsIntermediateProductIdPatch(body, intermediateProductId) {
      return this.intermediateProductsIntermediateProductIdPatchWithHttpInfo(body, intermediateProductId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all available IntermediateProducts for a given Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} jobId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/IntermediateProduct>} and HTTP response
     */
    jobsJobIdIntermediateProductsGetWithHttpInfo(jobId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdIntermediateProductsGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IntermediateProduct];

      return this.apiClient.callApi(
        '/jobs/{job_id}/intermediate_products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List all available IntermediateProducts for a given Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/IntermediateProduct>}
     */
    jobsJobIdIntermediateProductsGet(jobId, opts) {
      return this.jobsJobIdIntermediateProductsGetWithHttpInfo(jobId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new IntermediateProduct for a Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/JobIdIntermediateProductsBody} body 
     * @param {String} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntermediateProduct} and HTTP response
     */
    jobsJobIdIntermediateProductsPostWithHttpInfo(body, jobId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdIntermediateProductsPost");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdIntermediateProductsPost");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntermediateProduct;

      return this.apiClient.callApi(
        '/jobs/{job_id}/intermediate_products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new IntermediateProduct for a Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntermediateProduct}
     */
    jobsJobIdIntermediateProductsPost(body, jobId) {
      return this.jobsJobIdIntermediateProductsPostWithHttpInfo(body, jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ProductionStrategies for the provided job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ProductionStrategy>} and HTTP response
     */
    jobsJobIdProductionStrategiesGetWithHttpInfo(jobId) {
      
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdProductionStrategiesGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProductionStrategy];

      return this.apiClient.callApi(
        '/jobs/{job_id}/production_strategies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ProductionStrategies for the provided job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ProductionStrategy>}
     */
    jobsJobIdProductionStrategiesGet(jobId) {
      return this.jobsJobIdProductionStrategiesGetWithHttpInfo(jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new ProductionStrategy for the provided job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/JobIdProductionStrategiesBody} body 
     * @param {String} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2011} and HTTP response
     */
    jobsJobIdProductionStrategiesPostWithHttpInfo(body, jobId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdProductionStrategiesPost");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdProductionStrategiesPost");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/jobs/{job_id}/production_strategies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new ProductionStrategy for the provided job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2011}
     */
    jobsJobIdProductionStrategiesPost(body, jobId) {
      return this.jobsJobIdProductionStrategiesPostWithHttpInfo(body, jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all todos for this Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} jobId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Todo>} and HTTP response
     */
    jobsJobIdTodosGetWithHttpInfo(jobId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdTodosGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Todo];

      return this.apiClient.callApi(
        '/jobs/{job_id}/todos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List all todos for this Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Todo>}
     */
    jobsJobIdTodosGet(jobId, opts) {
      return this.jobsJobIdTodosGetWithHttpInfo(jobId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new todo for this Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/JobIdTodosBody} body 
     * @param {String} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Todo} and HTTP response
     */
    jobsJobIdTodosPostWithHttpInfo(body, jobId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdTodosPost");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdTodosPost");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Todo;

      return this.apiClient.callApi(
        '/jobs/{job_id}/todos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new todo for this Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Todo}
     */
    jobsJobIdTodosPost(body, jobId) {
      return this.jobsJobIdTodosPostWithHttpInfo(body, jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a full production pathway with all linkages - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/ProductionPathsBody} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse201} and HTTP response
     */
    productionPathsPostWithHttpInfo(body) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productionPathsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/production_paths', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a full production pathway with all linkages - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse201}
     */
    productionPathsPost(body) {
      return this.productionPathsPostWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     *  - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} productionStrategyId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.clone Create a clone of this strategy when cancelling the existing one.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    productionStrategiesProductionStrategyIdDeleteWithHttpInfo(productionStrategyId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productionStrategyId' is set
      if (productionStrategyId === undefined || productionStrategyId === null) {
        throw new Error("Missing the required parameter 'productionStrategyId' when calling productionStrategiesProductionStrategyIdDelete");
      }

      let pathParams = {
        'production_strategy_id': productionStrategyId
      };
      let queryParams = {
        'clone': opts['clone']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/production_strategies/{production_strategy_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     *  - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} productionStrategyId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.clone Create a clone of this strategy when cancelling the existing one.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    productionStrategiesProductionStrategyIdDelete(productionStrategyId, opts) {
      return this.productionStrategiesProductionStrategyIdDeleteWithHttpInfo(productionStrategyId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show the ProductionStrategy for the provided job, if set - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} productionStrategyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2011} and HTTP response
     */
    productionStrategiesProductionStrategyIdGetWithHttpInfo(productionStrategyId) {
      
      let postBody = null;
      // verify the required parameter 'productionStrategyId' is set
      if (productionStrategyId === undefined || productionStrategyId === null) {
        throw new Error("Missing the required parameter 'productionStrategyId' when calling productionStrategiesProductionStrategyIdGet");
      }

      let pathParams = {
        'production_strategy_id': productionStrategyId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/production_strategies/{production_strategy_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show the ProductionStrategy for the provided job, if set - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} productionStrategyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2011}
     */
    productionStrategiesProductionStrategyIdGet(productionStrategyId) {
      return this.productionStrategiesProductionStrategyIdGetWithHttpInfo(productionStrategyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Imposings for provided ProductionStrategy - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} productionStrategyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Imposing>} and HTTP response
     */
    productionStrategiesProductionStrategyIdImposingsGetWithHttpInfo(productionStrategyId) {
      
      let postBody = null;
      // verify the required parameter 'productionStrategyId' is set
      if (productionStrategyId === undefined || productionStrategyId === null) {
        throw new Error("Missing the required parameter 'productionStrategyId' when calling productionStrategiesProductionStrategyIdImposingsGet");
      }

      let pathParams = {
        'production_strategy_id': productionStrategyId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Imposing];

      return this.apiClient.callApi(
        '/production_strategies/{production_strategy_id}/imposings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Imposings for provided ProductionStrategy - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} productionStrategyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Imposing>}
     */
    productionStrategiesProductionStrategyIdImposingsGet(productionStrategyId) {
      return this.productionStrategiesProductionStrategyIdImposingsGetWithHttpInfo(productionStrategyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new Imposing for the provided ProductionStrategy - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/ProductionStrategyIdImposingsBody} body 
     * @param {String} productionStrategyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Imposing} and HTTP response
     */
    productionStrategiesProductionStrategyIdImposingsPostWithHttpInfo(body, productionStrategyId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productionStrategiesProductionStrategyIdImposingsPost");
      }
      // verify the required parameter 'productionStrategyId' is set
      if (productionStrategyId === undefined || productionStrategyId === null) {
        throw new Error("Missing the required parameter 'productionStrategyId' when calling productionStrategiesProductionStrategyIdImposingsPost");
      }

      let pathParams = {
        'production_strategy_id': productionStrategyId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Imposing;

      return this.apiClient.callApi(
        '/production_strategies/{production_strategy_id}/imposings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new Imposing for the provided ProductionStrategy - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} productionStrategyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Imposing}
     */
    productionStrategiesProductionStrategyIdImposingsPost(body, productionStrategyId) {
      return this.productionStrategiesProductionStrategyIdImposingsPostWithHttpInfo(body, productionStrategyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     *  - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/ProductionStrategiesProductionStrategyIdBody} body 
     * @param {String} productionStrategyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2011} and HTTP response
     */
    productionStrategiesProductionStrategyIdPatchWithHttpInfo(body, productionStrategyId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productionStrategiesProductionStrategyIdPatch");
      }
      // verify the required parameter 'productionStrategyId' is set
      if (productionStrategyId === undefined || productionStrategyId === null) {
        throw new Error("Missing the required parameter 'productionStrategyId' when calling productionStrategiesProductionStrategyIdPatch");
      }

      let pathParams = {
        'production_strategy_id': productionStrategyId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/production_strategies/{production_strategy_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     *  - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} productionStrategyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2011}
     */
    productionStrategiesProductionStrategyIdPatch(body, productionStrategyId) {
      return this.productionStrategiesProductionStrategyIdPatchWithHttpInfo(body, productionStrategyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a Signature from the Imposing - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} signatureId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    signaturesSignatureIdDeleteWithHttpInfo(signatureId) {
      
      let postBody = null;
      // verify the required parameter 'signatureId' is set
      if (signatureId === undefined || signatureId === null) {
        throw new Error("Missing the required parameter 'signatureId' when calling signaturesSignatureIdDelete");
      }

      let pathParams = {
        'signature_id': signatureId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/signatures/{signature_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a Signature from the Imposing - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} signatureId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    signaturesSignatureIdDelete(signatureId) {
      return this.signaturesSignatureIdDeleteWithHttpInfo(signatureId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show the full details of a given Signature - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} signatureId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Signature} and HTTP response
     */
    signaturesSignatureIdGetWithHttpInfo(signatureId) {
      
      let postBody = null;
      // verify the required parameter 'signatureId' is set
      if (signatureId === undefined || signatureId === null) {
        throw new Error("Missing the required parameter 'signatureId' when calling signaturesSignatureIdGet");
      }

      let pathParams = {
        'signature_id': signatureId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Signature;

      return this.apiClient.callApi(
        '/signatures/{signature_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show the full details of a given Signature - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} signatureId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Signature}
     */
    signaturesSignatureIdGet(signatureId) {
      return this.signaturesSignatureIdGetWithHttpInfo(signatureId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Signature - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/SignaturesSignatureIdBody} body 
     * @param {String} signatureId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Signature} and HTTP response
     */
    signaturesSignatureIdPatchWithHttpInfo(body, signatureId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling signaturesSignatureIdPatch");
      }
      // verify the required parameter 'signatureId' is set
      if (signatureId === undefined || signatureId === null) {
        throw new Error("Missing the required parameter 'signatureId' when calling signaturesSignatureIdPatch");
      }

      let pathParams = {
        'signature_id': signatureId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Signature;

      return this.apiClient.callApi(
        '/signatures/{signature_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a Signature - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} signatureId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Signature}
     */
    signaturesSignatureIdPatch(body, signatureId) {
      return this.signaturesSignatureIdPatchWithHttpInfo(body, signatureId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a todo - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} todoId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    todosTodoIdDeleteWithHttpInfo(todoId) {
      
      let postBody = null;
      // verify the required parameter 'todoId' is set
      if (todoId === undefined || todoId === null) {
        throw new Error("Missing the required parameter 'todoId' when calling todosTodoIdDelete");
      }

      let pathParams = {
        'todo_id': todoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/todos/{todo_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a todo - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} todoId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    todosTodoIdDelete(todoId) {
      return this.todosTodoIdDeleteWithHttpInfo(todoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Display the status of a todo - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} todoId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Todo} and HTTP response
     */
    todosTodoIdGetWithHttpInfo(todoId) {
      
      let postBody = null;
      // verify the required parameter 'todoId' is set
      if (todoId === undefined || todoId === null) {
        throw new Error("Missing the required parameter 'todoId' when calling todosTodoIdGet");
      }

      let pathParams = {
        'todo_id': todoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Todo;

      return this.apiClient.callApi(
        '/todos/{todo_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Display the status of a todo - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} todoId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Todo}
     */
    todosTodoIdGet(todoId) {
      return this.todosTodoIdGetWithHttpInfo(todoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change properties of a todo - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/TodosTodoIdBody} body 
     * @param {String} todoId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Todo} and HTTP response
     */
    todosTodoIdPatchWithHttpInfo(body, todoId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling todosTodoIdPatch");
      }
      // verify the required parameter 'todoId' is set
      if (todoId === undefined || todoId === null) {
        throw new Error("Missing the required parameter 'todoId' when calling todosTodoIdPatch");
      }

      let pathParams = {
        'todo_id': todoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Todo;

      return this.apiClient.callApi(
        '/todos/{todo_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change properties of a todo - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} todoId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Todo}
     */
    todosTodoIdPatch(body, todoId) {
      return this.todosTodoIdPatchWithHttpInfo(body, todoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show all available WorkstepGroups - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/WorkstepGroup>} and HTTP response
     */
    workstepGroupsGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkstepGroup];

      return this.apiClient.callApi(
        '/workstep_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show all available WorkstepGroups - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/WorkstepGroup>}
     */
    workstepGroupsGet(opts) {
      return this.workstepGroupsGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new WorkstepGroup - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/WorkstepGroupsBody} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkstepGroup} and HTTP response
     */
    workstepGroupsPostWithHttpInfo(body) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workstepGroupsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkstepGroup;

      return this.apiClient.callApi(
        '/workstep_groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new WorkstepGroup - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkstepGroup}
     */
    workstepGroupsPost(body) {
      return this.workstepGroupsPostWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a WorkstepGroup, this will remove all contained Worksteps and associated IntermediateProducts\&quot;  - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} workstepGroupId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    workstepGroupsWorkstepGroupIdDeleteWithHttpInfo(workstepGroupId) {
      
      let postBody = null;
      // verify the required parameter 'workstepGroupId' is set
      if (workstepGroupId === undefined || workstepGroupId === null) {
        throw new Error("Missing the required parameter 'workstepGroupId' when calling workstepGroupsWorkstepGroupIdDelete");
      }

      let pathParams = {
        'workstep_group_id': workstepGroupId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/workstep_groups/{workstep_group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a WorkstepGroup, this will remove all contained Worksteps and associated IntermediateProducts\&quot;  - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} workstepGroupId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    workstepGroupsWorkstepGroupIdDelete(workstepGroupId) {
      return this.workstepGroupsWorkstepGroupIdDeleteWithHttpInfo(workstepGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show the full details of a given WorkstepGroup including all Worksteps - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} workstepGroupId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkstepGroup} and HTTP response
     */
    workstepGroupsWorkstepGroupIdGetWithHttpInfo(workstepGroupId) {
      
      let postBody = null;
      // verify the required parameter 'workstepGroupId' is set
      if (workstepGroupId === undefined || workstepGroupId === null) {
        throw new Error("Missing the required parameter 'workstepGroupId' when calling workstepGroupsWorkstepGroupIdGet");
      }

      let pathParams = {
        'workstep_group_id': workstepGroupId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkstepGroup;

      return this.apiClient.callApi(
        '/workstep_groups/{workstep_group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show the full details of a given WorkstepGroup including all Worksteps - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} workstepGroupId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkstepGroup}
     */
    workstepGroupsWorkstepGroupIdGet(workstepGroupId) {
      return this.workstepGroupsWorkstepGroupIdGetWithHttpInfo(workstepGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a WorkstepGroup - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/WorkstepGroupsWorkstepGroupIdBody} body 
     * @param {String} workstepGroupId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkstepGroup} and HTTP response
     */
    workstepGroupsWorkstepGroupIdPatchWithHttpInfo(body, workstepGroupId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workstepGroupsWorkstepGroupIdPatch");
      }
      // verify the required parameter 'workstepGroupId' is set
      if (workstepGroupId === undefined || workstepGroupId === null) {
        throw new Error("Missing the required parameter 'workstepGroupId' when calling workstepGroupsWorkstepGroupIdPatch");
      }

      let pathParams = {
        'workstep_group_id': workstepGroupId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkstepGroup;

      return this.apiClient.callApi(
        '/workstep_groups/{workstep_group_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a WorkstepGroup - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} workstepGroupId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkstepGroup}
     */
    workstepGroupsWorkstepGroupIdPatch(body, workstepGroupId) {
      return this.workstepGroupsWorkstepGroupIdPatchWithHttpInfo(body, workstepGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all available Worksteps - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Workstep>} and HTTP response
     */
    workstepsGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Workstep];

      return this.apiClient.callApi(
        '/worksteps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List all available Worksteps - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Workstep>}
     */
    workstepsGet(opts) {
      return this.workstepsGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new Workstep - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/WorkstepsBody} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Workstep} and HTTP response
     */
    workstepsPostWithHttpInfo(body) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workstepsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Workstep;

      return this.apiClient.callApi(
        '/worksteps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new Workstep - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Workstep}
     */
    workstepsPost(body) {
      return this.workstepsPostWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a Workstep - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} workstepId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    workstepsWorkstepIdDeleteWithHttpInfo(workstepId) {
      
      let postBody = null;
      // verify the required parameter 'workstepId' is set
      if (workstepId === undefined || workstepId === null) {
        throw new Error("Missing the required parameter 'workstepId' when calling workstepsWorkstepIdDelete");
      }

      let pathParams = {
        'workstep_id': workstepId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/worksteps/{workstep_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a Workstep - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} workstepId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    workstepsWorkstepIdDelete(workstepId) {
      return this.workstepsWorkstepIdDeleteWithHttpInfo(workstepId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show the full details of a Workstep - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} workstepId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Workstep} and HTTP response
     */
    workstepsWorkstepIdGetWithHttpInfo(workstepId) {
      
      let postBody = null;
      // verify the required parameter 'workstepId' is set
      if (workstepId === undefined || workstepId === null) {
        throw new Error("Missing the required parameter 'workstepId' when calling workstepsWorkstepIdGet");
      }

      let pathParams = {
        'workstep_id': workstepId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Workstep;

      return this.apiClient.callApi(
        '/worksteps/{workstep_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show the full details of a Workstep - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} workstepId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Workstep}
     */
    workstepsWorkstepIdGet(workstepId) {
      return this.workstepsWorkstepIdGetWithHttpInfo(workstepId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Workstep with the provided params - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/WorkstepsWorkstepIdBody} body 
     * @param {String} workstepId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Workstep} and HTTP response
     */
    workstepsWorkstepIdPatchWithHttpInfo(body, workstepId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workstepsWorkstepIdPatch");
      }
      // verify the required parameter 'workstepId' is set
      if (workstepId === undefined || workstepId === null) {
        throw new Error("Missing the required parameter 'workstepId' when calling workstepsWorkstepIdPatch");
      }

      let pathParams = {
        'workstep_id': workstepId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Workstep;

      return this.apiClient.callApi(
        '/worksteps/{workstep_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a Workstep with the provided params - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body 
     * @param {<&vendorExtensions.x-jsdoc-type>} workstepId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Workstep}
     */
    workstepsWorkstepIdPatch(body, workstepId) {
      return this.workstepsWorkstepIdPatchWithHttpInfo(body, workstepId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}