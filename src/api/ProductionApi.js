/*
 * Mission Control
 * This is the documentation of all API endpoints provided by Mission Control.  ## Provided OAuth Scopes - `mission_control.commissionings.r` [`Commissioning`]: Read information of all commissionings - `mission_control.commissionings.w` [`Commissioning`]: Create or update commissioning related models - `mission_control.estimates.r` [`Estimate`]: Read information of all Estimates - `mission_control.estimates.w` [`Estimate`]: Create or update all kinds of Estimates - `mission_control.lists.r` [`List`]: Read information of all List objects - `mission_control.lists.r` [`List`]: Create or update List objects - `mission_control.orders.r` [`Order`]: Read information of all orders - `mission_control.orders.w` [`Order`]: Create or update new orders - `mission_control.jobs.r` [`Job`]: Read basic information of all jobs currently or formerly in production (`GET /jobs/_*`) - `mission_control.jobs.w` [`Job`]: Create or update new jobs (`POST /jobs/_*`, `PATCH /jobs/_*`) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Batch} from '../model/Batch';
import {BatchesBatchIdBody} from '../model/BatchesBatchIdBody';
import {BatchesBody} from '../model/BatchesBody';
import {Execution} from '../model/Execution';
import {ExecutionsBody} from '../model/ExecutionsBody';
import {ExecutionsExecutionIdBody} from '../model/ExecutionsExecutionIdBody';
import {FinishedProduct} from '../model/FinishedProduct';
import {Imposing} from '../model/Imposing';
import {ImposingIdSignaturesBody} from '../model/ImposingIdSignaturesBody';
import {ImposingsImposingIdBody} from '../model/ImposingsImposingIdBody';
import {InlineResponse201} from '../model/InlineResponse201';
import {InlineResponse2011} from '../model/InlineResponse2011';
import {InlineResponse2014} from '../model/InlineResponse2014';
import {InlineResponse400} from '../model/InlineResponse400';
import {InlineResponse401} from '../model/InlineResponse401';
import {IntermediateProduct} from '../model/IntermediateProduct';
import {IntermediateProductsIntermediateProductIdBody} from '../model/IntermediateProductsIntermediateProductIdBody';
import {JobIdFinishedProductBody} from '../model/JobIdFinishedProductBody';
import {JobIdFinishedProductBody1} from '../model/JobIdFinishedProductBody1';
import {JobIdIntermediateProductsBody} from '../model/JobIdIntermediateProductsBody';
import {JobIdMilestonesBody} from '../model/JobIdMilestonesBody';
import {JobIdProductionStrategiesBody} from '../model/JobIdProductionStrategiesBody';
import {JobIdTodosBody} from '../model/JobIdTodosBody';
import {ListIdPredicatesBody} from '../model/ListIdPredicatesBody';
import {ListsBody} from '../model/ListsBody';
import {ListsListIdBody} from '../model/ListsListIdBody';
import {Milestone} from '../model/Milestone';
import {MilestonesMilestoneIdBody} from '../model/MilestonesMilestoneIdBody';
import {Predicate} from '../model/Predicate';
import {PredicateIdRulesBody} from '../model/PredicateIdRulesBody';
import {PredicatesPredicateIdBody} from '../model/PredicatesPredicateIdBody';
import {ProductionPathsBody} from '../model/ProductionPathsBody';
import {ProductionStrategiesProductionStrategyIdBody} from '../model/ProductionStrategiesProductionStrategyIdBody';
import {ProductionStrategy} from '../model/ProductionStrategy';
import {ProductionStrategyIdImposingsBody} from '../model/ProductionStrategyIdImposingsBody';
import {Rule} from '../model/Rule';
import {RulesRuleIdBody} from '../model/RulesRuleIdBody';
import {Signature} from '../model/Signature';
import {SignaturesSignatureIdBody} from '../model/SignaturesSignatureIdBody';
import {Todo} from '../model/Todo';
import {TodosTodoIdBody} from '../model/TodosTodoIdBody';
import {Workstep} from '../model/Workstep';
import {WorkstepGroup} from '../model/WorkstepGroup';
import {WorkstepGroupsBody} from '../model/WorkstepGroupsBody';
import {WorkstepGroupsWorkstepGroupIdBody} from '../model/WorkstepGroupsWorkstepGroupIdBody';
import {WorkstepsBody} from '../model/WorkstepsBody';
import {WorkstepsWorkstepIdBody} from '../model/WorkstepsWorkstepIdBody';

/**
* Production service.
* @module api/ProductionApi
* @version 1.0.0
*/
export class ProductionApi {

    /**
    * Constructs a new ProductionApi. 
    * @alias module:api/ProductionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the batchesBatchIdDelete operation.
     * @callback moduleapi/ProductionApi~batchesBatchIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a Batch. This will remove all associated linked Production resources too - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.production.w&#x60; or &#x60;mission_control.production.rw&#x60;
     * @param {String} batchId 
     * @param {module:api/ProductionApi~batchesBatchIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    batchesBatchIdDelete(batchId, callback) {
      
      let postBody = null;
      // verify the required parameter 'batchId' is set
      if (batchId === undefined || batchId === null) {
        throw new Error("Missing the required parameter 'batchId' when calling batchesBatchIdDelete");
      }

      let pathParams = {
        'batch_id': batchId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/batches/{batch_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the batchesBatchIdGet operation.
     * @callback moduleapi/ProductionApi~batchesBatchIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Batch{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return in depth information about a single Batch - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.production.r&#x60; or &#x60;mission_control.production.rw&#x60;
     * @param {String} batchId 
     * @param {module:api/ProductionApi~batchesBatchIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    batchesBatchIdGet(batchId, callback) {
      
      let postBody = null;
      // verify the required parameter 'batchId' is set
      if (batchId === undefined || batchId === null) {
        throw new Error("Missing the required parameter 'batchId' when calling batchesBatchIdGet");
      }

      let pathParams = {
        'batch_id': batchId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Batch;

      return this.apiClient.callApi(
        '/batches/{batch_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the batchesBatchIdPatch operation.
     * @callback moduleapi/ProductionApi~batchesBatchIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Batch{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the details of a Batch - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.production.w&#x60; or &#x60;mission_control.production.rw&#x60;
     * @param {module:model/BatchesBatchIdBody} body 
     * @param {String} batchId 
     * @param {module:api/ProductionApi~batchesBatchIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    batchesBatchIdPatch(body, batchId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling batchesBatchIdPatch");
      }
      // verify the required parameter 'batchId' is set
      if (batchId === undefined || batchId === null) {
        throw new Error("Missing the required parameter 'batchId' when calling batchesBatchIdPatch");
      }

      let pathParams = {
        'batch_id': batchId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Batch;

      return this.apiClient.callApi(
        '/batches/{batch_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the batchesGet operation.
     * @callback moduleapi/ProductionApi~batchesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Batch>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all Batches for the current caller - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.production.r&#x60; or &#x60;mission_control.production.rw&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/ProductionApi~batchesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    batchesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Batch];

      return this.apiClient.callApi(
        '/batches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the batchesPost operation.
     * @callback moduleapi/ProductionApi~batchesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Batch{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Batch for producing multiple Parts together - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.production.w&#x60; or &#x60;mission_control.production.rw&#x60;
     * @param {module:model/BatchesBody} body 
     * @param {module:api/ProductionApi~batchesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    batchesPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling batchesPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Batch;

      return this.apiClient.callApi(
        '/batches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the executionsExecutionIdDelete operation.
     * @callback moduleapi/ProductionApi~executionsExecutionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an execution - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60;
     * @param {String} executionId 
     * @param {module:api/ProductionApi~executionsExecutionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    executionsExecutionIdDelete(executionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling executionsExecutionIdDelete");
      }

      let pathParams = {
        'execution_id': executionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/executions/{execution_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the executionsExecutionIdGet operation.
     * @callback moduleapi/ProductionApi~executionsExecutionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Execution{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the details of a given execution - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {String} executionId 
     * @param {module:api/ProductionApi~executionsExecutionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    executionsExecutionIdGet(executionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling executionsExecutionIdGet");
      }

      let pathParams = {
        'execution_id': executionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Execution;

      return this.apiClient.callApi(
        '/executions/{execution_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the executionsExecutionIdPatch operation.
     * @callback moduleapi/ProductionApi~executionsExecutionIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Execution{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the status of an execution - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60;
     * @param {module:model/ExecutionsExecutionIdBody} body 
     * @param {String} executionId 
     * @param {module:api/ProductionApi~executionsExecutionIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    executionsExecutionIdPatch(body, executionId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling executionsExecutionIdPatch");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling executionsExecutionIdPatch");
      }

      let pathParams = {
        'execution_id': executionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Execution;

      return this.apiClient.callApi(
        '/executions/{execution_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the executionsGet operation.
     * @callback moduleapi/ProductionApi~executionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Execution>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all executions, useful as an audit log of production - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/ProductionApi~executionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    executionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Execution];

      return this.apiClient.callApi(
        '/executions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the executionsPost operation.
     * @callback moduleapi/ProductionApi~executionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Execution{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new execution to log production - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60;
     * @param {module:model/ExecutionsBody} body 
     * @param {module:api/ProductionApi~executionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    executionsPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling executionsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Execution;

      return this.apiClient.callApi(
        '/executions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the imposingsImposingIdDelete operation.
     * @callback moduleapi/ProductionApi~imposingsImposingIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an Imposing from the ProductionStrategy - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} imposingId 
     * @param {module:api/ProductionApi~imposingsImposingIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    imposingsImposingIdDelete(imposingId, callback) {
      
      let postBody = null;
      // verify the required parameter 'imposingId' is set
      if (imposingId === undefined || imposingId === null) {
        throw new Error("Missing the required parameter 'imposingId' when calling imposingsImposingIdDelete");
      }

      let pathParams = {
        'imposing_id': imposingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/imposings/{imposing_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the imposingsImposingIdGet operation.
     * @callback moduleapi/ProductionApi~imposingsImposingIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Imposing{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the full details of a given Imposing including all Signatures - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} imposingId 
     * @param {module:api/ProductionApi~imposingsImposingIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    imposingsImposingIdGet(imposingId, callback) {
      
      let postBody = null;
      // verify the required parameter 'imposingId' is set
      if (imposingId === undefined || imposingId === null) {
        throw new Error("Missing the required parameter 'imposingId' when calling imposingsImposingIdGet");
      }

      let pathParams = {
        'imposing_id': imposingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Imposing;

      return this.apiClient.callApi(
        '/imposings/{imposing_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the imposingsImposingIdPatch operation.
     * @callback moduleapi/ProductionApi~imposingsImposingIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Imposing{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Imposing - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/ImposingsImposingIdBody} body 
     * @param {String} imposingId 
     * @param {module:api/ProductionApi~imposingsImposingIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    imposingsImposingIdPatch(body, imposingId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling imposingsImposingIdPatch");
      }
      // verify the required parameter 'imposingId' is set
      if (imposingId === undefined || imposingId === null) {
        throw new Error("Missing the required parameter 'imposingId' when calling imposingsImposingIdPatch");
      }

      let pathParams = {
        'imposing_id': imposingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Imposing;

      return this.apiClient.callApi(
        '/imposings/{imposing_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the imposingsImposingIdSignaturesGet operation.
     * @callback moduleapi/ProductionApi~imposingsImposingIdSignaturesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Signature>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Signatures for provided Imposings - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} imposingId 
     * @param {module:api/ProductionApi~imposingsImposingIdSignaturesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    imposingsImposingIdSignaturesGet(imposingId, callback) {
      
      let postBody = null;
      // verify the required parameter 'imposingId' is set
      if (imposingId === undefined || imposingId === null) {
        throw new Error("Missing the required parameter 'imposingId' when calling imposingsImposingIdSignaturesGet");
      }

      let pathParams = {
        'imposing_id': imposingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Signature];

      return this.apiClient.callApi(
        '/imposings/{imposing_id}/signatures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the imposingsImposingIdSignaturesPost operation.
     * @callback moduleapi/ProductionApi~imposingsImposingIdSignaturesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Signature{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Signature for the provided Imposing - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/ImposingIdSignaturesBody} body 
     * @param {String} imposingId 
     * @param {module:api/ProductionApi~imposingsImposingIdSignaturesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    imposingsImposingIdSignaturesPost(body, imposingId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling imposingsImposingIdSignaturesPost");
      }
      // verify the required parameter 'imposingId' is set
      if (imposingId === undefined || imposingId === null) {
        throw new Error("Missing the required parameter 'imposingId' when calling imposingsImposingIdSignaturesPost");
      }

      let pathParams = {
        'imposing_id': imposingId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Signature;

      return this.apiClient.callApi(
        '/imposings/{imposing_id}/signatures', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the intermediateProductsIntermediateProductIdDelete operation.
     * @callback moduleapi/ProductionApi~intermediateProductsIntermediateProductIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an IntermediateProduct - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} intermediateProductId 
     * @param {module:api/ProductionApi~intermediateProductsIntermediateProductIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    intermediateProductsIntermediateProductIdDelete(intermediateProductId, callback) {
      
      let postBody = null;
      // verify the required parameter 'intermediateProductId' is set
      if (intermediateProductId === undefined || intermediateProductId === null) {
        throw new Error("Missing the required parameter 'intermediateProductId' when calling intermediateProductsIntermediateProductIdDelete");
      }

      let pathParams = {
        'intermediate_product_id': intermediateProductId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/intermediate_products/{intermediate_product_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the intermediateProductsIntermediateProductIdGet operation.
     * @callback moduleapi/ProductionApi~intermediateProductsIntermediateProductIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntermediateProduct{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the full details of an IntermediateProduct - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} intermediateProductId 
     * @param {module:api/ProductionApi~intermediateProductsIntermediateProductIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    intermediateProductsIntermediateProductIdGet(intermediateProductId, callback) {
      
      let postBody = null;
      // verify the required parameter 'intermediateProductId' is set
      if (intermediateProductId === undefined || intermediateProductId === null) {
        throw new Error("Missing the required parameter 'intermediateProductId' when calling intermediateProductsIntermediateProductIdGet");
      }

      let pathParams = {
        'intermediate_product_id': intermediateProductId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntermediateProduct;

      return this.apiClient.callApi(
        '/intermediate_products/{intermediate_product_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the intermediateProductsIntermediateProductIdPatch operation.
     * @callback moduleapi/ProductionApi~intermediateProductsIntermediateProductIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntermediateProduct{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an IntermediateProduct with the provided params - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/IntermediateProductsIntermediateProductIdBody} body 
     * @param {String} intermediateProductId 
     * @param {module:api/ProductionApi~intermediateProductsIntermediateProductIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    intermediateProductsIntermediateProductIdPatch(body, intermediateProductId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling intermediateProductsIntermediateProductIdPatch");
      }
      // verify the required parameter 'intermediateProductId' is set
      if (intermediateProductId === undefined || intermediateProductId === null) {
        throw new Error("Missing the required parameter 'intermediateProductId' when calling intermediateProductsIntermediateProductIdPatch");
      }

      let pathParams = {
        'intermediate_product_id': intermediateProductId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntermediateProduct;

      return this.apiClient.callApi(
        '/intermediate_products/{intermediate_product_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdFinishedProductDelete operation.
     * @callback moduleapi/ProductionApi~jobsJobIdFinishedProductDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the FinishedProduct - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} jobId 
     * @param {module:api/ProductionApi~jobsJobIdFinishedProductDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobsJobIdFinishedProductDelete(jobId, callback) {
      
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdFinishedProductDelete");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/jobs/{job_id}/finished_product', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdFinishedProductGet operation.
     * @callback moduleapi/ProductionApi~jobsJobIdFinishedProductGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinishedProduct{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the full details of the FinishedProduct - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} jobId 
     * @param {module:api/ProductionApi~jobsJobIdFinishedProductGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdFinishedProductGet(jobId, callback) {
      
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdFinishedProductGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FinishedProduct;

      return this.apiClient.callApi(
        '/jobs/{job_id}/finished_product', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdFinishedProductPatch operation.
     * @callback moduleapi/ProductionApi~jobsJobIdFinishedProductPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinishedProduct{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the FinishedProduct with the provided params - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/JobIdFinishedProductBody1} body 
     * @param {String} jobId 
     * @param {module:api/ProductionApi~jobsJobIdFinishedProductPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdFinishedProductPatch(body, jobId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdFinishedProductPatch");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdFinishedProductPatch");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FinishedProduct;

      return this.apiClient.callApi(
        '/jobs/{job_id}/finished_product', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdFinishedProductPost operation.
     * @callback moduleapi/ProductionApi~jobsJobIdFinishedProductPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinishedProduct{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create the FinishedProduct for a Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/JobIdFinishedProductBody} body 
     * @param {String} jobId 
     * @param {module:api/ProductionApi~jobsJobIdFinishedProductPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdFinishedProductPost(body, jobId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdFinishedProductPost");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdFinishedProductPost");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FinishedProduct;

      return this.apiClient.callApi(
        '/jobs/{job_id}/finished_product', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdIntermediateProductsGet operation.
     * @callback moduleapi/ProductionApi~jobsJobIdIntermediateProductsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IntermediateProduct>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all available IntermediateProducts for a given Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} jobId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/ProductionApi~jobsJobIdIntermediateProductsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdIntermediateProductsGet(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdIntermediateProductsGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IntermediateProduct];

      return this.apiClient.callApi(
        '/jobs/{job_id}/intermediate_products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdIntermediateProductsPost operation.
     * @callback moduleapi/ProductionApi~jobsJobIdIntermediateProductsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntermediateProduct{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new IntermediateProduct for a Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/JobIdIntermediateProductsBody} body 
     * @param {String} jobId 
     * @param {module:api/ProductionApi~jobsJobIdIntermediateProductsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdIntermediateProductsPost(body, jobId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdIntermediateProductsPost");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdIntermediateProductsPost");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntermediateProduct;

      return this.apiClient.callApi(
        '/jobs/{job_id}/intermediate_products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdMilestonesGet operation.
     * @callback moduleapi/ProductionApi~jobsJobIdMilestonesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Milestone>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all milestones for this Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} jobId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/ProductionApi~jobsJobIdMilestonesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdMilestonesGet(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdMilestonesGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Milestone];

      return this.apiClient.callApi(
        '/jobs/{job_id}/milestones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdMilestonesPost operation.
     * @callback moduleapi/ProductionApi~jobsJobIdMilestonesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Milestone{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new milestone for this Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/JobIdMilestonesBody} body 
     * @param {String} jobId 
     * @param {module:api/ProductionApi~jobsJobIdMilestonesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdMilestonesPost(body, jobId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdMilestonesPost");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdMilestonesPost");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Milestone;

      return this.apiClient.callApi(
        '/jobs/{job_id}/milestones', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdProductionStrategiesGet operation.
     * @callback moduleapi/ProductionApi~jobsJobIdProductionStrategiesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductionStrategy>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List ProductionStrategies for the provided job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} jobId 
     * @param {module:api/ProductionApi~jobsJobIdProductionStrategiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdProductionStrategiesGet(jobId, callback) {
      
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdProductionStrategiesGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProductionStrategy];

      return this.apiClient.callApi(
        '/jobs/{job_id}/production_strategies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdProductionStrategiesPost operation.
     * @callback moduleapi/ProductionApi~jobsJobIdProductionStrategiesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new ProductionStrategy for the provided job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/JobIdProductionStrategiesBody} body 
     * @param {String} jobId 
     * @param {module:api/ProductionApi~jobsJobIdProductionStrategiesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdProductionStrategiesPost(body, jobId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdProductionStrategiesPost");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdProductionStrategiesPost");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/jobs/{job_id}/production_strategies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdTodosGet operation.
     * @callback moduleapi/ProductionApi~jobsJobIdTodosGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Todo>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all todos for this Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} jobId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/ProductionApi~jobsJobIdTodosGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdTodosGet(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdTodosGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Todo];

      return this.apiClient.callApi(
        '/jobs/{job_id}/todos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the jobsJobIdTodosPost operation.
     * @callback moduleapi/ProductionApi~jobsJobIdTodosPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Todo{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new todo for this Job - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/JobIdTodosBody} body 
     * @param {String} jobId 
     * @param {module:api/ProductionApi~jobsJobIdTodosPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    jobsJobIdTodosPost(body, jobId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsJobIdTodosPost");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsJobIdTodosPost");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Todo;

      return this.apiClient.callApi(
        '/jobs/{job_id}/todos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listsGet operation.
     * @callback moduleapi/ProductionApi~listsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all lists associated to user organizations. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.lists.r&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/ProductionApi~listsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];

      return this.apiClient.callApi(
        '/lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listsListIdDelete operation.
     * @callback moduleapi/ProductionApi~listsListIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a list. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.lists.w&#x60;
     * @param {String} listId 
     * @param {module:api/ProductionApi~listsListIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listsListIdDelete(listId, callback) {
      
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listsListIdDelete");
      }

      let pathParams = {
        'list_id': listId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/lists/{list_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listsListIdGet operation.
     * @callback moduleapi/ProductionApi~listsListIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific list associated to a user organizations (without its members). - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.lists.r&#x60;
     * @param {String} listId 
     * @param {module:api/ProductionApi~listsListIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listsListIdGet(listId, callback) {
      
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listsListIdGet");
      }

      let pathParams = {
        'list_id': listId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/lists/{list_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listsListIdPatch operation.
     * @callback moduleapi/ProductionApi~listsListIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a list. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.lists.w&#x60;
     * @param {module:model/ListsListIdBody} body 
     * @param {String} listId 
     * @param {module:api/ProductionApi~listsListIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listsListIdPatch(body, listId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listsListIdPatch");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listsListIdPatch");
      }

      let pathParams = {
        'list_id': listId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/lists/{list_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listsListIdPredicatesGet operation.
     * @callback moduleapi/ProductionApi~listsListIdPredicatesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Predicate>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all predicates of a specific list. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.lists.r&#x60;
     * @param {String} listId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/ProductionApi~listsListIdPredicatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listsListIdPredicatesGet(listId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listsListIdPredicatesGet");
      }

      let pathParams = {
        'list_id': listId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Predicate];

      return this.apiClient.callApi(
        '/lists/{list_id}/predicates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listsListIdPredicatesPost operation.
     * @callback moduleapi/ProductionApi~listsListIdPredicatesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Predicate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new predicate for a specific list. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.lists.w&#x60;
     * @param {module:model/ListIdPredicatesBody} body 
     * @param {String} listId 
     * @param {module:api/ProductionApi~listsListIdPredicatesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listsListIdPredicatesPost(body, listId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listsListIdPredicatesPost");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listsListIdPredicatesPost");
      }

      let pathParams = {
        'list_id': listId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Predicate;

      return this.apiClient.callApi(
        '/lists/{list_id}/predicates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listsPost operation.
     * @callback moduleapi/ProductionApi~listsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a list. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.lists.w&#x60;
     * @param {module:model/ListsBody} body 
     * @param {module:api/ProductionApi~listsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listsPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/lists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the milestonesMilestoneIdDelete operation.
     * @callback moduleapi/ProductionApi~milestonesMilestoneIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a milestone - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} milestoneId 
     * @param {module:api/ProductionApi~milestonesMilestoneIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    milestonesMilestoneIdDelete(milestoneId, callback) {
      
      let postBody = null;
      // verify the required parameter 'milestoneId' is set
      if (milestoneId === undefined || milestoneId === null) {
        throw new Error("Missing the required parameter 'milestoneId' when calling milestonesMilestoneIdDelete");
      }

      let pathParams = {
        'milestone_id': milestoneId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/milestones/{milestone_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the milestonesMilestoneIdGet operation.
     * @callback moduleapi/ProductionApi~milestonesMilestoneIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Milestone{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display the status of a Milestone - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} milestoneId 
     * @param {module:api/ProductionApi~milestonesMilestoneIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    milestonesMilestoneIdGet(milestoneId, callback) {
      
      let postBody = null;
      // verify the required parameter 'milestoneId' is set
      if (milestoneId === undefined || milestoneId === null) {
        throw new Error("Missing the required parameter 'milestoneId' when calling milestonesMilestoneIdGet");
      }

      let pathParams = {
        'milestone_id': milestoneId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Milestone;

      return this.apiClient.callApi(
        '/milestones/{milestone_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the milestonesMilestoneIdPatch operation.
     * @callback moduleapi/ProductionApi~milestonesMilestoneIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Milestone{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change properties of a Milestone - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/MilestonesMilestoneIdBody} body 
     * @param {String} milestoneId 
     * @param {module:api/ProductionApi~milestonesMilestoneIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    milestonesMilestoneIdPatch(body, milestoneId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling milestonesMilestoneIdPatch");
      }
      // verify the required parameter 'milestoneId' is set
      if (milestoneId === undefined || milestoneId === null) {
        throw new Error("Missing the required parameter 'milestoneId' when calling milestonesMilestoneIdPatch");
      }

      let pathParams = {
        'milestone_id': milestoneId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Milestone;

      return this.apiClient.callApi(
        '/milestones/{milestone_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the predicatesPredicateIdDelete operation.
     * @callback moduleapi/ProductionApi~predicatesPredicateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a predicate. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.lists.w&#x60;
     * @param {String} predicateId 
     * @param {module:api/ProductionApi~predicatesPredicateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    predicatesPredicateIdDelete(predicateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'predicateId' is set
      if (predicateId === undefined || predicateId === null) {
        throw new Error("Missing the required parameter 'predicateId' when calling predicatesPredicateIdDelete");
      }

      let pathParams = {
        'predicate_id': predicateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/predicates/{predicate_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the predicatesPredicateIdGet operation.
     * @callback moduleapi/ProductionApi~predicatesPredicateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Predicate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific predicate associated to a user organizations. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.lists.r&#x60;
     * @param {String} predicateId 
     * @param {module:api/ProductionApi~predicatesPredicateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    predicatesPredicateIdGet(predicateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'predicateId' is set
      if (predicateId === undefined || predicateId === null) {
        throw new Error("Missing the required parameter 'predicateId' when calling predicatesPredicateIdGet");
      }

      let pathParams = {
        'predicate_id': predicateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Predicate;

      return this.apiClient.callApi(
        '/predicates/{predicate_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the predicatesPredicateIdPatch operation.
     * @callback moduleapi/ProductionApi~predicatesPredicateIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Predicate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a predicate. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.lists.w&#x60;
     * @param {module:model/PredicatesPredicateIdBody} body 
     * @param {String} predicateId 
     * @param {module:api/ProductionApi~predicatesPredicateIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    predicatesPredicateIdPatch(body, predicateId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling predicatesPredicateIdPatch");
      }
      // verify the required parameter 'predicateId' is set
      if (predicateId === undefined || predicateId === null) {
        throw new Error("Missing the required parameter 'predicateId' when calling predicatesPredicateIdPatch");
      }

      let pathParams = {
        'predicate_id': predicateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Predicate;

      return this.apiClient.callApi(
        '/predicates/{predicate_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the predicatesPredicateIdRulesGet operation.
     * @callback moduleapi/ProductionApi~predicatesPredicateIdRulesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Rule>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all rules of a specific predicate. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.lists.r&#x60;
     * @param {String} predicateId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/ProductionApi~predicatesPredicateIdRulesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    predicatesPredicateIdRulesGet(predicateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'predicateId' is set
      if (predicateId === undefined || predicateId === null) {
        throw new Error("Missing the required parameter 'predicateId' when calling predicatesPredicateIdRulesGet");
      }

      let pathParams = {
        'predicate_id': predicateId
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Rule];

      return this.apiClient.callApi(
        '/predicates/{predicate_id}/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the predicatesPredicateIdRulesPost operation.
     * @callback moduleapi/ProductionApi~predicatesPredicateIdRulesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rule{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new rule for a specific predicate. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.lists.w&#x60;
     * @param {module:model/PredicateIdRulesBody} body 
     * @param {String} predicateId 
     * @param {module:api/ProductionApi~predicatesPredicateIdRulesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    predicatesPredicateIdRulesPost(body, predicateId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling predicatesPredicateIdRulesPost");
      }
      // verify the required parameter 'predicateId' is set
      if (predicateId === undefined || predicateId === null) {
        throw new Error("Missing the required parameter 'predicateId' when calling predicatesPredicateIdRulesPost");
      }

      let pathParams = {
        'predicate_id': predicateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Rule;

      return this.apiClient.callApi(
        '/predicates/{predicate_id}/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the productionPathsPost operation.
     * @callback moduleapi/ProductionApi~productionPathsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a full production pathway with all linkages - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/ProductionPathsBody} body 
     * @param {module:api/ProductionApi~productionPathsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    productionPathsPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productionPathsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/production_paths', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the productionStrategiesProductionStrategyIdDelete operation.
     * @callback moduleapi/ProductionApi~productionStrategiesProductionStrategyIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} productionStrategyId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.clone Create a clone of this strategy when cancelling the existing one.
     * @param {module:api/ProductionApi~productionStrategiesProductionStrategyIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productionStrategiesProductionStrategyIdDelete(productionStrategyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productionStrategyId' is set
      if (productionStrategyId === undefined || productionStrategyId === null) {
        throw new Error("Missing the required parameter 'productionStrategyId' when calling productionStrategiesProductionStrategyIdDelete");
      }

      let pathParams = {
        'production_strategy_id': productionStrategyId
      };
      let queryParams = {
        'clone': opts['clone']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/production_strategies/{production_strategy_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the productionStrategiesProductionStrategyIdGet operation.
     * @callback moduleapi/ProductionApi~productionStrategiesProductionStrategyIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the ProductionStrategy for the provided job, if set - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} productionStrategyId 
     * @param {module:api/ProductionApi~productionStrategiesProductionStrategyIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    productionStrategiesProductionStrategyIdGet(productionStrategyId, callback) {
      
      let postBody = null;
      // verify the required parameter 'productionStrategyId' is set
      if (productionStrategyId === undefined || productionStrategyId === null) {
        throw new Error("Missing the required parameter 'productionStrategyId' when calling productionStrategiesProductionStrategyIdGet");
      }

      let pathParams = {
        'production_strategy_id': productionStrategyId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/production_strategies/{production_strategy_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the productionStrategiesProductionStrategyIdImposingsGet operation.
     * @callback moduleapi/ProductionApi~productionStrategiesProductionStrategyIdImposingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Imposing>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Imposings for provided ProductionStrategy - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} productionStrategyId 
     * @param {module:api/ProductionApi~productionStrategiesProductionStrategyIdImposingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    productionStrategiesProductionStrategyIdImposingsGet(productionStrategyId, callback) {
      
      let postBody = null;
      // verify the required parameter 'productionStrategyId' is set
      if (productionStrategyId === undefined || productionStrategyId === null) {
        throw new Error("Missing the required parameter 'productionStrategyId' when calling productionStrategiesProductionStrategyIdImposingsGet");
      }

      let pathParams = {
        'production_strategy_id': productionStrategyId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Imposing];

      return this.apiClient.callApi(
        '/production_strategies/{production_strategy_id}/imposings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the productionStrategiesProductionStrategyIdImposingsPost operation.
     * @callback moduleapi/ProductionApi~productionStrategiesProductionStrategyIdImposingsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Imposing{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Imposing for the provided ProductionStrategy - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/ProductionStrategyIdImposingsBody} body 
     * @param {String} productionStrategyId 
     * @param {module:api/ProductionApi~productionStrategiesProductionStrategyIdImposingsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    productionStrategiesProductionStrategyIdImposingsPost(body, productionStrategyId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productionStrategiesProductionStrategyIdImposingsPost");
      }
      // verify the required parameter 'productionStrategyId' is set
      if (productionStrategyId === undefined || productionStrategyId === null) {
        throw new Error("Missing the required parameter 'productionStrategyId' when calling productionStrategiesProductionStrategyIdImposingsPost");
      }

      let pathParams = {
        'production_strategy_id': productionStrategyId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Imposing;

      return this.apiClient.callApi(
        '/production_strategies/{production_strategy_id}/imposings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the productionStrategiesProductionStrategyIdPatch operation.
     * @callback moduleapi/ProductionApi~productionStrategiesProductionStrategyIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/ProductionStrategiesProductionStrategyIdBody} body 
     * @param {String} productionStrategyId 
     * @param {module:api/ProductionApi~productionStrategiesProductionStrategyIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    productionStrategiesProductionStrategyIdPatch(body, productionStrategyId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productionStrategiesProductionStrategyIdPatch");
      }
      // verify the required parameter 'productionStrategyId' is set
      if (productionStrategyId === undefined || productionStrategyId === null) {
        throw new Error("Missing the required parameter 'productionStrategyId' when calling productionStrategiesProductionStrategyIdPatch");
      }

      let pathParams = {
        'production_strategy_id': productionStrategyId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/production_strategies/{production_strategy_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the rulesRuleIdDelete operation.
     * @callback moduleapi/ProductionApi~rulesRuleIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a rule. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.lists.w&#x60;
     * @param {String} ruleId 
     * @param {module:api/ProductionApi~rulesRuleIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rulesRuleIdDelete(ruleId, callback) {
      
      let postBody = null;
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling rulesRuleIdDelete");
      }

      let pathParams = {
        'rule_id': ruleId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/rules/{rule_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the rulesRuleIdGet operation.
     * @callback moduleapi/ProductionApi~rulesRuleIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rule{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific rule. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.lists.r&#x60;
     * @param {String} ruleId 
     * @param {module:api/ProductionApi~rulesRuleIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    rulesRuleIdGet(ruleId, callback) {
      
      let postBody = null;
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling rulesRuleIdGet");
      }

      let pathParams = {
        'rule_id': ruleId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Rule;

      return this.apiClient.callApi(
        '/rules/{rule_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the rulesRuleIdPatch operation.
     * @callback moduleapi/ProductionApi~rulesRuleIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rule{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a rule. - needed bearer: &#x60;Organization&#x60; or &#x60;Person&#x60; - needed scopes: &#x60;mission_control.lists.w&#x60;
     * @param {module:model/RulesRuleIdBody} body 
     * @param {String} ruleId 
     * @param {module:api/ProductionApi~rulesRuleIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    rulesRuleIdPatch(body, ruleId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling rulesRuleIdPatch");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling rulesRuleIdPatch");
      }

      let pathParams = {
        'rule_id': ruleId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Rule;

      return this.apiClient.callApi(
        '/rules/{rule_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the signaturesSignatureIdDelete operation.
     * @callback moduleapi/ProductionApi~signaturesSignatureIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a Signature from the Imposing - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} signatureId 
     * @param {module:api/ProductionApi~signaturesSignatureIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    signaturesSignatureIdDelete(signatureId, callback) {
      
      let postBody = null;
      // verify the required parameter 'signatureId' is set
      if (signatureId === undefined || signatureId === null) {
        throw new Error("Missing the required parameter 'signatureId' when calling signaturesSignatureIdDelete");
      }

      let pathParams = {
        'signature_id': signatureId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/signatures/{signature_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the signaturesSignatureIdGet operation.
     * @callback moduleapi/ProductionApi~signaturesSignatureIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Signature{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the full details of a given Signature - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} signatureId 
     * @param {module:api/ProductionApi~signaturesSignatureIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    signaturesSignatureIdGet(signatureId, callback) {
      
      let postBody = null;
      // verify the required parameter 'signatureId' is set
      if (signatureId === undefined || signatureId === null) {
        throw new Error("Missing the required parameter 'signatureId' when calling signaturesSignatureIdGet");
      }

      let pathParams = {
        'signature_id': signatureId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Signature;

      return this.apiClient.callApi(
        '/signatures/{signature_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the signaturesSignatureIdPatch operation.
     * @callback moduleapi/ProductionApi~signaturesSignatureIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Signature{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Signature - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/SignaturesSignatureIdBody} body 
     * @param {String} signatureId 
     * @param {module:api/ProductionApi~signaturesSignatureIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    signaturesSignatureIdPatch(body, signatureId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling signaturesSignatureIdPatch");
      }
      // verify the required parameter 'signatureId' is set
      if (signatureId === undefined || signatureId === null) {
        throw new Error("Missing the required parameter 'signatureId' when calling signaturesSignatureIdPatch");
      }

      let pathParams = {
        'signature_id': signatureId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Signature;

      return this.apiClient.callApi(
        '/signatures/{signature_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the todosTodoIdDelete operation.
     * @callback moduleapi/ProductionApi~todosTodoIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a todo - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} todoId 
     * @param {module:api/ProductionApi~todosTodoIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    todosTodoIdDelete(todoId, callback) {
      
      let postBody = null;
      // verify the required parameter 'todoId' is set
      if (todoId === undefined || todoId === null) {
        throw new Error("Missing the required parameter 'todoId' when calling todosTodoIdDelete");
      }

      let pathParams = {
        'todo_id': todoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/todos/{todo_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the todosTodoIdGet operation.
     * @callback moduleapi/ProductionApi~todosTodoIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Todo{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display the status of a todo - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} todoId 
     * @param {module:api/ProductionApi~todosTodoIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    todosTodoIdGet(todoId, callback) {
      
      let postBody = null;
      // verify the required parameter 'todoId' is set
      if (todoId === undefined || todoId === null) {
        throw new Error("Missing the required parameter 'todoId' when calling todosTodoIdGet");
      }

      let pathParams = {
        'todo_id': todoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Todo;

      return this.apiClient.callApi(
        '/todos/{todo_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the todosTodoIdPatch operation.
     * @callback moduleapi/ProductionApi~todosTodoIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Todo{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change properties of a todo - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/TodosTodoIdBody} body 
     * @param {String} todoId 
     * @param {module:api/ProductionApi~todosTodoIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    todosTodoIdPatch(body, todoId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling todosTodoIdPatch");
      }
      // verify the required parameter 'todoId' is set
      if (todoId === undefined || todoId === null) {
        throw new Error("Missing the required parameter 'todoId' when calling todosTodoIdPatch");
      }

      let pathParams = {
        'todo_id': todoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Todo;

      return this.apiClient.callApi(
        '/todos/{todo_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workstepGroupsGet operation.
     * @callback moduleapi/ProductionApi~workstepGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkstepGroup>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show all available WorkstepGroups - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/ProductionApi~workstepGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workstepGroupsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkstepGroup];

      return this.apiClient.callApi(
        '/workstep_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workstepGroupsPost operation.
     * @callback moduleapi/ProductionApi~workstepGroupsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkstepGroup{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new WorkstepGroup - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/WorkstepGroupsBody} body 
     * @param {module:api/ProductionApi~workstepGroupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workstepGroupsPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workstepGroupsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkstepGroup;

      return this.apiClient.callApi(
        '/workstep_groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workstepGroupsWorkstepGroupIdDelete operation.
     * @callback moduleapi/ProductionApi~workstepGroupsWorkstepGroupIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a WorkstepGroup, this will remove all contained Worksteps and associated IntermediateProducts\&quot;  - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} workstepGroupId 
     * @param {module:api/ProductionApi~workstepGroupsWorkstepGroupIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workstepGroupsWorkstepGroupIdDelete(workstepGroupId, callback) {
      
      let postBody = null;
      // verify the required parameter 'workstepGroupId' is set
      if (workstepGroupId === undefined || workstepGroupId === null) {
        throw new Error("Missing the required parameter 'workstepGroupId' when calling workstepGroupsWorkstepGroupIdDelete");
      }

      let pathParams = {
        'workstep_group_id': workstepGroupId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/workstep_groups/{workstep_group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workstepGroupsWorkstepGroupIdGet operation.
     * @callback moduleapi/ProductionApi~workstepGroupsWorkstepGroupIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkstepGroup{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the full details of a given WorkstepGroup including all Worksteps - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} workstepGroupId 
     * @param {module:api/ProductionApi~workstepGroupsWorkstepGroupIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workstepGroupsWorkstepGroupIdGet(workstepGroupId, callback) {
      
      let postBody = null;
      // verify the required parameter 'workstepGroupId' is set
      if (workstepGroupId === undefined || workstepGroupId === null) {
        throw new Error("Missing the required parameter 'workstepGroupId' when calling workstepGroupsWorkstepGroupIdGet");
      }

      let pathParams = {
        'workstep_group_id': workstepGroupId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkstepGroup;

      return this.apiClient.callApi(
        '/workstep_groups/{workstep_group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workstepGroupsWorkstepGroupIdPatch operation.
     * @callback moduleapi/ProductionApi~workstepGroupsWorkstepGroupIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkstepGroup{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a WorkstepGroup - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/WorkstepGroupsWorkstepGroupIdBody} body 
     * @param {String} workstepGroupId 
     * @param {module:api/ProductionApi~workstepGroupsWorkstepGroupIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workstepGroupsWorkstepGroupIdPatch(body, workstepGroupId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workstepGroupsWorkstepGroupIdPatch");
      }
      // verify the required parameter 'workstepGroupId' is set
      if (workstepGroupId === undefined || workstepGroupId === null) {
        throw new Error("Missing the required parameter 'workstepGroupId' when calling workstepGroupsWorkstepGroupIdPatch");
      }

      let pathParams = {
        'workstep_group_id': workstepGroupId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkstepGroup;

      return this.apiClient.callApi(
        '/workstep_groups/{workstep_group_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workstepsGet operation.
     * @callback moduleapi/ProductionApi~workstepsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Workstep>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all available Worksteps - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of the current collection that shall be returned
     * @param {Number} opts.perPage The maximum number of items included in the response, ie., the page size (default to <.>)
     * @param {module:api/ProductionApi~workstepsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workstepsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Workstep];

      return this.apiClient.callApi(
        '/worksteps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workstepsPost operation.
     * @callback moduleapi/ProductionApi~workstepsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workstep{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Workstep - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/WorkstepsBody} body 
     * @param {module:api/ProductionApi~workstepsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workstepsPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workstepsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Workstep;

      return this.apiClient.callApi(
        '/worksteps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workstepsWorkstepIdDelete operation.
     * @callback moduleapi/ProductionApi~workstepsWorkstepIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a Workstep - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} workstepId 
     * @param {module:api/ProductionApi~workstepsWorkstepIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workstepsWorkstepIdDelete(workstepId, callback) {
      
      let postBody = null;
      // verify the required parameter 'workstepId' is set
      if (workstepId === undefined || workstepId === null) {
        throw new Error("Missing the required parameter 'workstepId' when calling workstepsWorkstepIdDelete");
      }

      let pathParams = {
        'workstep_id': workstepId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/worksteps/{workstep_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workstepsWorkstepIdGet operation.
     * @callback moduleapi/ProductionApi~workstepsWorkstepIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workstep{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the full details of a Workstep - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.r&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {String} workstepId 
     * @param {module:api/ProductionApi~workstepsWorkstepIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workstepsWorkstepIdGet(workstepId, callback) {
      
      let postBody = null;
      // verify the required parameter 'workstepId' is set
      if (workstepId === undefined || workstepId === null) {
        throw new Error("Missing the required parameter 'workstepId' when calling workstepsWorkstepIdGet");
      }

      let pathParams = {
        'workstep_id': workstepId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Workstep;

      return this.apiClient.callApi(
        '/worksteps/{workstep_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workstepsWorkstepIdPatch operation.
     * @callback moduleapi/ProductionApi~workstepsWorkstepIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workstep{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Workstep with the provided params - needed bearer: &#x60;Organization&#x60; - needed scopes: &#x60;mission_control.jobs.w&#x60; or &#x60;mission_control.jobs.rw&#x60;
     * @param {module:model/WorkstepsWorkstepIdBody} body 
     * @param {String} workstepId 
     * @param {module:api/ProductionApi~workstepsWorkstepIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workstepsWorkstepIdPatch(body, workstepId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workstepsWorkstepIdPatch");
      }
      // verify the required parameter 'workstepId' is set
      if (workstepId === undefined || workstepId === null) {
        throw new Error("Missing the required parameter 'workstepId' when calling workstepsWorkstepIdPatch");
      }

      let pathParams = {
        'workstep_id': workstepId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Workstep;

      return this.apiClient.callApi(
        '/worksteps/{workstep_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}