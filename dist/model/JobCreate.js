"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobCreate = void 0;
var _ApiClient = require("../ApiClient");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
/**
 * The JobCreate model module.
 * @module model/JobCreate
 * @version 1.0.0
 */
var JobCreate = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>JobCreate</code>.
   * @alias module:model/JobCreate
   * @class
   */
  function JobCreate() {
    _classCallCheck(this, JobCreate);
  }

  /**
   * Constructs a <code>JobCreate</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/JobCreate} obj Optional instance to populate.
   * @return {module:model/JobCreate} The populated <code>JobCreate</code> instance.
   */
  _createClass(JobCreate, null, [{
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new JobCreate();
        if (data.hasOwnProperty('name')) obj.name = _ApiClient.ApiClient.convertToType(data['name'], 'String');
        if (data.hasOwnProperty('owner_id')) obj.ownerId = _ApiClient.ApiClient.convertToType(data['owner_id'], 'String');
        if (data.hasOwnProperty('references')) obj.references = _ApiClient.ApiClient.convertToType(data['references'], ['String']);
        if (data.hasOwnProperty('kind')) obj.kind = _ApiClient.ApiClient.convertToType(data['kind'], 'String');
        if (data.hasOwnProperty('source')) obj.source = _ApiClient.ApiClient.convertToType(data['source'], 'String');
        if (data.hasOwnProperty('version')) obj.version = _ApiClient.ApiClient.convertToType(data['version'], 'String');
        if (data.hasOwnProperty('quantity')) obj.quantity = _ApiClient.ApiClient.convertToType(data['quantity'], 'Number');
        if (data.hasOwnProperty('acceptable_quantity_excess')) obj.acceptableQuantityExcess = _ApiClient.ApiClient.convertToType(data['acceptable_quantity_excess'], 'Number');
        if (data.hasOwnProperty('acceptable_quantity_underrun')) obj.acceptableQuantityUnderrun = _ApiClient.ApiClient.convertToType(data['acceptable_quantity_underrun'], 'Number');
        if (data.hasOwnProperty('due_at')) obj.dueAt = _ApiClient.ApiClient.convertToType(data['due_at'], 'Date');
        if (data.hasOwnProperty('estimated_completed_at')) obj.estimatedCompletedAt = _ApiClient.ApiClient.convertToType(data['estimated_completed_at'], 'Date');
      }
      return obj;
    }
  }]);
  return JobCreate;
}();
/**
 * The name of the Job
 * @member {String} name
 */
exports.JobCreate = JobCreate;
JobCreate.prototype.name = undefined;

/**
 * The id of the Organization which the Job belongs to
 * @member {String} ownerId
 */
JobCreate.prototype.ownerId = undefined;

/**
 * A list of refrences that are used in customer/human communication. This is not a technical ID and should not be treated as such. The first reference of this job is automatically generated by Mission Control.
 * @member {Array.<String>} references
 */
JobCreate.prototype.references = undefined;

/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
JobCreate.KindEnum = {
  /**
   * value: "booklet"
   * @const
   */
  booklet: "booklet",
  /**
   * value: "carton"
   * @const
   */
  carton: "carton",
  /**
   * value: "carton_two_piece"
   * @const
   */
  cartonTwoPiece: "carton_two_piece",
  /**
   * value: "brochure"
   * @const
   */
  brochure: "brochure",
  /**
   * value: "business_card"
   * @const
   */
  businessCard: "business_card",
  /**
   * value: "box"
   * @const
   */
  box: "box",
  /**
   * value: "compliment_slip"
   * @const
   */
  complimentSlip: "compliment_slip",
  /**
   * value: "continuation_sheet"
   * @const
   */
  continuationSheet: "continuation_sheet",
  /**
   * value: "cover_letter"
   * @const
   */
  coverLetter: "cover_letter",
  /**
   * value: "envelope"
   * @const
   */
  envelope: "envelope",
  /**
   * value: "flyer"
   * @const
   */
  flyer: "flyer",
  /**
   * value: "hardcover_book"
   * @const
   */
  hardcoverBook: "hardcover_book",
  /**
   * value: "label"
   * @const
   */
  label: "label",
  /**
   * value: "leaflet"
   * @const
   */
  leaflet: "leaflet",
  /**
   * value: "letter_head"
   * @const
   */
  letterHead: "letter_head",
  /**
   * value: "magazine"
   * @const
   */
  magazine: "magazine",
  /**
   * value: "map"
   * @const
   */
  map: "map",
  /**
   * value: "ncr_pad"
   * @const
   */
  ncrPad: "ncr_pad",
  /**
   * value: "newspaper"
   * @const
   */
  newspaper: "newspaper",
  /**
   * value: "notebook"
   * @const
   */
  notebook: "notebook",
  /**
   * value: "pen"
   * @const
   */
  pen: "pen",
  /**
   * value: "postcard"
   * @const
   */
  postcard: "postcard",
  /**
   * value: "poster"
   * @const
   */
  poster: "poster",
  /**
   * value: "self_mailer"
   * @const
   */
  selfMailer: "self_mailer",
  /**
   * value: "sheet"
   * @const
   */
  sheet: "sheet",
  /**
   * value: "softcover_book"
   * @const
   */
  softcoverBook: "softcover_book"
};
/**
 * The kind of Job, which must be one of this list
 * @member {module:model/JobCreate.KindEnum} kind
 */
JobCreate.prototype.kind = undefined;

/**
 * The source software or system that uploaded this job. This could also be a hint to a web shop or other sales channel identifier.
 * @member {String} source
 */
JobCreate.prototype.source = undefined;

/**
 * A version identifier that defines the iteration of this job. Can be a numeric counter or alpha-numeric version designator.
 * @member {String} version
 */
JobCreate.prototype.version = undefined;

/**
 * The amount of copies that need to be manufactured of this job.
 * @member {Number} quantity
 */
JobCreate.prototype.quantity = undefined;

/**
 * The amount of copies that can be produced additionally to `quantity` and still be sold to the customer as per the purchase agreement.
 * @member {Number} acceptableQuantityExcess
 */
JobCreate.prototype.acceptableQuantityExcess = undefined;

/**
 * The amount of copies that can be producded less than `quantity` which still adheres the customers purchase agreement.
 * @member {Number} acceptableQuantityUnderrun
 */
JobCreate.prototype.acceptableQuantityUnderrun = undefined;

/**
 * The date and time at which this job needs to completed in order to be shipped. This is not when it needs to arrive at the customer.
 * @member {Date} dueAt
 */
JobCreate.prototype.dueAt = undefined;

/**
 * The date and time at which this job is expected to be completed in order to be shipped. This is not when it needs to arrive at the customer.
 * @member {Date} estimatedCompletedAt
 */
JobCreate.prototype.estimatedCompletedAt = undefined;