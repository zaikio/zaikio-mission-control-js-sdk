"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Customer = void 0;
var _ApiClient = require("../ApiClient");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
/**
 * The Customer model module.
 * @module model/Customer
 * @version 1.0.0
 */
var Customer = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Customer</code>.
   * @alias module:model/Customer
   * @class
   * @param id {String} 
   * @param createdAt {Date} 
   * @param updatedAt {Date} 
   * @param name {String} The name of this customer
   * @param textIdentifier {String} An identifier for this customer
   * @param references {Array.<String>} The the first reference of this customer is generated by the system that created it. The references are supposed to be used in customer/human related communication. It is not a technical ID.
   */
  function Customer(id, createdAt, updatedAt, name, textIdentifier, references) {
    _classCallCheck(this, Customer);
    this.id = id;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.name = name;
    this.textIdentifier = textIdentifier;
    this.references = references;
  }

  /**
   * Constructs a <code>Customer</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Customer} obj Optional instance to populate.
   * @return {module:model/Customer} The populated <code>Customer</code> instance.
   */
  _createClass(Customer, null, [{
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Customer();
        if (data.hasOwnProperty('id')) obj.id = _ApiClient.ApiClient.convertToType(data['id'], 'String');
        if (data.hasOwnProperty('created_at')) obj.createdAt = _ApiClient.ApiClient.convertToType(data['created_at'], 'Date');
        if (data.hasOwnProperty('updated_at')) obj.updatedAt = _ApiClient.ApiClient.convertToType(data['updated_at'], 'Date');
        if (data.hasOwnProperty('name')) obj.name = _ApiClient.ApiClient.convertToType(data['name'], 'String');
        if (data.hasOwnProperty('text_identifier')) obj.textIdentifier = _ApiClient.ApiClient.convertToType(data['text_identifier'], 'String');
        if (data.hasOwnProperty('references')) obj.references = _ApiClient.ApiClient.convertToType(data['references'], ['String']);
      }
      return obj;
    }
  }]);
  return Customer;
}();
/**
 * @member {String} id
 */
exports.Customer = Customer;
Customer.prototype.id = undefined;

/**
 * @member {Date} createdAt
 */
Customer.prototype.createdAt = undefined;

/**
 * @member {Date} updatedAt
 */
Customer.prototype.updatedAt = undefined;

/**
 * The name of this customer
 * @member {String} name
 */
Customer.prototype.name = undefined;

/**
 * An identifier for this customer
 * @member {String} textIdentifier
 */
Customer.prototype.textIdentifier = undefined;

/**
 * The the first reference of this customer is generated by the system that created it. The references are supposed to be used in customer/human related communication. It is not a technical ID.
 * @member {Array.<String>} references
 */
Customer.prototype.references = undefined;

// Implement OneOfExpandedOrderCustomer interface: